<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd                   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <context:property-placeholder location="classpath*:database.properties" />
    <context:spring-configured />

    <context:component-scan base-package="com.baeldung.multitenancy">
    </context:component-scan>

    <util:map id="mydatasources">
        <entry key="tenant1" value-ref="source1" />
        <entry key="tenant2" value-ref="source2" />
    </util:map>

    <bean id="source1" parent="mainDataSource">
        <property name="url" value="jdbc:mysql://localhost/tenant1" />
        <property name="username" value="baeldung" />
        <property name="password" value="spring" />
    </bean>

    <bean id="source2" parent="mainDataSource">
        <property name="url" value="jdbc:mysql://localhost/tenant2" />
        <property name="username" value="testuser" />
        <property name="password" value="password" />
    </bean>

    <bean class="org.apache.commons.dbcp.BasicDataSource" abstract="true"
        destroy-method="close" id="mainDataSource">
        <property name="driverClassName" value="${database.driverClassName}" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true" />
        <property name="testWhileIdle" value="true" />
        <property name="numTestsPerEvictionRun" value="2" />
        <property name="minEvictableIdleTimeMillis" value="1000000" />
        <property name="timeBetweenEvictionRunsMillis" value="1000000" />
        <property name="validationQuery" value="SELECT 1" />
    </bean>

    <bean id="sessionFactory" class="com.baeldung.multitenancy.SessionFactoryBean">
        <property name="dataSourceMap" ref="mydatasources" />
        <property name="dataSource" ref="source1" />
        <property name="hibernateProperties">
            <map>
                <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
                <entry key="hibernate.show_sql" value="true" />
                <entry key="hibernate.multiTenancy" value="DATABASE" />
                <entry key="hibernate.tenant_identifier_resolver"
                    value-ref="currentSessionTenantIdentifierResolver" />
                <entry key="hibernate.multi_tenant_connection_provider"
                    value-ref="simpleMultiTenantConnectionProvider" />
            </map>
        </property>
    </bean>

    <bean id="currentSessionTenantIdentifierResolver"
        class="com.baeldung.multitenancy.implementation.CurrentSessionTenantIdentifierResolver"
        scope="request">
        <aop:scoped-proxy />
    </bean>

    <bean id="simpleMultiTenantConnectionProvider"
        class="com.baeldung.multitenancy.implementation.SimpleMultiTenantConnectionProvider">
        <property name="dataSourceMap" ref="datasources" />
    </bean>


    <bean id="multitenantService" class="com.baeldung.multitenancy.service.MultitenantService">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven mode="aspectj"
        transaction-manager="transactionManager" />

    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
        <property name="autodetectDataSource" value="false" />
    </bean>

    <tx:advice id="transactionServiceDao" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="exists" propagation="SUPPORTS"
                rollback-for="java.lang.Exception" />
            <tx:method name="find*" propagation="SUPPORTS"
                rollback-for="java.lang.Exception" />
            <tx:method name="get*" propagation="SUPPORTS"
                rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED"
                rollback-for="java.lang.Exception" />
            <tx:method name="*Commit" propagation="REQUIRES_NEW"
                rollback-for="java.lang.Exception" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="serviceInvocation"
            expression="execution(public com.baeldung.multitenancy.service.MultitenantService.*(..))" />
        <aop:advisor pointcut-ref="serviceInvocation"
            advice-ref="transactionServiceDao" />
    </aop:config>

</beans>
