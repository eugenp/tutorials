<?xml version="1.0" encoding="UTF-8"?>
<bean:beans xmlns="http://www.springframework.org/schema/batch"    
    xmlns:bean="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx"    
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"   
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:int-jms="http://www.springframework.org/schema/integration/jms" 
    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:amq="http://activemq.apache.org/schema/core"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/batch 
    http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/integration 
    http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
    http://www.springframework.org/schema/integration/jms 
    http://www.springframework.org/schema/integration/jms/spring-integration-jms-2.0.xsd
    http://www.springframework.org/schema/jms 
    http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
    http://activemq.apache.org/schema/core 
    http://activemq.apache.org/schema/core/activemq-core.xsd">
    <bean:import resource="classpath:ch11/job-context.xml"/>
    <bean:import resource="classpath:ch11/job-context-db.xml"/>
    
	<job id="partitionRemoteJob">
		<step id="partitionRemoteStep">
			<partition partitioner="partitioner" handler="partitionHandler" />
		</step>
	</job>
	
	<bean:bean id="partitioner" 
	    class="org.springframework.batch.core.partition.support.MultiResourcePartitioner">
		<bean:property name="keyName" value="fileName"/>
		<bean:property name="resources" value="classpath:/ch11/data/*.csv"/>
	</bean:bean>
	
	<bean:bean id="partitionHandler" 
	    class="org.springframework.batch.integration.partition.MessageChannelPartitionHandler">
		<bean:property name="messagingOperations">
			<bean:bean class="org.springframework.integration.core.MessagingTemplate">
				<bean:property name="defaultChannel" ref="requests" />
				<bean:property name="receiveTimeout" value="30000" />
			</bean:bean>
		</bean:property>
		<bean:property name="replyChannel" ref="replies"/>
		<bean:property name="stepName" value="remoteStep" />
		<bean:property name="gridSize" value="2" />
	</bean:bean>	
	
	<step id="remoteStep">
		<tasklet>
			<chunk reader="flatFileItemReader" writer="jdbcItemWriter" commit-interval="10"/>
			<listeners>
                  <listener ref="partitionItemReadListener"></listener>
             </listeners>
		</tasklet>
	</step>	

	<int-jms:outbound-channel-adapter connection-factory="connectionFactory" 
	    channel="requests" destination-name="requests" />
	<int:channel id="requests" />
	<int:channel id="incoming" />		
	<int:transformer input-channel="incoming" output-channel="replies" 
	    ref="headerExtractor" method="extract" />
	
	<bean:bean id="headerExtractor" 
	    class="com.juxtapose.example.ch11.partition.remote.MessageTransformer"/>
	
	<int:channel id="replies" scope="thread">
		<int:queue />
		<int:interceptors>
			<bean:bean id="pollerInterceptor" 
			    class="com.juxtapose.example.ch11.partition.remote.MessageSourcePollerInterceptor">
				<bean:property name="messageSource">
					<bean:bean class="org.springframework.integration.jms.JmsDestinationPollingSource">
						<bean:constructor-arg>
							<bean:bean class="org.springframework.jms.core.JmsTemplate">
								<bean:property name="connectionFactory" ref="connectionFactory" />
								<bean:property name="defaultDestinationName" value="replies" />
								<bean:property name="receiveTimeout" value="1000" />
							</bean:bean>
						</bean:constructor-arg>
					</bean:bean>
				</bean:property>
				<bean:property name="channel" ref="incoming"/>
			</bean:bean>
		</int:interceptors>
	</int:channel>	

	<jms:listener-container connection-factory="connectionFactory" 
	    transaction-manager="transactionManager"
		acknowledge="transacted" concurrency="10">
		<jms:listener destination="requests" response-destination="replies" 
		    ref="stepExecutionRequestHandler" method="handle" />
	</jms:listener-container>	

	<bean:bean id="stepExecutionRequestHandler" 
	    class="org.springframework.batch.integration.partition.StepExecutionRequestHandler">
		<bean:property name="jobExplorer" ref="jobExplorer"/>
		<bean:property name="stepLocator" ref="stepLocator"/>
	</bean:bean>
			
	<amq:broker useJmx="false" persistent="false" schedulerSupport="false">
    	<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:61616"/>
		</amq:transportConnectors>
	</amq:broker>
	<amq:connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616"/>
		
	<bean:bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
		<bean:property name="scopes">
			<bean:map>
				<bean:entry key="thread">
					<bean:bean class="org.springframework.context.support.SimpleThreadScope" />
				</bean:entry>
			</bean:map>
		</bean:property>
	</bean:bean>	
	
	<bean:bean id="flatFileItemReader" scope="step"
        class="org.springframework.batch.item.file.FlatFileItemReader">
        <bean:property name="resource" 
            value="#{stepExecutionContext[fileName]}"/>
        <bean:property name="lineMapper" ref="lineMapper" />
    </bean:bean>
    
	<bean:bean id="lineMapper" 
	    class="org.springframework.batch.item.file.mapping.DefaultLineMapper" >
	    <bean:property name="lineTokenizer" ref="delimitedLineTokenizer" />
	    <bean:property name="fieldSetMapper" ref="creditBillFieldSetMapper"/>
	</bean:bean>
	
	<bean:bean id="delimitedLineTokenizer" 
        class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <bean:property name="delimiter" value=","/>
        <bean:property name="names" value="id,accountID,name,amount,date,address" />
    </bean:bean>

    <bean:bean id="creditBillFieldSetMapper"
        class="com.juxtapose.example.ch11.partition.CreditBillFieldSetMapper">
    </bean:bean>
    
    <bean:bean id="jdbcItemWriter" 
        class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <bean:property name="dataSource" ref="dataSource"/>
        <bean:property name="sql" value="insert into t_destcredit (ID,ACCOUNTID,NAME,AMOUNT,DATE,ADDRESS) values (:id,:accountID,:name,:amount,:date,:address)"/>
        <bean:property name="itemSqlParameterSourceProvider">
            <bean:bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </bean:property>
    </bean:bean>
    
    <bean:bean id="creditBillProcessor" scope="step"
        class="com.juxtapose.example.ch11.partition.CreditBillProcessor">
	</bean:bean>
        
    <bean:bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<bean:property name="corePoolSize" value="5" />
		<bean:property name="maxPoolSize" value="5" />
    </bean:bean>	
    
    <bean:bean id="partitionItemReadListener"
		class="com.juxtapose.example.ch11.partition.PartitionStepExecutionListener">
	</bean:bean>
</bean:beans>