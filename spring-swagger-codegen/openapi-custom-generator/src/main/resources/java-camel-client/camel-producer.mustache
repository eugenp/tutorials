/**
* NOTE: This class is auto generated by Java Camel Client Custom OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
* https://baeldung.com
* Do not edit the class manually.
*/
package {{apiPackage}};

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import {{modelPackage}}.*;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.LoggingLevel;

import java.net.URL;
import java.util.Arrays;
import java.util.List;

@Component
public class {{classname}} extends RouteBuilder {

    private final Environment env;

{{#servers}}
    {{#-first}}private final List<String> servers = Arrays.asList({{/-first}}
        "{{{url}}}"{{^-last}},{{/-last}}
    {{#-last}});{{/-last}}
{{/servers}}
{{^servers}}
    private final List<String> servers = Arrays.asList("{{#basePath}}{{{.}}}{{/basePath}}{{^basePath}}http://example.com{{/basePath}}");
{{/servers}}

    public {{classname}}(Environment env) {
        this.env = env;
    }

    // Route identifiers
    {{#operations}}{{#operation}}public static final String {{#lambda.javaconstant}}{{operationId}}{{/lambda.javaconstant}} = "direct:{{operationId}}";
        public static final String {{#lambda.javaconstant}}{{operationId}}{{/lambda.javaconstant}}_ROUTE_ID = "{{operationId}}";
    {{/operation}}{{/operations}}

    @Override
    public void configure() throws Exception {
{{#performBeanValidation}}
      onException(Exception.class)
        .log(LoggingLevel.ERROR, "${exception.message}: ${exception.stacktrace}")
        .handled(true)
        .process("{{camelValidationErrorProcessor}}");
{{/performBeanValidation}}

        URL target = new URL(env.getProperty("{{#lambda.lowercase}}{{apiPackage}}.{{classname}}{{/lambda.lowercase}}.endpoint",servers.get(0)));

        /**
         * Configure destination
         */
        restConfiguration()
          .host(target.getHost())
          .port(target.getPort())
          .contextPath(target.getPath())
          .scheme(target.getProtocol());
{{#operations}}{{#operation}}
        /**
        {{httpMethod}} {{{path}}}{{#summary}} : {{.}}{{/summary}}
        */
        from({{#lambda.javaconstant}}{{operationId}}{{/lambda.javaconstant}})
          .id({{#lambda.javaconstant}}{{operationId}}{{/lambda.javaconstant}}_ROUTE_ID)
          .to("rest:{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}:{{#lambda.path}}{{basePath}}{{/lambda.path}}:{{path}}{{#returnType}}?outType={{modelPackage}}.{{.}}{{/returnType}}");
{{/operation}}{{/operations}}
     }
}