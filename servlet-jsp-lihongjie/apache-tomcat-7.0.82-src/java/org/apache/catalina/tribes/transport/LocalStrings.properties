# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

IDataSender.ack.eof=EOF reached at local port [{0}:{1,number,integer}]
IDataSender.ack.receive=Got ACK at local port [{0}:{1,number,integer}]
IDataSender.ack.missing=Unable to read acknowledgement from [{0}:{1,number,integer}] in {2,number,integer} ms. Disconnecting socket, and trying again.
IDataSender.ack.read=Read wait ack char [{2}] [{0}:{1,number,integer}]
IDataSender.ack.start=Waiting for ACK message [{0}:{1,number,integer}]
IDataSender.ack.wrong=Missing correct ACK after 10 bytes read at local port [{0}:{1,number,integer}]
IDataSender.closeSocket=Sender close socket to [{0}:{1,number,integer}] (close count {2,number,integer})
IDataSender.connect=Sender connect to [{0}:{1,number,integer}] (connect count {2,number,integer})
IDataSender.create=Create sender [{0}:{1,number,integer}]
IDataSender.disconnect=Sender disconnect from [{0}:{1,number,integer}] (disconnect count {2,number,integer})
IDataSender.message.disconnect=Message transfered: Sender can''t disconnect from [{0}:{1,number,integer}]
IDataSender.message.create=Message transfered: Sender can''t create current socket [{0}:{1,number,integer}]
IDataSender.openSocket=Sender open socket to [{0}:{1,number,integer}] (open count {2,number,integer})
IDataSender.openSocket.failure=Open sender socket [{0}:{1,number,integer}] failure! (open failure count {2,number,integer})
IDataSender.send.again=Send data again to [{0}:{1,number,integer}]
IDataSender.send.crash=Send message crashed [{0}:{1,number,integer}] type=[{2}], id=[{3}]
IDataSender.send.message=Send message to [{0}:{1,number,integer}] id=[{2}] size={3,number,integer}
IDataSender.send.lost=Message lost: [{0}:{1,number,integer}] type=[{2}], id=[{3}]
IDataSender.senderModes.Configured=Configured a data replication sender for mode {0}
IDataSender.senderModes.Instantiate=Can''t instantiate a data replication sender of class {0}
IDataSender.senderModes.Missing=Can''t configure a data replication sender for mode {0}
IDataSender.senderModes.Resources=Can't load data replication sender mapping list
IDataSender.stats=Send stats from [{0}:{1,number,integer}], Nr of bytes sent={2,number,integer} over {3} = {4,number,integer} bytes/request, processing time {5,number,integer} msec, avg processing time {6,number,integer} msec

NioReceiver.stop.threadRunning=The NioReceiver thread did not stop in a timely manner. Errors may be observed when the selector is closed.

PooledSender.senderDisconnectFail=Failed to disconnect sender
