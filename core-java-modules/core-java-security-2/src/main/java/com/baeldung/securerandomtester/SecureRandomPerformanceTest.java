package com.baeldung.securerandomtester;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class SecureRandomPerformanceTest {
    static String [] algorithmNames =  {"NativePRNG", "NativePRNGBlocking", "NativePRNGNonBlocking", "PKCS11", "SHA1PRNG", "Windows-PRNG"};

    public static void main(String[] args) {
        System.out.println("Starting performance test!");

        for (int i = 0; i < algorithmNames.length; i++)
        {
            String name = algorithmNames[i];
            try {
                SecureRandom random = SecureRandom.getInstance(name);
                measureTime(random);
            } catch (NoSuchAlgorithmException e) {
                //just ignore it
            }
        }
    }

    private static void measureTime(SecureRandom secureRandom) {
        final double nanosec = 1000000000.0;
        final int nBytes = 256;
        final int nSamples = 2000000;
        long start = System.nanoTime();
        byte[] randomBytes = new byte[nBytes];
        for (int i = 0; i < nSamples; i++)
        {
            secureRandom.nextBytes(randomBytes);          
        }
        double duration = (System.nanoTime() - start) / nanosec;

        System.out.println( nSamples + " samples of length " + nBytes + " each generated by " + secureRandom.getAlgorithm() + " algorithm in " + duration + " s");
    }
}
