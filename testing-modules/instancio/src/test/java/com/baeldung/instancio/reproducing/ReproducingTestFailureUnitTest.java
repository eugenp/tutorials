package com.baeldung.instancio.reproducing;

import com.baeldung.instancio.student.model.Course;
import com.baeldung.instancio.student.model.Student;
import com.baeldung.instancio.student.service.EnrollmentService;
import org.instancio.Instancio;
import org.instancio.junit.InstancioExtension;
import org.instancio.junit.Seed;
import org.instancio.junit.WithSettings;
import org.instancio.settings.Keys;
import org.instancio.settings.Settings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(InstancioExtension.class)
class ReproducingTestFailureUnitTest {

    @WithSettings
    private static final Settings settings = Settings.create()
            .set(Keys.COLLECTION_MIN_SIZE, 50)
            .set(Keys.COLLECTION_MAX_SIZE, 100)
            .lock();

    private final EnrollmentService enrollmentService = new EnrollmentService();

    /**
     * This test fails because the {@code enrollInCourse()} method
     * throws an exception if the student has at least one grade F.
     *
     * <p>Sample error message generated by {@link InstancioExtension}:
     *
     * <pre>
     * timestamp = 2023-01-24T13:50:12.436704221, Instancio = Test method 'enrollStudent' failed with seed: 1234
     * </pre>
     * <p>
     * Using the reported seed value we can reproduce the test failure.
     */
    @Test
    @Seed(1234)
    @Disabled("This test fails on purpose to demonstrate failure reporting by InstancioExtension")
    void whenGivenNoFailingGrades_thenShouldEnrollStudentInCourse() {
        // Given
        Course course = Instancio.create(Course.class);
        Student student = Instancio.of(Student.class)
                // The test can be fixed by uncommenting the line below:
                //.generate(all(Grade.class), gen -> gen.enumOf(Grade.class).excluding(Grade.F))
                .create();

        System.out.println(student); // same data generated on each run

        // When
        boolean isEnrolled = enrollmentService.enrollStudent(student, course);

        // Then
        assertThat(isEnrolled).isTrue();
    }
}
