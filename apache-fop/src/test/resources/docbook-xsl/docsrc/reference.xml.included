<?xml version="1.0" encoding="ASCII"?><set xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:src="http://nwalsh.com/xmlns/litprog/fragment" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:base="../docsrc/">
  <!-- * WARNING WARNING WARNING -->
  <!-- * WARNING WARNING WARNING -->
  <!-- * -->
  <!-- * This document has duplicate IDs in it and is intended for -->
  <!-- * processing using the chunk.xsl stylesheet to generate chunked -->
  <!-- * output from it (not for generating a single HTML output file) -->
  <!-- * -->
  <!-- * WARNING WARNING WARNING -->
  <!-- * WARNING WARNING WARNING -->
  <title>DocBook XSL Stylesheets: Reference&#160;Documentation</title>
  <info><releaseinfo role="meta">$Id: reference.xml 9625 2012-10-20 23:12:33Z dcramer $ </releaseinfo>
    <authorgroup version="5.0">
  <author>
    <personname>
      <surname>Walsh</surname><firstname>Norman</firstname>
    </personname>
  </author>
  <author>
    <orgname>The DocBook Project</orgname>
  </author>
</authorgroup>
    <copyright>
    <year>1999-2007</year>
    <holder>Norman Walsh</holder>
  </copyright><copyright>
    <year>2003</year>
    <holder>Ji&#345;&#237; Kosek</holder>
  </copyright><copyright>
    <year>2004-2007</year>
    <holder>Steve Ball</holder>
  </copyright><copyright>
    <year>2001-2007</year>
    <holder>The DocBook Project</holder>
  </copyright>
    <legalnotice version="5.0" id="copyright"><title>License</title>
<para>Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation files
(the <quote>Software</quote>), to deal in the Software without
restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:
</para>
<para>The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.</para>
<para>Except as contained in this notice, the names of individuals
credited with contribution to this software shall not be used in
advertising or otherwise to promote the sale, use or other dealings in
this Software without prior written authorization from the individuals
in question.</para>
<para>Any stylesheet derived from this Software that is publically
distributed will be identified with a different name and the version
strings in any derived Software will be changed so that no possibility
of confusion between the derived package and this Software will
exist.</para>
</legalnotice>
    <legalnotice version="5.0" id="warranty"><title>Warranty</title>
<para>THE SOFTWARE IS PROVIDED <quote>AS IS</quote>,
WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL NORMAN WALSH OR ANY
OTHER CONTRIBUTOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.</para>
</legalnotice>
    <abstract id="about">
      <title>About this document</title>
      <para>This is generated reference documentation for the DocBook
        XSL stylesheets. It is available in the following formats:
        <itemizedlist>
          <listitem>
            <para><link xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/reference.html">HTML</link>,
              <link xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/reference.pdf">PDF</link>,
              <link xlink:href="http://docbook.sourceforge.net/release/xsl/current/doc/reference.txt">plain text</link></para>
          </listitem>
        </itemizedlist>
        This is primarily documentation on the parameters and processing instructions you can use
        to control the behavior of the stylesheets.
        <note>
          <para>This is purely reference documentation&#160;&#8211; not how-to
            documentation. For a thorough step-by-step how-to guide to
            publishing content using the DocBook XSL stylesheets, see
            Bob Stayton&#8217;s <link xlink:href="http://www.sagehill.net/book-description.html">DocBook XSL: The Complete Guide</link>, available online
            at <link xlink:href="http://www.sagehill.net/docbookxsl/index.html">http://www.sagehill.net/docbookxsl/index.html</link>
          </para>
        </note>
        This document is divided into three sets of references:
        the first two sets provides user documentation; the third,
        developer documentation.</para>
    </abstract>
  </info>
  <book id="param"><title>DocBook XSL Stylesheets User&#160;Reference:&#160;Parameters</title>
    <info>
      <abstract>
        <para>This is generated reference documentation for all
          user-configurable parameters in the DocBook XSL
          stylesheets.
          <note>
            <para>This is purely reference documentation&#160;&#8211; not how-to
              documentation. For a thorough step-by-step how-to guide to
              publishing content using the DocBook XSL stylesheets, see
              Bob Stayton&#8217;s <link xlink:href="http://www.sagehill.net/book-description.html">DocBook XSL: The Complete Guide</link>, available online
              at <link xlink:href="http://www.sagehill.net/docbookxsl/index.html">http://www.sagehill.net/docbookxsl/index.html</link>
            </para>
          </note>
        </para>
      </abstract>
    </info>
    <part id="html">
      <?dbhtml dir="html"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../html/param.xml">HTML Parameter Reference</title>
      <partintro id="htmlintro">
        
  <para xml:base="../html/param.xml">This is reference documentation for all user-configurable
  parameters in the DocBook XSL HTML stylesheets (for generating
  HTML output).</para>

      </partintro>
      <reference id="admons" xml:base="../html/param.xml"><title>Admonitions</title>
<refentry version="5.0" id="admon.graphics.extension">
<refmeta>
<refentrytitle>admon.graphics.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.extension</refname>
<refpurpose>Filename extension for admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.extension.frag">
&lt;xsl:param name="admon.graphics.extension"&gt;.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the filename extension to use on admonition graphics.</para>

<itemizedlist>
  <para>The DocBook XSL distribution provides admonition graphics in the following formats:</para>
  <listitem><para>GIF (extension: <filename class="extension">.gif</filename>)</para></listitem>
  <listitem><para>PNG (extension: <filename class="extension">.png</filename>)</para></listitem>
  <listitem><para>SVG (extension: <filename class="extension">.svg</filename>)</para></listitem>
  <listitem><para>TIFF (extension: <filename class="extension">.tif</filename>)</para></listitem>
</itemizedlist>

</refsection>
</refentry>

<refentry version="5.0" id="admon.graphics.path">
<refmeta>
<refentrytitle>admon.graphics.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.path</refname>
<refpurpose>Path to admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.path.frag">&lt;xsl:param name="admon.graphics.path"&gt;images/&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the path to the directory containing the admonition graphics
(caution.png, important.png etc). This location is normally relative
to the output html directory. See <parameter>base.dir</parameter></para>

</refsection>
</refentry>

<refentry version="5.0" id="admon.graphics">
<refmeta>
<refentrytitle>admon.graphics</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics</refname>
<refpurpose>Use graphics in admonitions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.frag">
&lt;xsl:param name="admon.graphics" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="admon.textlabel">
<refmeta>
<refentrytitle>admon.textlabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.textlabel</refname>
<refpurpose>Use text label in admonitions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.textlabel.frag">
&lt;xsl:param name="admon.textlabel" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), admonitions are presented with a generated
text label such as Note or Warning in the appropriate language.
If zero, such labels are turned off, but any title child
of the admonition element are still output.
The default value is 1.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="admon.style">
<refmeta>
<refentrytitle>admon.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.style</refname>
<refpurpose>Specifies the CSS style attribute that should be added to
admonitions.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.style.frag">&lt;xsl:param name="admon.style"&gt;
  &lt;xsl:value-of select="concat('margin-', $direction.align.start,            ': 0.5in; margin-', $direction.align.end, ': 0.5in;')"&gt;&lt;/xsl:value-of&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the value of the CSS <tag class="attribute">style</tag>
attribute that should be added to admonitions.
</para>

</refsection>
</refentry>

</reference><reference id="callouts" xml:base="../html/param.xml"><title>Callouts</title>
<refentry version="5.0" id="callout.defaultcolumn">
<refmeta>
<refentrytitle>callout.defaultcolumn</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.defaultcolumn</refname>
<refpurpose>Indicates what column callouts appear in by default</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.defaultcolumn.frag">
&lt;xsl:param name="callout.defaultcolumn"&gt;60&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If a callout does not identify a column (for example, if it uses
the <literal>linerange</literal> <tag class="attribute">unit</tag>),
it will appear in the default column.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.extension">
<refmeta>
<refentrytitle>callout.graphics.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.extension</refname>
<refpurpose>Filename extension for callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.extension.frag">
&lt;xsl:param name="callout.graphics.extension"&gt;.png&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Sets the filename extension to use on callout graphics. </para>

<itemizedlist>
<para>The Docbook XSL distribution provides callout graphics in the following formats:</para>
<listitem><para>SVG (extension: <filename class="extension">.svg</filename>)</para></listitem>
<listitem><para>PNG (extension: <filename class="extension">.png</filename>)</para></listitem>
<listitem><para>GIF (extension: <filename class="extension">.gif</filename>)</para></listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.number.limit">
<refmeta>
<refentrytitle>callout.graphics.number.limit</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.number.limit.frag">
&lt;xsl:param name="callout.graphics.number.limit"&gt;15&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.graphics</parameter> is non-zero, graphics
are used to represent callout numbers instead of plain text. The value
of <parameter>callout.graphics.number.limit</parameter> is the largest
number for which a graphic exists. If the callout number exceeds this
limit, the default presentation "(plain text instead of a graphic)"
will  be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.path">
<refmeta>
<refentrytitle>callout.graphics.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.path</refname>
<refpurpose>Path to callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.path.frag">
&lt;xsl:param name="callout.graphics.path"&gt;images/callouts/&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the path to the directory holding the callout graphics. his
location is normally relative to the output html directory. see
base.dir. Always terminate the directory with / since the graphic file
is appended to this string, hence needs the separator.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics">
<refmeta>
<refentrytitle>callout.graphics</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics</refname>
<refpurpose>Use graphics for callouts?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.frag">
&lt;xsl:param name="callout.graphics" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, callouts are presented with graphics (e.g., reverse-video
circled numbers instead of "(1)", "(2)", etc.).
Default graphics are provided in the distribution.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.list.table">
<refmeta>
<refentrytitle>callout.list.table</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.list.table</refname>
<refpurpose>Present callout lists using a table?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.list.table.frag">
&lt;xsl:param name="callout.list.table" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The default presentation of <tag>calloutlist</tag>s uses
an HTML <tag>DL</tag> element. Some browsers don't align DLs very well
if <parameter>callout.graphics</parameter> is used. With this option
turned on, <tag>calloutlist</tag>s are presented in an HTML
<tag>TABLE</tag>, which usually results in better alignment
of the callout number with the callout description.</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode.number.limit">
<refmeta>
<refentrytitle>callout.unicode.number.limit</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.number.limit</refname>
<refpurpose>Number of the largest unicode callout character</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.number.limit.frag">
&lt;xsl:param name="callout.unicode.number.limit"&gt;10&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter>callout.unicode.number.limit</parameter>
is
the largest number for which a unicode character exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode.start.character">
<refmeta>
<refentrytitle>callout.unicode.start.character</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.start.character</refname>
<refpurpose>First Unicode character to use, decimal value.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.start.character.frag">
&lt;xsl:param name="callout.unicode.start.character"&gt;10102&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.graphics</parameter> is zero and <parameter>callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter>callout.unicode.start.character</parameter>
is the decimal unicode value used for callout number one. Currently, 
only values 9312 and 10102 are supported in the stylesheets for this parameter. 
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode">
<refmeta>
<refentrytitle>callout.unicode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode</refname>
<refpurpose>Use Unicode characters rather than images for callouts.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.frag">&lt;xsl:param name="callout.unicode" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callouts.extension">
<refmeta>
<refentrytitle>callouts.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callouts.extension</refname>
<refpurpose>Enable the callout extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callouts.extension.frag">
&lt;xsl:param name="callouts.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The callouts extension processes <tag>areaset</tag>
elements in <tag>programlistingco</tag> and other text-based
callout elements.
</para>

</refsection>
</refentry>

</reference><reference id="ebnf" xml:base="../html/param.xml"><title>EBNF</title>
<refentry version="5.0" id="ebnf.table.bgcolor">
<refmeta>
<refentrytitle>ebnf.table.bgcolor</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.table.bgcolor</refname>
<refpurpose>Background color for EBNF tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.table.bgcolor.frag">
&lt;xsl:param name="ebnf.table.bgcolor"&gt;#F5DCB3&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the background color for EBNF tables (a pale brown). No
<tag>bgcolor</tag> attribute is output if
<parameter>ebnf.table.bgcolor</parameter> is set to the null string. </para>


</refsection>
</refentry>

<refentry version="5.0" id="ebnf.table.border">
<refmeta>
<refentrytitle>ebnf.table.border</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.table.border</refname>
<refpurpose>Selects border on EBNF tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.table.border.frag">&lt;xsl:param name="ebnf.table.border" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the border on EBNF tables. If non-zero, the tables have
borders, otherwise they don't.</para>

</refsection>
</refentry>

<refentry version="5.0" id="ebnf.assignment">
<refmeta>
<refentrytitle>ebnf.assignment</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">rtf</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.assignment</refname>
<refpurpose>The EBNF production assignment operator</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.assignment.frag">
&lt;xsl:param name="ebnf.assignment"&gt;
&lt;code&gt;::=&lt;/code&gt;
&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>ebnf.assignment</parameter> parameter determines what
text is used to show <quote>assignment</quote> in <tag>production</tag>s
in <tag>productionset</tag>s.</para>

<para>While <quote><literal>::=</literal></quote> is common, so are several
other operators.</para>

</refsection>
</refentry>

<refentry version="5.0" id="ebnf.statement.terminator">
<refmeta>
<refentrytitle>ebnf.statement.terminator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">rtf</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.statement.terminator</refname>
<refpurpose>Punctuation that ends an EBNF statement.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.statement.terminator.frag">
&lt;xsl:param name="ebnf.statement.terminator"&gt;&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>ebnf.statement.terminator</parameter> parameter determines what
text is used to terminate each <tag>production</tag>
in <tag>productionset</tag>.</para>

<para>Some notations end each statement with a period.</para>

</refsection>
</refentry>

</reference><reference id="toc_index" xml:base="../html/param.xml"><title>ToC/LoT/Index Generation</title>
<refentry version="5.0" id="annotate.toc">
<refmeta>
<refentrytitle>annotate.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotate.toc</refname>
<refpurpose>Annotate the Table of Contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotate.toc.frag">&lt;xsl:param name="annotate.toc" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true, TOCs will be annotated. At present, this just means
that the <tag>refpurpose</tag> of <tag>refentry</tag>
TOC entries will be displayed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="autotoc.label.separator">
<refmeta>
<refentrytitle>autotoc.label.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>autotoc.label.separator</refname>
<refpurpose>Separator between labels and titles in the ToC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="autotoc.label.separator.frag">
&lt;xsl:param name="autotoc.label.separator"&gt;. &lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>String used to separate labels and titles in a table of contents.</para>

</refsection>
</refentry>

<refentry version="5.0" id="autotoc.label.in.hyperlink">
<refmeta>
<refentrytitle>autotoc.label.in.hyperlink</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>autotoc.label.in.hyperlink</refname>
<refpurpose>Include label in hyperlinked titles in TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="autotoc.label.in.hyperlink.frag">&lt;xsl:param name="autotoc.label.in.hyperlink" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>autotoc.label.in.hyperlink</parameter> is non-zero, labels
are included in hyperlinked titles in the TOC. If it is instead zero,
labels are still displayed prior to the hyperlinked titles, but
are not hyperlinked along with the titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="process.source.toc">
<refmeta>
<refentrytitle>process.source.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.source.toc</refname>
<refpurpose>Process a non-empty <tag>toc</tag> element if it occurs in a source document?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="process.source.toc.frag">&lt;xsl:param name="process.source.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies that the contents of a non-empty "hard-coded"
<tag>toc</tag> element in a source document are processed to
generate a TOC in output.
<note>
  <para>This parameter has no effect on automated generation of
  TOCs. An automated TOC may still be generated along with the
  "hard-coded" TOC. To suppress automated TOC generation, adjust the
  value of the <parameter>generate.toc</parameter> paramameter.</para>

  <para>The <tag>process.source.toc</tag> parameter also has
  no effect if the <tag>toc</tag> element is empty; handling
  for empty <tag>toc</tag> is controlled by the
  <parameter>process.empty.source.toc</parameter> parameter.</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="process.empty.source.toc">
<refmeta>
<refentrytitle>process.empty.source.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.empty.source.toc</refname>
<refpurpose>Generate automated TOC if <tag>toc</tag> element occurs in a source document?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="process.empty.source.toc.frag">&lt;xsl:param name="process.empty.source.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies that if an empty <tag>toc</tag> element is found in a
source document, an automated TOC is generated at this point in the
document.
<note>
  <para>Depending on what the value of the
  <parameter>generate.toc</parameter> parameter is, setting this
  parameter to <literal>1</literal> could result in generation of
  duplicate automated TOCs. So the
  <parameter>process.empty.source.toc</parameter> is primarily useful
  as an "override": by placing an empty <tag>toc</tag> in your
  document and setting this parameter to <literal>1</literal>, you can
  force a TOC to be generated even if <tag>generate.toc</tag>
  says not to.</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="bridgehead.in.toc">
<refmeta>
<refentrytitle>bridgehead.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bridgehead.in.toc</refname>
<refpurpose>Should bridgehead elements appear in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bridgehead.in.toc.frag">&lt;xsl:param name="bridgehead.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>bridgehead</tag>s appear in the TOC. Note that
this option is not fully supported and may be removed in a future
version of the stylesheets.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="simplesect.in.toc">
<refmeta>
<refentrytitle>simplesect.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>simplesect.in.toc</refname>
<refpurpose>Should <tag>simplesect</tag> elements appear in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="simplesect.in.toc.frag">&lt;xsl:param name="simplesect.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>simplesect</tag>s will be included in the TOC.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="manual.toc">
<refmeta>
<refentrytitle>manual.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>manual.toc</refname>
<refpurpose>An explicit TOC to be used for the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="manual.toc.frag">
&lt;xsl:param name="manual.toc"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>manual.toc</parameter> identifies an explicit TOC that
will be used for building the printed TOC.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.list.type">
<refmeta>
<refentrytitle>toc.list.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dl</refmiscinfo>
<refmiscinfo class="other" otherclass="value">ul</refmiscinfo>
<refmiscinfo class="other" otherclass="value">ol</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.list.type</refname>
<refpurpose>Type of HTML list element to use for Tables of Contents</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.list.type.frag">&lt;xsl:param name="toc.list.type"&gt;dl&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When an automatically generated Table of Contents (or List of Titles)
is produced, this HTML element will be used to make the list.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.section.depth">
<refmeta>
<refentrytitle>toc.section.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.section.depth</refname>
<refpurpose>How deep should recursive <tag>section</tag>s appear
in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.section.depth.frag">&lt;xsl:param name="toc.section.depth"&gt;2&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the depth to which recursive sections should appear in the
TOC.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.max.depth">
<refmeta>
<refentrytitle>toc.max.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.max.depth</refname>
<refpurpose>How many levels should be created for each TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.max.depth.frag">&lt;xsl:param name="toc.max.depth"&gt;8&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the maximal depth of TOC on all levels.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.toc">
<refmeta>
<refentrytitle>generate.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.toc</refname>
<refpurpose>Control generation of ToCs and LoTs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.toc.frag">
&lt;xsl:param name="generate.toc"&gt;
appendix  toc,title
article/appendix  nop
article   toc,title
book      toc,title,figure,table,example,equation
chapter   toc,title
part      toc,title
preface   toc,title
qandadiv  toc
qandaset  toc
reference toc,title
sect1     toc
sect2     toc
sect3     toc
sect4     toc
sect5     toc
section   toc
set       toc,title
&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter has a structured value. It is a table of space-delimited
path/value pairs. Each path identifies some element in the source document
using a restricted subset of XPath (only the implicit child axis, no wildcards,
no predicates). Paths can be either relative or absolute.</para>

<para>When processing a particular element, the stylesheets consult this table to
determine if a ToC (or LoT(s)) should be generated.</para>

<para>For example, consider the entry:</para>

<screen>book toc,figure</screen>

<para>This indicates that whenever a <tag>book</tag> is formatted, a
Table Of Contents and a List of Figures should be generated. Similarly,</para>

<screen>/chapter toc</screen>

<para>indicates that whenever a document <emphasis>that has a root
of</emphasis> <tag>chapter</tag> is formatted, a Table of
Contents should be generated. The entry <literal>chapter</literal> would match
all chapters, but <literal>/chapter</literal> matches only <tag>chapter</tag>
document elements.</para>

<para>Generally, the longest match wins. So, for example, if you want to distinguish
articles in books from articles in parts, you could use these two entries:</para>

<screen>book/article toc,figure
part/article toc</screen>

<para>Note that an article in a part can never match a <literal>book/article</literal>,
so if you want nothing to be generated for articles in parts, you can simply leave
that rule out.</para>

<para>If you want to leave the rule in, to make it explicit that you're turning
something off, use the value <quote>nop</quote>. For example, the following
entry disables ToCs and LoTs for articles:</para>

<screen>article nop</screen>

<para>Do not simply leave the word <quote>article</quote> in the file
without a matching value. That'd be just begging the silly little
path/value parser to get confused.</para>

<para>Section ToCs are further controlled by the
<parameter>generate.section.toc.level</parameter> parameter.
For a given section level to have a ToC, it must have both an entry in 
<parameter>generate.toc</parameter> and be within the range enabled by
<parameter>generate.section.toc.level</parameter>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="generate.section.toc.level">
<refmeta>
<refentrytitle>generate.section.toc.level</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.section.toc.level</refname>
<refpurpose>Control depth of TOC generation in sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.section.toc.level.frag">
&lt;xsl:param name="generate.section.toc.level" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>generate.section.toc.level</parameter> parameter
controls the depth of <tag>section</tag> in which TOCs will be generated. Note
that this is related to, but not the same as
<parameter>toc.section.depth</parameter>, which controls the depth to
which TOC entries will be generated in a given TOC.</para>
<para>If, for example, <parameter>generate.section.toc.level</parameter>
is <literal>3</literal>, TOCs will be generated in first, second, and third
level sections, but not in fourth level sections.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.index">
<refmeta>
<refentrytitle>generate.index</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.index</refname>
<refpurpose>Do you want an index?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.index.frag">&lt;xsl:param name="generate.index" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specify if an index should be generated. </para>

</refsection>
</refentry>

<refentry version="5.0" id="index.method">
<refmeta>
<refentrytitle>index.method</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">basic</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kosek</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kimber</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.method</refname>
<refpurpose>Select method used to group index entries in an index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.method.frag">
&lt;xsl:param name="index.method"&gt;basic&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter lets you select which method to use for sorting and grouping
 index entries in an index.
Indexes in Latin-based languages that have accented characters typically
sort together accented words and unaccented words.
Thus <quote>&#193;</quote> (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) would sort together
with <quote>A</quote> (U+0041 LATIN CAPITAL LETTER A), so both would appear in the <quote>A</quote>
section of the index.
Languages using other alphabets (such as Russian,  which is written in the Cyrillic alphabet)
and languages using ideographic chararacters (such as Japanese)
require grouping specific to the languages and alphabets.
</para>

<para>The default indexing method is limited.
It can group accented characters in Latin-based languages only.
It cannot handle non-Latin alphabets or ideographic languages.
The other indexing methods require extensions of one type or
another, and do not work with
all XSLT processors, which is why they are not used by default.</para>

<para>The three choices for indexing method are:</para>
<variablelist>
<varlistentry>
<term><literal>basic</literal></term>
<listitem>
<para>
(default)  Sort and groups words based only on the Latin alphabet.
Words with accented Latin letters will group and sort with
their respective primary letter, but
words in non-Latin alphabets will be
put in the <quote>Symbols</quote> section of the index.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>kosek</literal></term>
<listitem>
<para>
This method sorts and groups words based on letter groups configured in
the DocBook locale file for the given language.
See, for example, the French locale file <filename>common/fr.xml</filename>.
This method requires that the XSLT processor
supports the EXSLT extensions (most do).
It also requires support for using 
user-defined functions in xsl:key (xsltproc does not).
</para>
<para>This method is suitable for any language for which you can
list all the individual characters that should appear
in each letter group in an index.
It is probably not practical to use it for ideographic languages
such as Chinese that have hundreds or thousands of characters.
</para>

<para>To use the kosek method, you must:</para>

<orderedlist>
<listitem>
<para>Use a processor that supports its extensions, such as
Saxon 6 or Xalan (xsltproc and Saxon 8 do not).
</para>
</listitem>
<listitem>
<para>Set the index.method parameter's value to <quote>kosek</quote>.
</para>
</listitem>
<listitem>
<para>Import the appropriate index extensions stylesheet module
<filename>fo/autoidx-kosek.xsl</filename> or 
<filename>html/autoidx-kosek.xsl</filename> into your
customization.
</para>
</listitem>
</orderedlist>

</listitem>
</varlistentry>
<varlistentry>
<term><literal>kimber</literal></term>
<listitem>
<para>
This method uses extensions to the Saxon processor to implement
sophisticated indexing processes. It uses its own 
configuration file, which can include information for any number of
languages. Each language's configuration can group
words using one of two processes. In the
enumerated process similar to that used in the kosek method,
you indicate the groupings character-by-character.
In the between-key process, you specify the
break-points in the sort order that should start a new group.
The latter configuration is useful for ideographic languages
such as Chinese, Japanese, and Korean.
You can also define your own collation algorithms and how you
want mixed Latin-alphabet words sorted.</para>
<itemizedlist>
<listitem>
<para>For a whitepaper describing the extensions, see:
<link xlink:href="http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf">http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf</link>.
</para>
</listitem>
<listitem>
<para>To download the extension library, see
<link xlink:href="http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport">http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport</link>.
</para>
</listitem>
</itemizedlist>

<para>To use the kimber method, you must:</para>

<orderedlist>
<listitem>
<para>Use Saxon (version 6 or 8) as your XSLT processor.
</para>
</listitem>
<listitem>
<para>Install and configure the Innodata Isogen library, using
the documentation that comes with it.
</para>
</listitem>
<listitem>
<para>Set the index.method parameter's value to <quote>kimber</quote>.
</para>
</listitem>
<listitem>
<para>Import the appropriate index extensions stylesheet module
<filename>fo/autoidx-kimber.xsl</filename> or 
<filename>html/autoidx-kimber.xsl</filename> into your
customization.
</para>
</listitem>
</orderedlist>

</listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="index.on.type">
<refmeta>
<refentrytitle>index.on.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.on.type</refname>
<refpurpose>Select indexterms based on <tag class="attribute">type</tag>
attribute value</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.on.type.frag">
&lt;xsl:param name="index.on.type" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, 
then an <tag>index</tag> element that has a
<tag class="attribute">type</tag> attribute
value will contain only those <tag>indexterm</tag>
elements with a matching <tag class="attribute">type</tag> attribute value.
If an <tag>index</tag> has no <tag class="attribute">type</tag>
attribute or it is blank, then the index will contain
all <tag>indexterm</tag>s in the current scope.
</para>

<para>
If <literal>index.on.type</literal> is zero, then the
<tag class="attribute">type</tag> attribute has no effect
on selecting indexterms for an index.
</para>

<para>For those using DocBook version 4.2 or earlier,
the <tag class="attribute">type</tag> attribute is not available
for index terms.  However, you can achieve the same
effect by using the <tag class="attribute">role</tag> attribute
in the same manner on <tag>indexterm</tag>
and <tag>index</tag>, and setting the stylesheet parameter 
<parameter>index.on.role</parameter> to a nonzero value.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.on.role">
<refmeta>
<refentrytitle>index.on.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.on.role</refname>
<refpurpose>Select indexterms based on <tag class="attribute">role</tag> value</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.on.role.frag">
&lt;xsl:param name="index.on.role" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, 
then an <tag>index</tag> element that has a
<tag class="attribute">role</tag> attribute
value will contain only those <tag>indexterm</tag>
elements with a matching role value.
If an <tag>index</tag> has no <tag class="attribute">role</tag>
attribute or it is blank, then the index will contain
all <tag>indexterm</tag>s in the current scope.
</para>
<para>
If <literal>index.on.role</literal> is zero, then the
<tag class="attribute">role</tag> attribute has no effect
on selecting indexterms for an index.
</para>

<para>If you are using DocBook version 4.3 or later, you should
use the <tag class="attribute">type</tag> attribute instead of <tag class="attribute">role</tag>
on <tag>indexterm</tag> and <tag>index</tag>,
and set the <parameter>index.on.type</parameter> to a nonzero
value.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.links.to.section">
<refmeta>
<refentrytitle>index.links.to.section</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.links.to.section</refname>
<refpurpose>HTML index entries link to container section title</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.links.to.section.frag">
&lt;xsl:param name="index.links.to.section" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero, then an index entry in an index links
directly to the location of the
generated <tag>anchor</tag> that is output
for the indexterm. If two identical indexterm elements
exist in the same section, then both entries appear
in the index with the same title but link to different
locations.</para>

<para>If non-zero, then an index entry in an index links to the
section title containing the <tag>indexterm</tag>, rather than
directly to the <tag>anchor</tag> output for the indexterm.
Duplicate indexterm entries in the same section are dropped.
</para>

<para>The default value is 1, so index entries link to
section titles by default.</para>

<para>In both cases, the link text in an index entry is the
title of the section containing the indexterm.
That is because HTML does not have numbered pages.
It also provides the reader with context information
for each link.</para>

<para>This parameter lets you choose which style of
index linking you want. </para>

<itemizedlist>
<listitem>
<para>When set to 0, an index entry takes you 
to the precise location of its corresponding indexterm.
However, if you have a lot of duplicate
entries in sections, then you have a lot of duplicate
titles in the index, which makes it more cluttered.
The reader may not recognize why duplicate titles
appear until they follow the links. Also, the links
may land the reader in the middle of a section where the
section title is not visible, which may also be
confusing to the reader.</para>
</listitem>
<listitem>
<para>When set to 1, an index entry link is
less precise, but duplicate titles in the
index entries are eliminated. 
Landing on the section title location may confirm the reader's
expectation that a link that
shows a section title will take them to that section title,
not a location within the section.
</para>
</listitem>
</itemizedlist>

</refsection>
</refentry>

<refentry version="5.0" id="index.prefer.titleabbrev">
<refmeta>
<refentrytitle>index.prefer.titleabbrev</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.prefer.titleabbrev</refname>
<refpurpose>Should abbreviated titles be used as back references?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.prefer.titleabbrev.frag">
&lt;xsl:param name="index.prefer.titleabbrev" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, and if a <tag>titleabbrev</tag> is defined, the abbreviated title
is used as the link text of a back reference in the index.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.term.separator">
<refmeta>
<refentrytitle>index.term.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.term.separator</refname>
<refpurpose>Override for punctuation separating an index term 
from its list of page references in an index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.term.separator.frag">
&lt;xsl:param name="index.term.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you to override
the text to insert between
the end of an index term and its list of page references.
Typically that might be a comma and a space.
</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'term-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
fill in the content for this normally empty 
override parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
For fo output, it could be an <tag>fo:leader</tag>
element to provide space of a specific length, or a dot leader.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.number.separator">
<refmeta>
<refentrytitle>index.number.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.number.separator</refname>
<refpurpose>Override for punctuation separating page numbers in index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.number.separator.frag">
&lt;xsl:param name="index.number.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you to override the text to insert between
page references in a formatted index entry.  Typically 
that would be a comma and a space.
</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'number-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
override the gentext with the content of this parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
</para>

<para>In HTML index output, section title references are used instead of
page number references.  This punctuation appears between
such section titles in an HTML index.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.range.separator">
<refmeta>
<refentrytitle>index.range.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.range.separator</refname>
<refpurpose>Override for punctuation separating the two numbers
in a page range in index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.range.separator.frag">
&lt;xsl:param name="index.range.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you
to override the text to insert between
the two numbers of a page range in an index.
This parameter is only used by those XSL-FO processors
that support an extension for generating such page ranges
(such as XEP).</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'range-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
override the gentext with the content of this parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
</para>

<para>In HTML index output, section title references are used instead of
page number references. So there are no page ranges
and this parameter has no effect.
</para>

</refsection>
</refentry>

</reference><reference id="dbk_ext" xml:base="../html/param.xml"><title>Stylesheet Extensions</title>
<refentry version="5.0" id="linenumbering.everyNth">
<refmeta>
<refentrytitle>linenumbering.everyNth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.everyNth</refname>
<refpurpose>Indicate which lines should be numbered</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.everyNth.frag">
&lt;xsl:param name="linenumbering.everyNth"&gt;5&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If line numbering is enabled, everyNth line will be
numbered. Note that numbering is one based, not zero based.
</para>
<para>See also <parameter>linenumbering.extension</parameter>,
<parameter>linenumbering.separator</parameter>,
<parameter>linenumbering.width</parameter> and
<parameter>use.extensions</parameter></para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.extension">
<refmeta>
<refentrytitle>linenumbering.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.extension</refname>
<refpurpose>Enable the line numbering extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.extension.frag">
&lt;xsl:param name="linenumbering.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, verbatim environments (<tag>address</tag>, <tag>literallayout</tag>,
<tag>programlisting</tag>, <tag>screen</tag>, <tag>synopsis</tag>) that specify line numbering will
have line numbers.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.separator">
<refmeta>
<refentrytitle>linenumbering.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.separator</refname>
<refpurpose>Specify a separator between line numbers and lines</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.separator.frag">
&lt;xsl:param name="linenumbering.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The separator is inserted between line numbers and lines in the
verbatim environment. The default value is a single white space.
 Note the interaction with <parameter>linenumbering.width</parameter>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.width">
<refmeta>
<refentrytitle>linenumbering.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.width</refname>
<refpurpose>Indicates the width of line numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.width.frag">
&lt;xsl:param name="linenumbering.width"&gt;3&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If line numbering is enabled, line numbers will appear right
justified in a field "width" characters wide.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="tablecolumns.extension">
<refmeta>
<refentrytitle>tablecolumns.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tablecolumns.extension</refname>
<refpurpose>Enable the table columns extension function</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="tablecolumns.extension.frag">
&lt;xsl:param name="tablecolumns.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The table columns extension function adjusts the widths of table
columns in the HTML result to more accurately reflect the specifications
in the CALS table.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="textinsert.extension">
  <refmeta>
    <refentrytitle>textinsert.extension</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>textinsert.extension</refname>
    <refpurpose>Enables the textinsert extension element</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <programlisting id="textinsert.extension.frag">
  &lt;xsl:param name="textinsert.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
  </refsynopsisdiv>
  <refsection><info><title>Description</title></info>
    <para>The textinsert extension element inserts the contents of
      a file into the result tree (as text).</para>
    <note>
      <para>To use the textinsert extension element, you must use
        either Saxon or Xalan as your XSLT processor (it doesn&#8217;t
        work with xsltproc), along with either the DocBook Saxon
        extensions or DocBook Xalan extensions (for more
        information about those extensions, see <link role="tcg" xlink:href="InstallingAProcessor.html#SaxonExtensions">DocBook Saxon Extensions</link> and <link role="tcg" xlink:href="InstallingAProcessor.html#XalanExtensions">DocBook Xalan Extensions</link>), and you must set both
        the <parameter>use.extensions</parameter> and
        <parameter>textinsert.extension</parameter> parameters to
        <literal>1</literal>.</para>
      <para>As an alternative to using the textinsert element,
        consider using an Xinclude element with the
        <literal>parse="text"</literal> attribute and value
        specified, as detailed in <link role="tcg" xlink:href="ExternalCode.html#XIncludeCode">Using XInclude for text inclusions</link>.</para>
    </note>
  </refsection>
  <refsection><info><title>See Also</title></info>
    <para>You can also use the <tag class="xmlpi">dbhtml-include&#160;href</tag> processing
      instruction to insert external files &#8212; both files containing
      plain text and files with markup content (including HTML
      content).</para>
  </refsection>
  <refsection><info><title>More information</title></info>
    <para>For how-to documentation on inserting contents of
      external code files and other text files into output, see
      <link role="tcg" xlink:href="ExternalCode.html">External code files</link>.</para>
    <para>For guidelines on inserting contents of
      HTML files into output, see <link role="tcg" xlink:href="InsertExtHtml.html">Inserting external HTML code</link>.</para>
  </refsection>
</refentry>

<refentry version="5.0" id="textdata.default.encoding">
<refmeta>
<refentrytitle>textdata.default.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>textdata.default.encoding</refname>
<refpurpose>Default encoding of external text files which are included
using textdata element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="textdata.default.encoding.frag">
&lt;xsl:param name="textdata.default.encoding"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the encoding of any external text files included using
<tag>textdata</tag> element. This value is used only when you do
not specify encoding by the appropriate attribute 
directly on textdata. An empty string is interpreted as the system
default encoding.</para>

</refsection>
</refentry>

<refentry version="5.0" id="graphicsize.extension">
<refmeta>
<refentrytitle>graphicsize.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphicsize.extension</refname>
<refpurpose>Enable the getWidth()/getDepth() extension functions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="graphicsize.extension.frag">
&lt;xsl:param name="graphicsize.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero (and if <parameter>use.extensions</parameter> is non-zero
and if you're using a processor that supports extension functions), the
<function>getWidth</function> and <function>getDepth</function> functions
will be used to extract image sizes from graphics.</para>

<para>The main supported image formats are GIF, JPEG, and PNG. Somewhat cruder 
support for EPS and PDF images is also available.</para>
</refsection>
</refentry>

<refentry version="5.0" id="graphicsize.use.img.src.path">
<refmeta>
<refentrytitle>graphicsize.use.img.src.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphicsize.use.img.src.path</refname>
<refpurpose>Prepend <parameter>img.src.path</parameter> before
filenames passed to extension functions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="graphicsize.use.img.src.path.frag">
&lt;xsl:param name="graphicsize.use.img.src.path" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero <parameter>img.src.path</parameter> parameter will
be appended before filenames passed to extension functions for
measuring image dimensions.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.extensions">
<refmeta>
<refentrytitle>use.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.extensions</refname>
<refpurpose>Enable extensions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.extensions.frag">
&lt;xsl:param name="use.extensions" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, extensions may be used. Each extension is
further controlled by its own parameter. But if
<parameter>use.extensions</parameter> is zero, no extensions will
be used.
</para>

</refsection>
</refentry>

</reference><reference id="labels" xml:base="../html/param.xml"><title>Automatic labelling</title>
<refentry version="5.0" id="chapter.autolabel">
<refmeta>
<refentrytitle>chapter.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>chapter.autolabel</refname>
<refpurpose>Specifies the labeling format for Chapter titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chapter.autolabel.frag">
&lt;xsl:param name="chapter.autolabel" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then chapters will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (arabic).
</para>

</refsection>
</refentry>

<refentry version="5.0" id="appendix.autolabel">
<refmeta>
<refentrytitle>appendix.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>appendix.autolabel</refname>
<refpurpose>Specifies the labeling format for Appendix titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="appendix.autolabel.frag">
&lt;xsl:param name="appendix.autolabel"&gt;A&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then appendices will be numbered using the
parameter value as the number format if the value matches one of the
following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (upperalpha).
</para>

</refsection>
</refentry>

<refentry version="5.0" id="part.autolabel">
<refmeta>
<refentrytitle>part.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>part.autolabel</refname>
<refpurpose>Specifies the labeling format for Part titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="part.autolabel.frag">
&lt;xsl:param name="part.autolabel"&gt;I&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then parts will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (upperroman).
</para>


</refsection>
</refentry>

<refentry version="5.0" id="reference.autolabel">
<refmeta>
<refentrytitle>reference.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>reference.autolabel</refname>
<refpurpose>Specifies the labeling format for Reference titles</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="reference.autolabel.frag">
  &lt;xsl:param name="reference.autolabel"&gt;I&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, references will be numbered using the parameter
  value as the number format if the value matches one of the
  following:
</para>
<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>
<para>Any non-zero value other than the above will generate
the default number format (upperroman).
</para>
</refsection>
</refentry>

<refentry version="5.0" id="preface.autolabel">
<refmeta>
<refentrytitle>preface.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>preface.autolabel</refname>
<refpurpose>Specifices the labeling format for Preface titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="preface.autolabel.frag">&lt;xsl:param name="preface.autolabel" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero then prefaces will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (arabic).
</para>


</refsection>
</refentry>

<refentry version="5.0" id="qandadiv.autolabel">
<refmeta>
<refentrytitle>qandadiv.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qandadiv.autolabel</refname>
<refpurpose>Are divisions in QAndASets enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qandadiv.autolabel.frag">&lt;xsl:param name="qandadiv.autolabel" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, unlabeled qandadivs will be enumerated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.autolabel">
<refmeta>
<refentrytitle>section.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.autolabel</refname>
<refpurpose>Are sections enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.autolabel.frag">&lt;xsl:param name="section.autolabel" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), unlabeled sections will be enumerated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.autolabel.max.depth">
<refmeta>
<refentrytitle>section.autolabel.max.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.autolabel.max.depth</refname>
<refpurpose>The deepest level of sections that are numbered.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.autolabel.max.depth.frag">
&lt;xsl:param name="section.autolabel.max.depth"&gt;8&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When section numbering is turned on by the
<parameter>section.autolabel</parameter> parameter, then this
parameter controls the depth of <tag>section</tag> nesting that is
numbered.  Sections nested to a level deeper than this value will not
be numbered.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.label.includes.component.label">
<refmeta>
<refentrytitle>section.label.includes.component.label</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.label.includes.component.label</refname>
<refpurpose>Do section labels include the component label?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.label.includes.component.label.frag">&lt;xsl:param name="section.label.includes.component.label" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, section labels are prefixed with the label of the
component that contains them.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="label.from.part">
<refmeta>
<refentrytitle>label.from.part</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>label.from.part</refname>
<refpurpose>Renumber components in each part?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="label.from.part.frag">
&lt;xsl:param name="label.from.part" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>label.from.part</parameter> is non-zero, then
  numbering of components &#8212; <tag>preface</tag>,
  <tag>chapter</tag>, <tag>appendix</tag>, and
  <tag>reference</tag> (when <tag>reference</tag> occurs at the
  component level) &#8212; is re-started within each
  <tag>part</tag>.</para>
<para>If <parameter>label.from.part</parameter> is zero (the
  default), numbering of components is <emphasis>not</emphasis>
  re-started within each <tag>part</tag>; instead, components are
  numbered sequentially throughout each <tag>book</tag>,
  regardless of whether or not they occur within <tag>part</tag>
  instances.</para>

</refsection>
</refentry>

<refentry version="5.0" id="component.label.includes.part.label">
<refmeta>
<refentrytitle>component.label.includes.part.label</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>component.label.includes.part.label</refname>
<refpurpose>Do component labels include the part label?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="component.label.includes.part.label.frag">&lt;xsl:param name="component.label.includes.part.label" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, number labels for <tag>chapter</tag>,
<tag>appendix</tag>, and other component elements are prefixed with
the label of the part element that contains them.  So you might see
Chapter II.3 instead of Chapter 3.  Also, the labels for formal
elements such as <tag>table</tag> and <tag>figure</tag> will include
the part label.  If there is no part element container, then no prefix
is generated.
</para>
<para>
This feature is most useful when the
<parameter>label.from.part</parameter> parameter is turned on.
In that case, there would be more than one <tag>chapter</tag>
<quote>1</quote>, and the extra part label prefix will identify
each chapter unambiguously.
</para>

</refsection>
</refentry>

</reference><reference id="html" xml:base="../html/param.xml"><title>HTML</title>
<refentry version="5.0" id="html.base">
<refmeta>
<refentrytitle>html.base</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.base</refname>
<refpurpose>An HTML base URI</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.base.frag">
&lt;xsl:param name="html.base"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If html.base is set, it is used for the <tag>base</tag> element
in the <tag>head</tag> of the html documents.  The parameter specifies
the base URL for all relative URLs in the document.  This is useful
for dynamically served html where the base URI needs to be
shifted.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.stylesheet">
<refmeta>
<refentrytitle>html.stylesheet</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.stylesheet</refname>
<refpurpose>Name of the stylesheet(s) to use in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.stylesheet.frag">
&lt;xsl:param name="html.stylesheet"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>html.stylesheet</parameter> parameter is either
empty, indicating that no stylesheet <tag>link</tag> tag should be
generated in the html output, or it is a list of one or more
stylesheet files.</para>

<para>Multiple stylesheets are space-delimited. If you need to
reference a stylesheet URI that includes a space, encode it with
<literal>%20</literal>. A separate html <literal>link</literal> element will
be generated for each stylesheet in the order they are listed in the
parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.stylesheet.type">
<refmeta>
<refentrytitle>html.stylesheet.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.stylesheet.type</refname>
<refpurpose>The type of the stylesheet used in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.stylesheet.type.frag">&lt;xsl:param name="html.stylesheet.type"&gt;text/css&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The type of the stylesheet to place in the HTML <tag>link</tag> tag.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="css.decoration">
<refmeta>
<refentrytitle>css.decoration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>css.decoration</refname>
<refpurpose>Enable CSS decoration of elements</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="css.decoration.frag">
&lt;xsl:param name="css.decoration" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, then html elements produced by the stylesheet may be
decorated with <literal>style</literal> attributes.  For example, the
<literal>li</literal> tags produced for list items may include a
fragment of CSS in the <literal>style</literal> attribute which sets
the CSS property "list-style-type".
</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.script">
<refmeta>
<refentrytitle>html.script</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.script</refname>
<refpurpose>Name of the script(s) to use in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.script.frag">
&lt;xsl:param name="html.script"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>html.script</parameter> parameter is either
empty (default), indicating that no <tag>script</tag> element should be
generated in the html output, or it is a list of one or more
script locations.</para>

<para>Multiple script locations are space-delimited. If you need to
reference a script URI that includes a space, encode it with
<literal>%20</literal>. A separate html <literal>script</literal> element will
be generated for each script in the order they are listed in the
parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.script.type">
<refmeta>
<refentrytitle>html.script.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.script.type</refname>
<refpurpose>The type of script used in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.script.type.frag">&lt;xsl:param name="html.script.type"&gt;text/javascript&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The type of script to place in the HTML <tag>script</tag> element.
Specifically, the value of the <tag>script</tag> element's <tag>type</tag>
attribute.
The default value is <literal>text/javascript</literal>.
This param is used only when the stylesheet parameter
<tag>html.script</tag> is non-blank and specifies the location of a script.</para>


</refsection>
</refentry>

<refentry version="5.0" id="spacing.paras">
<refmeta>
<refentrytitle>spacing.paras</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>spacing.paras</refname>
<refpurpose>Insert additional &lt;p&gt; elements for spacing?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="spacing.paras.frag">
&lt;xsl:param name="spacing.paras" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When non-zero, additional, empty paragraphs are inserted in
several contexts (for example, around informal figures), to create a
more pleasing visual appearance in many browsers.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="emphasis.propagates.style">
<refmeta>
<refentrytitle>emphasis.propagates.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>emphasis.propagates.style</refname>
<refpurpose>Pass emphasis role attribute through to HTML?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="emphasis.propagates.style.frag">
&lt;xsl:param name="emphasis.propagates.style" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, the <literal>role</literal> attribute of
<tag>emphasis</tag> elements will be passed through to the HTML as a
class attribute on a <literal>span</literal> that surrounds the
emphasis.</para>
</refsection>
</refentry>

<refentry version="5.0" id="para.propagates.style">
<refmeta>
<refentrytitle>para.propagates.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>para.propagates.style</refname>
<refpurpose>Pass para role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="para.propagates.style.frag">
&lt;xsl:param name="para.propagates.style" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true, the role attribute of <tag>para</tag> elements
will be passed through to the HTML as a class attribute on the
<tag>p</tag> generated for the paragraph.</para>

</refsection>
</refentry>

<refentry version="5.0" id="phrase.propagates.style">
<refmeta>
<refentrytitle>phrase.propagates.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>phrase.propagates.style</refname>
<refpurpose>Pass phrase role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="phrase.propagates.style.frag">
&lt;xsl:param name="phrase.propagates.style" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the role attribute of <tag>phrase</tag> elements
will be passed through to the HTML as a <literal>class</literal>
attribute on a <literal>span</literal> that surrounds the
phrase.</para>

</refsection>
</refentry>

<refentry version="5.0" id="entry.propagates.style">
<refmeta>
<refentrytitle>entry.propagates.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>entry.propagates.style</refname>
<refpurpose>Pass entry role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="entry.propagates.style.frag">
&lt;xsl:param name="entry.propagates.style" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true, the role attribute of <tag>entry</tag> elements
will be passed through to the HTML as a class attribute on the
<tag>td</tag> or <tag>th</tag> generated for the table
cell.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.longdesc">
<refmeta>
<refentrytitle>html.longdesc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.longdesc</refname>
<refpurpose>Should longdesc URIs be created?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="html.longdesc.frag">
&lt;xsl:param name="html.longdesc" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, HTML files will be created for the
<literal>longdesc</literal> attribute. These files
are created from the <tag>textobject</tag>s in
<tag>mediaobject</tag>s and
<tag>inlinemediaobject</tag>.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="html.longdesc.link">
<refmeta>
<refentrytitle>html.longdesc.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.longdesc.link</refname>
<refpurpose>Should a link to the longdesc be included in the HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.longdesc.link.frag">
&lt;xsl:param name="html.longdesc.link" select="$html.longdesc"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, links will be created to the
HTML files created for the
<literal>longdesc</literal> attribute. It makes no
sense to enable this option without also enabling the
<parameter>html.longdesc</parameter> parameter.</para>



</refsection>
</refentry>

<refentry version="5.0" id="make.valid.html">
<refmeta>
<refentrytitle>make.valid.html</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.valid.html</refname>
<refpurpose>Attempt to make sure the HTML output is valid HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.valid.html.frag">
&lt;xsl:param name="make.valid.html" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>make.valid.html</parameter> is true, the stylesheets take
extra effort to ensure that the resulting HTML is valid. This may mean that some
<tag>para</tag> tags are translated into HTML <tag>div</tag>s or
that other substitutions occur.</para>

<para>This parameter is different from <parameter>html.cleanup</parameter>
because it changes the resulting markup; it does not use extension functions
to manipulate result-tree-fragments and is therefore applicable to any
XSLT processor.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.cleanup">
<refmeta>
<refentrytitle>html.cleanup</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cleanup</refname>
<refpurpose>Attempt to clean up the resulting HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.cleanup.frag">
&lt;xsl:param name="html.cleanup" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, and if the <link xlink:href="http://www.exslt.org/">EXSLT</link>
extensions are supported by your processor, the resulting HTML will be
<quote>cleaned up</quote>. This improves the chances that the
resulting HTML will be valid. It may also improve the formatting of
some elements.</para>

<para>This parameter is different from <parameter>make.valid.html</parameter>
because it uses extension functions to manipulate result-tree-fragments.</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.append">
<refmeta>
<refentrytitle>html.append</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.append</refname>
<refpurpose>Specifies content to append to HTML output</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.append.frag">&lt;xsl:param name="html.append"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies content to append to the end of HTML files output by
the <filename>html/docbook.xsl</filename> stylesheet, after the
closing <code>&lt;html&gt;</code> tag. You probably don&#8217;t want to set any
value for this parameter; but if you do, the only value it should ever
be set to is a newline character: <code>&amp;#x0a;</code> or
<code>&amp;#10;</code></para>

</refsection>
</refentry>

<refentry version="5.0" id="draft.mode">
<refmeta>
<refentrytitle>draft.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">no</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>draft.mode</refname>
<refpurpose>Select draft mode</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="draft.mode.frag">
&lt;xsl:param name="draft.mode"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects draft mode. If <parameter>draft.mode</parameter> is
<quote><literal>yes</literal></quote>, the entire document will be treated
as a draft. If it is <quote><literal>no</literal></quote>, the entire document
will be treated as a final copy. If it is <quote><literal>maybe</literal></quote>,
individual sections will be treated as draft or final independently, depending
on how their <literal>status</literal> attribute is set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="draft.watermark.image">
<refmeta>
<refentrytitle>draft.watermark.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>draft.watermark.image</refname>
<refpurpose>The URI of the image to be used for draft watermarks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="draft.watermark.image.frag">
&lt;xsl:param name="draft.watermark.image"&gt;images/draft.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The image to be used for draft watermarks.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.id.attributes">
<refmeta>
<refentrytitle>generate.id.attributes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.id.attributes</refname>
<refpurpose>Generate ID attributes on container elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.id.attributes.frag">
&lt;xsl:param name="generate.id.attributes" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the HTML stylesheet will generate ID attributes on
containers. For example, the markup:</para>

<screen>&lt;section id="foo"&gt;&lt;title&gt;Some Title&lt;/title&gt;
&lt;para&gt;Some para.&lt;/para&gt;
&lt;/section&gt;</screen>

<para>might produce:</para>

<screen>&lt;div class="section" id="foo"&gt;
&lt;h2&gt;Some Title&lt;/h2&gt;
&lt;p&gt;Some para.&lt;/p&gt;
&lt;/div&gt;</screen>

<para>The alternative is to generate anchors:</para>

<screen>&lt;div class="section"&gt;
&lt;h2&gt;&lt;a name="foo"&gt;&lt;/a&gt;Some Title&lt;/h2&gt;
&lt;p&gt;Some para.&lt;/p&gt;
&lt;/div&gt;</screen>

<para>Because the <tag class="attribute">name</tag> attribute of
the <tag>a</tag> element and the <tag class="attribute">id</tag>
attribute of other tags are both of type <quote>ID</quote>, producing both
generates invalid documents.</para>

<para>As of version 1.50, you can use this switch to control which type of
identifier is generated. For backwards-compatibility, generating
<tag>a</tag> anchors is preferred.</para>

<para>Note: at present, this switch is incompletely implemented.
Disabling ID attributes will suppress them, but enabling ID attributes
will not suppress the anchors.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.consistent.ids">
<refmeta>
<refentrytitle>generate.consistent.ids</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.consistent.ids</refname>
<refpurpose>Generate consistent id values if document is unchanged</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.consistent.ids.frag">
&lt;xsl:param name="generate.consistent.ids" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When the stylesheet assigns an id value to an output element,
the generate-id() function may be used.  That function may not
produce consistent values between runs.  Version control
systems may misidentify the changing id values as changes
to the document.</para>

<para>If you set this parameter's value to 1, then the
template named <literal>object.id</literal> will replace
the use of the function generate-id() with
<literal>&lt;xsl:number level="multiple" count="*"/&gt;</literal>.
This counts preceding elements to generate a unique number for
the id value.</para>

<caution>
<para>This param does not associate permanent unique id values
with particular elements.
The id values are consistent only as long as the document
structure does not change.
If the document structure changes, then the counting
of elements changes, and all id values after
the first such change may be different, even when there is
no change to the element itself or its output.
</para>
</caution>

<para>The default value of this parameter is zero, so generate-id() is used
by default.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.meta.abstract">
<refmeta>
<refentrytitle>generate.meta.abstract</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.meta.abstract</refname>
<refpurpose>Generate HTML <tag>META</tag> element from <tag>abstract</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.meta.abstract.frag">
&lt;xsl:param name="generate.meta.abstract" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, document abstracts will be reproduced in the HTML
<literal>head</literal>, with <literal>&gt;meta name="description" content="..."</literal></para>


</refsection>
</refentry>

<refentry version="5.0" id="make.clean.html">
<refmeta>
<refentrytitle>make.clean.html</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.clean.html</refname>
<refpurpose>Make HTML conform to modern coding standards</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.clean.html.frag">
&lt;xsl:param name="make.clean.html" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>make.clean.html</parameter> is true, the stylesheets take
extra effort to ensure that the resulting HTML is conforms to
modern HTML coding standards.  In addition to eliminating
excessive and noncompliant coding, it moves presentation
HTML coding to a CSS stylesheet.</para>

<para>The resulting HTML is dependent on
CSS for formatting, and so the stylesheet is capable of
generating a supporting CSS file. The <parameter>docbook.css.source</parameter>
and <parameter>custom.css.source</parameter> parameters control
how a CSS file is generated.</para>

<para>If you require your CSS to reside in the HTML 
<tag>head</tag> element, then the <parameter>generate.css.header</parameter>
can be used to do that.</para>

<para>The <parameter>make.clean.html</parameter> parameter is
different from <parameter>html.cleanup</parameter>
because the former changes the resulting markup; it does not use extension functions
like the latter to manipulate result-tree-fragments,
and is therefore applicable to any XSLT processor.</para>

<para>If <parameter>make.clean.html</parameter> is set to zero (the default),
then the stylesheet retains its original 
<quote>old style</quote>
HTML formatting features.</para>
</refsection>
</refentry>

<refentry version="5.0" id="docbook.css.source">
  <refmeta>
    <refentrytitle>docbook.css.source</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>docbook.css.source</refname>
    <refpurpose>Name of the default CSS input file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="docbook.css.source.frag">&lt;xsl:param name="docbook.css.source"&gt;docbook.css.xml&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

<para>The <parameter>docbook.css.source</parameter> parameter
specifies the name of the file containing the default DocBook
CSS styles.  Those styles are necessary when the
<parameter>make.clean.html</parameter> parameter is nonzero.</para>

<para>The file is a well-formed XML file that
must consist of a single <tag>style</tag> root
element that contains CSS styles as its text content.
The default value of the parameter (and filename)
is <literal>docbook.css.xml</literal>.
The stylesheets ship with the default file. You can substitute
your own and specify its path in this parameter.</para>

<para>If <parameter>docbook.css.source</parameter> is not blank,
and <parameter>make.clean.html</parameter> is nonzero, then
the stylesheet takes the following actions:</para>

<orderedlist>
  <listitem>
    <para>The stylesheet uses the XSLT <literal>document()</literal>
    function to open the file specified by the parameter and
    load it into a variable.</para>
  </listitem>
  <listitem>
    <para>The stylesheet forms an output pathname consisting of the
    value of the <parameter>base.dir</parameter> parameter (if it is set)
    and the value of <parameter>docbook.css.source</parameter>,
    with the <literal>.xml</literal> suffix stripped off.
    </para>
  </listitem>
  <listitem>
    <para>The stylesheet removes the <tag>style</tag>
    wrapper element and writes just the CSS text content to the output file.</para>
  </listitem>
  <listitem>
    <para>The stylesheet adds a <tag>link</tag> element to the
    HTML <tag>HEAD</tag> element to reference the external CSS stylesheet.
    For example:</para>
    <programlisting>&lt;link rel="stylesheet" href="docbook.css" type="text/css"&gt;
    </programlisting>
    <para>However, if the <parameter>docbook.css.link</parameter>
    parameter is set to zero, then no <tag>link</tag> is written
    for the default CSS file.  That is useful if a custom
    CSS file will import the default CSS stylesheet to ensure
    proper cascading of styles.</para>
  </listitem>
</orderedlist>

<para>If the <parameter>docbook.css.source</parameter> parameter
is changed from its default <literal>docbook.css.xml</literal> to blank,
then no default CSS is generated. Likewise if the
<parameter>make.clean.html</parameter> parameter is set to zero,
then no default CSS is generated. The 
<parameter>custom.css.source</parameter> parameter can be used
instead to generate a complete custom CSS file.</para>

<para>You can use the <parameter>generate.css.header</parameter>
parameter to instead write the CSS to each HTML <tag>HEAD</tag>
element in a <tag>style</tag> tag instead of an external CSS file.</para>

  </refsection>
</refentry>

<refentry version="5.0" id="docbook.css.link">
<refmeta>
<refentrytitle>docbook.css.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>docbook.css.link</refname>
<refpurpose>Insert a link referencing the default CSS stylesheet</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="docbook.css.link.frag">
&lt;xsl:param name="docbook.css.link" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The stylesheets are capable of generating a default
CSS stylesheet file.  The parameters 
<parameter>make.clean.html</parameter> and
<parameter>docbook.css.source</parameter> control that feature.</para>

<para>Normally if a default CSS file is generated, then 
the stylesheet inserts a <tag>link</tag> tag in the HTML
<tag>HEAD</tag> element to reference it.
However, you can omit that <tag>link</tag> reference if
you set the <parameter>docbook.css.link</parameter> to zero
(1 is the default).</para>

<para>This parameter is useful when you want to import the 
default CSS into a custom CSS file generated using the
<parameter>custom.css.source</parameter> parameter.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="custom.css.source">
  <refmeta>
    <refentrytitle>custom.css.source</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>custom.css.source</refname>
    <refpurpose>Name of a custom CSS input file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="custom.css.source.frag">&lt;xsl:param name="custom.css.source"&gt;&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

<para>The <parameter>custom.css.source</parameter>
parameter enables you to add CSS styles to DocBook's
HTML output.</para>

<para>The parameter
specifies the name of a file containing custom
CSS styles.  The file must be a well-formed XML file that
consists of a single <tag>style</tag> root
element that contains CSS styles as its text content.
For example:</para>
<programlisting>&lt;?xml version="1.0"?&gt;
&lt;style&gt;
h2 {
  font-weight: bold;
  color: blue;
}
...
&lt;/style&gt;
</programlisting>

<para>The filename specified by the parameter
should have a <literal>.xml</literal>
filename suffix, although that is not required.
The default value of this parameter is blank.</para>

<para>If <parameter>custom.css.source</parameter> is not blank, then
the stylesheet takes the following actions.
These actions take place regardless of the value of
the <parameter>make.clean.html</parameter> parameter.</para>

<orderedlist>
  <listitem>
    <para>The stylesheet uses the XSLT <literal>document()</literal>
    function to open the file specified by the parameter and
    load it into a variable.</para>
  </listitem>
  <listitem>
    <para>The stylesheet forms an output pathname consisting of the
    value of the <parameter>base.dir</parameter> parameter (if it is set)
    and the value of <parameter>custom.css.source</parameter>,
    with the <literal>.xml</literal> suffix stripped off.
    </para>
  </listitem>
  <listitem>
    <para>The stylesheet removes the <tag>style</tag>
    wrapper element and writes just the CSS text content to the output file.</para>
  </listitem>
  <listitem>
    <para>The stylesheet adds a <tag>link</tag> element to the
    HTML <tag>HEAD</tag> element to reference this external CSS stylesheet.
    For example:
    <programlisting>&lt;link rel="stylesheet" href="custom.css" type="text/css"&gt;
    </programlisting>
    </para>
  </listitem>
</orderedlist>



<para>If the <parameter>make.clean.html</parameter> parameter is nonzero
(the default is zero),
and if the <parameter>docbook.css.source</parameter> parameter
is not blank (the default is not blank),
then the stylesheet will also generate a default CSS file
and add a <tag>link</tag> tag to reference it.
The <tag>link</tag> to the custom CSS comes after the 
<tag>link</tag> to the default, so it should cascade properly
in most browsers.
If you do not want two <tag>link</tag> tags, and
instead want your custom CSS to import the default generated
CSS file, then do the following:
</para>

<orderedlist>
  <listitem>
    <para>Add a line like the following to your custom CSS source file:</para>
    <programlisting>@import url("docbook.css")
    </programlisting>
  </listitem>
  <listitem>
    <para>Set the <parameter>docbook.css.link</parameter> parameter 
    to zero. This will omit the <tag>link</tag> tag
    that references the default CSS file.</para>
  </listitem>
</orderedlist>

<para>If you set <parameter>make.clean.html</parameter> to nonzero but
you do not want the default CSS generated, then also set
the <parameter>docbook.css.source</parameter> parameter to blank.
Then no default CSS will be generated, and so
all CSS styles must come from your custom CSS file.</para>

<para>You can use the <parameter>generate.css.header</parameter>
parameter to instead write the CSS to each HTML <tag>HEAD</tag>
element in a <tag>style</tag> tag instead of an external CSS file.</para>

  </refsection>
</refentry>

<refentry version="5.0" id="generate.css.header">
<refmeta>
<refentrytitle>generate.css.header</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.css.header</refname>
<refpurpose>Insert generated CSS styles in HEAD element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.css.header.frag">
&lt;xsl:param name="generate.css.header" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The stylesheets are capable of generating both default
and custom CSS stylesheet files.  The parameters 
<parameter>make.clean.html</parameter>,
<parameter>docbook.css.source</parameter>, and
<parameter>custom.css.source</parameter> control that feature.</para>

<para>If you require that CSS styles reside in the HTML 
<tag>HEAD</tag> element instead of external CSS files,
then set the <parameter>generate.css.header</parameter>
parameter to nonzero (it is zero by default).
Then instead of generating the CSS in external files,
they are wrapped in <tag>style</tag> elements in
the <tag>HEAD</tag> element of each HTML output file.
</para>

</refsection>
</refentry>

</reference><reference id="xslt" xml:base="../html/param.xml"><title>XSLT Processing</title>
<refentry version="5.0" id="rootid">
<refmeta>
<refentrytitle>rootid</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>rootid</refname>
<refpurpose>Specify the root element to format</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="rootid.frag">
&lt;xsl:param name="rootid"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>rootid</parameter> is not empty, it must be the
value of an ID that occurs in the document being formatted. The entire
document will be loaded and parsed, but formatting will begin at the
element identified, rather than at the root. For example, this allows
you to process only <tag>chapter</tag> 4 of a <tag>book</tag>.</para>
<para>Because the entire document is available to the processor, automatic
numbering, cross references, and other dependencies are correctly
resolved.</para>

</refsection>
</refentry>

<refentry version="5.0" id="suppress.navigation">
<refmeta>
<refentrytitle>suppress.navigation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.navigation</refname>
<refpurpose>Disable header and footer navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="suppress.navigation.frag">
&lt;xsl:param name="suppress.navigation" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, header and footer navigation will be suppressed.</para>

</refsection>
</refentry>

<refentry version="5.0" id="suppress.header.navigation">
<refmeta>
<refentrytitle>suppress.header.navigation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.header.navigation</refname>
<refpurpose>Disable header navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="suppress.header.navigation.frag">
&lt;xsl:param name="suppress.header.navigation" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, header navigation will be suppressed.</para>

</refsection>
</refentry>

<refentry version="5.0" id="suppress.footer.navigation">
<refmeta>
<refentrytitle>suppress.footer.navigation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.footer.navigation</refname>
<refpurpose>Disable footer navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="suppress.footer.navigation.frag">&lt;xsl:param name="suppress.footer.navigation"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, footer navigation will be suppressed.</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.rule">
<refmeta>
<refentrytitle>header.rule</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.rule</refname>
<refpurpose>Rule under headers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="header.rule.frag">
&lt;xsl:param name="header.rule" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a rule will be drawn below the page headers.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.rule">
<refmeta>
<refentrytitle>footer.rule</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.rule</refname>
<refpurpose>Rule over footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footer.rule.frag">
&lt;xsl:param name="footer.rule" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a rule will be drawn above the page footers.</para>

</refsection>
</refentry>

<refentry version="5.0" id="id.warnings">
<refmeta>
<refentrytitle>id.warnings</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>id.warnings</refname>
<refpurpose>Should warnings be generated for titled elements without IDs?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="id.warnings.frag">
&lt;xsl:param name="id.warnings" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, the stylesheet will issue a warning for any element
(other than the root element) which has a <tag>title</tag> but does not have an
ID.</para>
</refsection>
</refentry>

</reference><reference id="meta" xml:base="../html/param.xml"><title>Meta/*Info and Titlepages</title>
<refentry version="5.0" id="inherit.keywords">
<refmeta>
<refentrytitle>inherit.keywords</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>inherit.keywords</refname>
<refpurpose>Inherit keywords from ancestor elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="inherit.keywords.frag">
&lt;xsl:param name="inherit.keywords" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>inherit.keywords</parameter>
is non-zero, the keyword <literal>meta</literal> for each HTML
<literal>head</literal> element will include all of the keywords from
ancestor elements. Otherwise, only the keywords from the current section
will be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="make.single.year.ranges">
<refmeta>
<refentrytitle>make.single.year.ranges</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.single.year.ranges</refname>
<refpurpose>Print single-year ranges (e.g., 1998-1999)</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.single.year.ranges.frag">
&lt;xsl:param name="make.single.year.ranges" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, year ranges that span a single year will be printed
in range notation (1998-1999) instead of discrete notation
(1998, 1999).</para>

</refsection>
</refentry>

<refentry version="5.0" id="make.year.ranges">
<refmeta>
<refentrytitle>make.year.ranges</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.year.ranges</refname>
<refpurpose>Collate copyright years into ranges?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.year.ranges.frag">&lt;xsl:param name="make.year.ranges" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, multiple copyright <tag>year</tag> elements will be
collated into ranges.
This works only if each year number is put into a separate
year element.  The copyright element permits multiple
year elements. If a year element contains a dash or
a comma, then that year element will not be merged into
any range.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="author.othername.in.middle">
<refmeta>
<refentrytitle>author.othername.in.middle</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>author.othername.in.middle</refname>
<refpurpose>Is <tag>othername</tag> in <tag>author</tag> a
middle name?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="author.othername.in.middle.frag">
&lt;xsl:param name="author.othername.in.middle" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the <tag>othername</tag> of an <tag>author</tag>
appears between the <tag>firstname</tag> and
<tag>surname</tag>.  Otherwise, <tag>othername</tag>
is suppressed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="blurb.on.titlepage.enabled">
<refmeta>
<refentrytitle>blurb.on.titlepage.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>blurb.on.titlepage.enabled</refname>
<refpurpose>Display personblurb and authorblurb on title pages?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="blurb.on.titlepage.enabled.frag">
&lt;xsl:param name="blurb.on.titlepage.enabled" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, output from <tag>authorblurb</tag> and
<tag>personblurb</tag> elements is displayed on title pages. If zero
(the default), output from those elements is suppressed on title pages
(unless you are using a <literal>titlepage</literal> customization
that causes them to be included).</para>

</refsection>
</refentry>

<refentry version="5.0" id="contrib.inline.enabled">
<refmeta>
<refentrytitle>contrib.inline.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>contrib.inline.enabled</refname>
<refpurpose>Display contrib output inline?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="contrib.inline.enabled.frag">&lt;xsl:param name="contrib.inline.enabled"&gt;1&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero (the default), output of the <tag>contrib</tag> element is
displayed as inline content rather than as block content.</para>

</refsection>
</refentry>

<refentry version="5.0" id="editedby.enabled">
<refmeta>
<refentrytitle>editedby.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>editedby.enabled</refname>
<refpurpose>Display &#8220;Edited by&#8221; heading above editor name?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="editedby.enabled.frag">&lt;xsl:param name="editedby.enabled"&gt;1&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a localized <emphasis role="bold">Edited
by</emphasis> heading is displayed above editor names in output of the
<tag>editor</tag> element.</para>

</refsection>
</refentry>

<refentry version="5.0" id="abstract.notitle.enabled">
<refmeta>
<refentrytitle>abstract.notitle.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>abstract.notitle.enabled</refname>
<refpurpose>Suppress display of abstract titles?</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <programlisting id="abstract.notitle.enabled.frag">&lt;xsl:param name="abstract.notitle.enabled" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, in output of the <tag>abstract</tag> element on titlepages,
display of the abstract title is suppressed.</para>
</refsection>
</refentry>

<refentry version="5.0" id="othercredit.like.author.enabled">
<refmeta>
<refentrytitle>othercredit.like.author.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>othercredit.like.author.enabled</refname>
<refpurpose>Display othercredit in same style as author?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="othercredit.like.author.enabled.frag">&lt;xsl:param name="othercredit.like.author.enabled"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, output of the
<tag>othercredit</tag> element on titlepages is displayed in
the same style as <tag>author</tag> and
<tag>editor</tag> output. If zero then
<tag>othercredit</tag> output is displayed using a style
different than that of <tag>author</tag> and
<tag>editor</tag>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.legalnotice.link">
<refmeta>
<refentrytitle>generate.legalnotice.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.legalnotice.link</refname>
<refpurpose>Write legalnotice to separate chunk and generate link?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.legalnotice.link.frag">&lt;xsl:param name="generate.legalnotice.link" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>generate.legalnotice.link</parameter>
is non-zero, the stylesheet:

<itemizedlist>
  <listitem>
    <para>writes the contents of <tag>legalnotice</tag> to a separate
    HTML file</para>
  </listitem>
  <listitem>
    <para>inserts a hyperlink to the <tag>legalnotice</tag> file</para>
  </listitem>
  <listitem>
    <para>adds (in the HTML <literal>head</literal>) either a single
    <literal>link</literal> or element or multiple
    <literal>link</literal> elements (depending on the value of the
    <parameter>html.head.legalnotice.link.multiple</parameter>
    parameter), with the value or values derived from the
    <parameter>html.head.legalnotice.link.types</parameter>
    parameter</para>
  </listitem>
  </itemizedlist>

  Otherwise, if <parameter>generate.legalnotice.link</parameter> is
  zero, <tag>legalnotice</tag> contents are rendered on the title
  page.</para>

<para>The name of the separate HTML file is computed as follows:

<orderedlist>
<listitem>
  <para>If a filename is given by the <tag class="xmlpi">dbhtml filename</tag> 
processing instruction, that filename is used.</para>
</listitem>
<listitem>
  <para>If the legalnotice has an <tag class="attribute">id</tag>/<tag class="attribute">xml:id</tag> 
attribute, and if <parameter>use.id.as.filename</parameter> != 0, the filename 
is the concatenation of the id value and the value of the <parameter>html.ext</parameter> 
parameter.</para>
</listitem>
<listitem>
  <para>If the legalnotice does not have an <tag class="attribute">id</tag>/<tag class="attribute">xml:id</tag>
 attribute, or if <parameter>use.id.as.filename</parameter> = 0, the filename is the concatenation of "ln-", 
auto-generated id value, and <parameter>html.ext</parameter> value.
  </para>
</listitem>
</orderedlist>

</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.revhistory.link">
<refmeta>
<refentrytitle>generate.revhistory.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.revhistory.link</refname>
<refpurpose>Write revhistory to separate chunk and generate link?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.revhistory.link.frag">&lt;xsl:param name="generate.revhistory.link" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the contents of <tag>revhistory</tag> are written
to a separate HTML file and a link to the file is
generated. Otherwise, <tag>revhistory</tag> contents are rendered on
the title page.</para>

<para>The name of the separate HTML file is computed as follows:

<orderedlist>
<listitem>
  <para>If a filename is given by the <tag class="xmlpi">dbhtml filename</tag> processing instruction, 
that filename is used.</para>
</listitem>
<listitem>
  <para>If the revhistory has an <tag class="attribute">id</tag>/<tag class="attribute">xml:id</tag> 
attribute, and if <parameter>use.id.as.filename</parameter> != 0, the filename is the concatenation of 
the id value and the value of the <parameter>html.ext</parameter> parameter.</para>
</listitem>
<listitem>
  <para>If the revhistory does not have an <tag class="attribute">id</tag>/<tag class="attribute">xml:id</tag> 
attribute, or if <parameter>use.id.as.filename</parameter> = 0, the filename is the concatenation of "rh-", 
auto-generated id value, and <parameter>html.ext</parameter> value.
  </para>
</listitem>
</orderedlist>

</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.head.legalnotice.link.types">
<refmeta>
<refentrytitle>html.head.legalnotice.link.types</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.head.legalnotice.link.types</refname>
<refpurpose>Specifies link types for legalnotice link in html head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.head.legalnotice.link.types.frag">
&lt;xsl:param name="html.head.legalnotice.link.types"&gt;copyright&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of
<parameter>html.head.legalnotice.link.types</parameter> is a
space-separated list of link types, as described in <link xlink:href="http://www.w3.org/TR/html401/types.html#type-links">Section 6.12
of the HTML 4.01 specification</link>. If the value of the
<parameter>generate.legalnotice.link</parameter> parameter is
non-zero, then the stylesheet generates (in the
<literal>head</literal> section of the HTML source) either a single
HTML <literal>link</literal> element or, if the value of the
<parameter>html.head.legalnotice.link.multiple</parameter> is
non-zero, one <literal>link</literal> element for each link type
specified. Each <literal>link</literal> has the following attributes:

<itemizedlist>
  <listitem>
    <para>a <tag class="attribute">rel</tag> attribute whose
    value is derived from the value of
    <parameter>html.head.legalnotice.link.types</parameter></para>
  </listitem>
  <listitem>
    <para>an <tag class="attribute">href</tag> attribute whose
    value is set to the URL of the file containing the
    <tag>legalnotice</tag></para>
  </listitem>
  <listitem>
    <para>a <tag class="attribute">title</tag> attribute whose
    value is set to the title of the corresponding
    <tag>legalnotice</tag> (or a title programatically
    determined by the stylesheet)</para>
  </listitem>
</itemizedlist>

For example:

<screen>  &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice"&gt;</screen>
</para>

<refsection><info><title>About the default value</title></info>
  
  <para>In an ideal world, the default value of
  <parameter>html.head.legalnotice.link.types</parameter> would
  probably be &#8220;<literal>license</literal>&#8221;, since the content of the
  DocBook <tag>legalnotice</tag> is typically license
  information, not copyright information. However, the default value
  is &#8220;<literal>copyright</literal>&#8221; for pragmatic reasons: because
  that&#8217;s among the set of &#8220;recognized link types&#8221; listed in <link xlink:href="http://www.w3.org/TR/html401/types.html#type-links">Section
  6.12 of the HTML 4.01 specification</link>, and because certain
  browsers and browser extensions are preconfigured to recognize that
  value.</para>
</refsection>

</refsection>
</refentry>

<refentry version="5.0" id="html.head.legalnotice.link.multiple">
<refmeta>
<refentrytitle>html.head.legalnotice.link.multiple</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.head.legalnotice.link.multiple</refname>
<refpurpose>Generate multiple link instances in html head for legalnotice?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.head.legalnotice.link.multiple.frag">
&lt;xsl:param name="html.head.legalnotice.link.multiple" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>html.head.legalnotice.link.multiple</parameter> is
non-zero and the value of
<parameter>html.head.legalnotice.link.types</parameter> contains
multiple link types, then the stylesheet generates (in the
<literal>head</literal> section of the HTML source) one
<literal>link</literal> element for each link type specified. For
example, if the value of
<parameter>html.head.legalnotice.link.types</parameter> is
&#8220;<literal>copyright license</literal>&#8221;:

<screen>  &lt;link rel="copyright" href="ln-id2524073.html" title="Legal Notice"&gt;
  &lt;link rel="license" href="ln-id2524073.html" title="Legal Notice"&gt;</screen>

 Otherwise, the stylesheet generates generates a single
 <literal>link</literal> instance; for example:

<screen>  &lt;link rel="copyright license" href="ln-id2524073.html" title="Legal Notice"&gt;</screen>
 
</para>
</refsection>
</refentry>

</reference><reference id="refentry" xml:base="../html/param.xml"><title>Reference Pages</title>
<refentry version="5.0" id="funcsynopsis.decoration">
<refmeta>
<refentrytitle>funcsynopsis.decoration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.decoration</refname>
<refpurpose>Decorate elements of a <tag>funcsynopsis</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="funcsynopsis.decoration.frag">
&lt;xsl:param name="funcsynopsis.decoration" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, elements of the <tag>funcsynopsis</tag> will be
decorated (e.g. rendered as bold or italic text). The decoration is controlled by
templates that can be redefined in a customization layer.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="funcsynopsis.style">
<refmeta>
<refentrytitle>funcsynopsis.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">ansi</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kr</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.style</refname>
<refpurpose>What style of <tag>funcsynopsis</tag> should be generated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="funcsynopsis.style.frag">&lt;xsl:param name="funcsynopsis.style"&gt;kr&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>funcsynopsis.style</parameter> is <literal>ansi</literal>,
ANSI-style function synopses are generated for a
<tag>funcsynopsis</tag>, otherwise K&amp;R-style
function synopses are generated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="function.parens">
<refmeta>
<refentrytitle>function.parens</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>function.parens</refname>
<refpurpose>Generate parens after a function?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="function.parens.frag">
&lt;xsl:param name="function.parens" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the formatting of a <tag>function</tag> element
will include generated parentheses.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.generate.name">
<refmeta>
<refentrytitle>refentry.generate.name</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.name</refname>
<refpurpose>Output NAME header before <tag>refname</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.generate.name.frag">
&lt;xsl:param name="refentry.generate.name" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a "NAME" section title is output before the list
of <tag>refname</tag>s. This parameter and
<parameter>refentry.generate.title</parameter> are mutually
exclusive. This means that if you change this parameter to zero, you
should set <parameter>refentry.generate.title</parameter> to non-zero unless
you want get quite strange output.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.generate.title">
<refmeta>
<refentrytitle>refentry.generate.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.title</refname>
<refpurpose>Output title before <tag>refname</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.generate.title.frag">
&lt;xsl:param name="refentry.generate.title" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the reference page title or first name is
output before the list of <tag>refname</tag>s. This parameter and
<parameter>refentry.generate.name</parameter> are mutually exclusive.
This means that if you change this parameter to non-zero, you
should set <parameter>refentry.generate.name</parameter> to zero unless
you want get quite strange output.</para>


</refsection>
</refentry>

<refentry version="5.0" id="refentry.xref.manvolnum">
<refmeta>
<refentrytitle>refentry.xref.manvolnum</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.xref.manvolnum</refname>
<refpurpose>Output <tag>manvolnum</tag> as part of 
<tag>refentry</tag> cross-reference?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.xref.manvolnum.frag">
&lt;xsl:param name="refentry.xref.manvolnum" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>if non-zero, the <tag>manvolnum</tag> is used when cross-referencing
<tag>refentry</tag>s, either with <tag>xref</tag>
or <tag>citerefentry</tag>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="citerefentry.link">
<refmeta>
<refentrytitle>citerefentry.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>citerefentry.link</refname>
<refpurpose>Generate URL links when cross-referencing RefEntrys?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="citerefentry.link.frag">
&lt;xsl:param name="citerefentry.link" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a web link will be generated, presumably
to an online man-&gt;HTML gateway. The text of the link is
generated by the <literal>generate.citerefentry.link</literal> template.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.separator">
<refmeta>
<refentrytitle>refentry.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.separator</refname>
<refpurpose>Generate a separator between consecutive RefEntry elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.separator.frag">
&lt;xsl:param name="refentry.separator" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true, a separator will be generated between consecutive
reference pages.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refclass.suppress">
<refmeta>
<refentrytitle>refclass.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refclass.suppress</refname>
<refpurpose>Suppress display of refclass contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refclass.suppress.frag">
&lt;xsl:param name="refclass.suppress" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>refclass.suppress</parameter> is
non-zero, then display of <tag>refclass</tag> contents is
suppressed in output.</para>

</refsection>
</refentry>

</reference><reference id="tables" xml:base="../html/param.xml"><title>Tables</title>
<refentry version="5.0" id="default.table.width">
<refmeta>
<refentrytitle>default.table.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.width</refname>
<refpurpose>The default width of tables</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="default.table.width.frag">
&lt;xsl:param name="default.table.width"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, this value will be used for the
<literal>width</literal> attribute on <tag>table</tag>s that do not specify an
alternate width (with the <tag class="xmlpi">dbhtml table-width</tag> or 
<tag class="xmlpi">dbfo table-width</tag> processing instruction).</para>
</refsection>
</refentry>

<refentry version="5.0" id="nominal.table.width">
<refmeta>
<refentrytitle>nominal.table.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.table.width</refname>
<refpurpose>The (absolute) nominal width of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nominal.table.width.frag">
&lt;xsl:param name="nominal.table.width"&gt;6in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In order to convert CALS column widths into HTML column widths, it
is sometimes necessary to have an absolute table width to use for conversion
of mixed absolute and relative widths. This value must be an absolute
length (not a percentage).</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.borders.with.css">
<refmeta>
<refentrytitle>table.borders.with.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.borders.with.css</refname>
<refpurpose>Use CSS to specify table, row, and cell borders?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.borders.with.css.frag">
&lt;xsl:param name="table.borders.with.css" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, CSS will be used to draw table borders.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.style">
<refmeta>
<refentrytitle>table.cell.border.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dotted</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dashed</refmiscinfo>
<refmiscinfo class="other" otherclass="value">double</refmiscinfo>
<refmiscinfo class="other" otherclass="value">groove</refmiscinfo>                       
<refmiscinfo class="other" otherclass="value">ridge</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inset</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outset</refmiscinfo>          
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.style</refname>
<refpurpose>Specifies the border style of table cells</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.style.frag">
&lt;xsl:param name="table.cell.border.style"&gt;solid&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border style of table cells.</para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.thickness">
<refmeta>
<refentrytitle>table.cell.border.thickness</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.thickness</refname>
<refpurpose>Specifies the thickness of table cell borders</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.thickness.frag">
&lt;xsl:param name="table.cell.border.thickness"&gt;0.5pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, specifies the thickness of borders on table
cells. The units are points. See <link xlink:href="http://www.w3.org/TR/CSS21/box.html#border-width-properties">
CSS</link></para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.color">
<refmeta>
<refentrytitle>table.cell.border.color</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.color</refname>
<refpurpose>Specifies the border color of table cells</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.color.frag">
&lt;xsl:param name="table.cell.border.color"&gt;&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set the color of table cell borders. If non-zero, the value is used
for the border coloration. See <link xlink:href="http://www.w3.org/TR/CSS21/syndata.html#value-def-color">CSS</link>. A
<literal>color</literal> is either a keyword or a numerical RGB specification.
Keywords are aqua, black, blue, fuchsia, gray, green, lime, maroon,
navy, olive, orange, purple, red, silver, teal, white, and
yellow.</para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.style">
<refmeta>
<refentrytitle>table.frame.border.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dotted</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dashed</refmiscinfo>
<refmiscinfo class="other" otherclass="value">double</refmiscinfo>
<refmiscinfo class="other" otherclass="value">groove</refmiscinfo>                       
<refmiscinfo class="other" otherclass="value">ridge</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inset</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outset</refmiscinfo>          
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.style</refname>
<refpurpose>Specifies the border style of table frames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.style.frag">
&lt;xsl:param name="table.frame.border.style"&gt;solid&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border style of table frames.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.thickness">
<refmeta>
<refentrytitle>table.frame.border.thickness</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.thickness</refname>
<refpurpose>Specifies the thickness of the frame border</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.thickness.frag">
&lt;xsl:param name="table.frame.border.thickness"&gt;0.5pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the thickness of the border on the table's frame.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.color">
<refmeta>
<refentrytitle>table.frame.border.color</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.color</refname>
<refpurpose>Specifies the border color of table frames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.color.frag">
&lt;xsl:param name="table.frame.border.color"&gt;&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border color of table frames.</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.table.frame">
<refmeta>
<refentrytitle>default.table.frame</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.frame</refname>
<refpurpose>The default framing of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.table.frame.frag">
&lt;xsl:param name="default.table.frame"&gt;all&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This value will be used when there is no frame attribute on the
table. </para>

</refsection>
</refentry>

<refentry version="5.0" id="html.cellspacing">
<refmeta>
<refentrytitle>html.cellspacing</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cellspacing</refname>
<refpurpose>Default value for cellspacing in HTML tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.cellspacing.frag">
&lt;xsl:param name="html.cellspacing"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, this value will be used as the default cellspacing
value in HTML tables. nn for pixels or nn% for percentage
length. E.g. 5 or 5%</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.cellpadding">
<refmeta>
<refentrytitle>html.cellpadding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cellpadding</refname>
<refpurpose>Default value for cellpadding in HTML tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.cellpadding.frag">
&lt;xsl:param name="html.cellpadding"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, this value will be used as the default cellpadding value
in HTML tables. nn for pixels or nn% for percentage length. E.g. 5 or
5%</para>

</refsection>
</refentry>

</reference><reference id="qa" xml:base="../html/param.xml"><title>QAndASet</title>
<refentry version="5.0" id="qanda.defaultlabel">
<refmeta>
<refentrytitle>qanda.defaultlabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">number</refmiscinfo>
<refmiscinfo class="other" otherclass="value">qanda</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.defaultlabel</refname>
<refpurpose>Sets the default for defaultlabel on QandASet.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.defaultlabel.frag">
&lt;xsl:param name="qanda.defaultlabel"&gt;number&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If no <literal>defaultlabel</literal> attribute is specified on
a <tag>qandaset</tag>, this value is used. It is generally one of the legal
values for the defaultlabel attribute (<literal>none</literal>, 
<literal>number</literal> or
<literal>qanda</literal>), or one of the additional stylesheet-specific values
(<literal>qnumber</literal> or <literal>qnumberanda</literal>).
The default value is 'number'.
</para>
<para>The values are rendered as follows:</para>
<variablelist>
<varlistentry><term><literal>qanda</literal></term>
<listitem>
<para><tag>question</tag>s are labeled "Q:" and
<tag>answer</tag>s are labeled "A:". </para>
</listitem>
</varlistentry>

<varlistentry><term><literal>number</literal></term>
<listitem>
<para>The questions are enumerated and the answers
are not labeled. </para>
</listitem>
</varlistentry>

<varlistentry><term><literal>qnumber</literal></term>
<listitem>
<para>The questions are labeled "Q:" followed by a number, and answers are not 
labeled. 
When sections are numbered, adding a label
to the number distinguishes the question numbers
from the section numbers.
This value is not allowed in the
<tag class="attribute">defaultlabel</tag> attribute
of a <tag>qandaset</tag> element.</para>
</listitem>
</varlistentry>

<varlistentry><term><literal>qnumberanda</literal></term>
<listitem>
<para>The questions are labeled "Q:" followed by a number, and
the answers are labeled "A:". 
When sections are numbered, adding a label
to the number distinguishes the question numbers
from the section numbers.
This value is not allowed in the
<tag class="attribute">defaultlabel</tag> attribute
of a <tag>qandaset</tag> element.</para>
</listitem>
</varlistentry>

<varlistentry><term><literal>none</literal></term>
<listitem>
<para>No distinguishing label precedes Questions or Answers. 
</para>
</listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.inherit.numeration">
<refmeta>
<refentrytitle>qanda.inherit.numeration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.inherit.numeration</refname>
<refpurpose>Does enumeration of QandASet components inherit the numeration of parent elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.inherit.numeration.frag">
&lt;xsl:param name="qanda.inherit.numeration" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, numbered <tag>qandadiv</tag> elements and
<tag>question</tag> and <tag>answer</tag> inherit the enumeration of
the ancestors of the <tag>qandaset</tag>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.in.toc">
<refmeta>
<refentrytitle>qanda.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.in.toc</refname>
<refpurpose>Should qandaentry questions appear in 
the document table of contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.in.toc.frag">&lt;xsl:param name="qanda.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), then the generated table of contents
for a document will include <tag>qandaset</tag> titles, 
<tag>qandadiv</tag> titles,
and <tag>question</tag> elements.  The default value (zero) excludes
them from the TOC.
</para>
<para>This parameter does not affect any tables of contents
that may be generated inside a qandaset or qandadiv.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.nested.in.toc">
<refmeta>
<refentrytitle>qanda.nested.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.nested.in.toc</refname>
<refpurpose>Should nested answer/qandaentry instances appear in TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.nested.in.toc.frag">
&lt;xsl:param name="qanda.nested.in.toc" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, instances of <tag>qandaentry</tag>
that are children of <tag>answer</tag> elements are shown in
the TOC.</para>

</refsection>
</refentry>

</reference><reference id="links" xml:base="../html/param.xml"><title>Linking</title>
<refentry version="5.0" id="target.database.document"> 
<refmeta> 
<refentrytitle>target.database.document</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>target.database.document</refname> 
<refpurpose>Name of master database file for resolving
olinks</refpurpose> 
</refnamediv> 
<refsynopsisdiv> 
<programlisting id="target.database.document.frag">
 &lt;xsl:param name="target.database.document"&gt;olinkdb.xml&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info>
 
<para>
To resolve olinks between documents, the stylesheets use a master
database document that identifies the target datafiles for all the
documents within the scope of the olinks. This parameter value is the
URI of the master document to be read during processing to resolve
olinks.  The default value is <filename>olinkdb.xml</filename>.</para>

<para>The data structure of the file is defined in the
<filename>targetdatabase.dtd</filename> DTD.  The database file
provides the high level elements to record the identifiers, locations,
and relationships of documents. The cross reference data for
individual documents is generally pulled into the database using
system entity references or XIncludes. See also
<parameter>targets.filename</parameter>.  </para> </refsection>
</refentry>

<refentry version="5.0" id="targets.filename"> 
<refmeta> 
<refentrytitle>targets.filename</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>targets.filename</refname> 
<refpurpose>Name of cross reference targets data file</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="targets.filename.frag">
&lt;xsl:param name="targets.filename"&gt;target.db&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info>
 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter lets you change the name of the generated
file from the default name <filename>target.db</filename>.
The name must agree with that used in the target database
used to resolve olinks during processing.
See also <parameter>target.database.document</parameter>.
</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="olink.base.uri"> 
<refmeta> 
<refentrytitle>olink.base.uri</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.base.uri</refname> 
<refpurpose>Base URI used in olink hrefs</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.base.uri.frag">
&lt;xsl:param name="olink.base.uri"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When cross reference data is collected for resolving olinks, it
may be necessary to prepend a base URI to each target's href. This
parameter lets you set that base URI when cross reference data is
collected. This feature is needed when you want to link to a document
that is processed without chunking. The output filename for such a
document is not known to the XSL stylesheet; the only target
information consists of fragment identifiers such as
<literal>#idref</literal>. To enable the resolution of olinks between
documents, you should pass the name of the HTML output file as the
value of this parameter. Then the hrefs recorded in the cross
reference data collection look like
<literal>outfile.html#idref</literal>, which can be reached as links
from other documents.</para>
</refsection> 
</refentry>

<refentry version="5.0" id="use.local.olink.style"> 
<refmeta> 
<refentrytitle>use.local.olink.style</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>use.local.olink.style</refname> 
<refpurpose>Process olinks using xref style of current
document</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="use.local.olink.style.frag">
&lt;xsl:param name="use.local.olink.style" select="0"&gt;&lt;/xsl:param&gt; </programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the <parameter>use.local.olink.style</parameter> parameter is set to non-zero, then instead the cross
reference string is formed again from the target title, number, and
element name, using the stylesheet processing the targeting document.
Then olinks will match the xref style in the targeting document
rather than in the target document. If  both documents are processed
with the same stylesheet, then the results will be the same.</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="current.docid"> 
<refmeta> 
<refentrytitle>current.docid</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>current.docid</refname> 
<refpurpose>targetdoc identifier for the document being
processed</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="current.docid.frag">
&lt;xsl:param name="current.docid"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the <literal>targetdoc</literal> identifiers for both documents, as they appear in the <parameter>target.database.document</parameter> database file. This parameter passes to the stylesheet
the targetdoc identifier of the current document, since that
identifier does not appear in the document itself. </para>
<para>This parameter can also be used for print output. If an olink's  <literal>targetdoc</literal>  id differs from the <literal>current.docid</literal>, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also <parameter>olink.doctitle</parameter> to enable that feature.</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="olink.doctitle"> 
<refmeta> 
<refentrytitle>olink.doctitle</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta> 
<refnamediv> 
<refname>olink.doctitle</refname> 
<refpurpose>show the document title for external olinks?</refpurpose>

</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.doctitle.frag">
&lt;xsl:param name="olink.doctitle"&gt;no&lt;/xsl:param&gt; 
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When olinks between documents are resolved, the generated text
may not make it clear that the reference is to another document.
It is possible for the stylesheets to append the other document's
title to external olinks. For this to happen, two parameters must
be set.</para>
<itemizedlist>
<listitem>
<para>This <parameter>olink.doctitle</parameter> parameter
should be set to either <literal>yes</literal> or <literal>maybe</literal>
to enable this feature.
</para>
</listitem>
<listitem>
<para>And you should also set the <parameter>current.docid</parameter>
parameter to the document id for the  document currently
being processed for output.
</para>
</listitem>
</itemizedlist>

<para>
Then if an olink's  <literal>targetdoc</literal> id differs from
the <literal>current.docid</literal> value, the stylesheet knows
that it is a reference to another document and can
append the target document's
title to the generated olink text. </para> 

<para>The text for the target document's title is copied from the
olink database from the <tag>ttl</tag> element
of the top-level <tag>div</tag> for that document.
If that <tag>ttl</tag> element is missing or empty,
no title is output.
</para>

<para>The supported values for <parameter>olink.doctitle</parameter> are:
</para>
<variablelist>
<varlistentry>
<term><literal>yes</literal></term>
<listitem>
<para>
Always insert the title to the target document if it is not
the current document.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no</literal></term>
<listitem>
<para>
Never insert the title to the target document, even if requested
in an <tag class="attribute">xrefstyle</tag> attribute.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>maybe</literal></term>
<listitem>
<para>
Only insert the title to the target document, if requested
in an <tag class="attribute">xrefstyle</tag> attribute.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>An <tag class="attribute">xrefstyle</tag> attribute
may override the global setting for individual olinks.
The following values are supported in an
<tag class="attribute">xrefstyle</tag>
attribute using the <literal>select:</literal> syntax:
</para>

<variablelist>
<varlistentry>
<term><literal>docname</literal></term>
<listitem>
<para>
Insert the target document name for this olink using the
<literal>docname</literal> gentext template, but only
if the value of <parameter>olink.doctitle</parameter>
is not <literal>no</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>docnamelong</literal></term>
<listitem>
<para>
Insert the target document name for this olink using the
<literal>docnamelong</literal> gentext template, but only
if the value of <parameter>olink.doctitle</parameter>
is not <literal>no</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>nodocname</literal></term>
<listitem>
<para>
Omit the target document name even if
the value of <parameter>olink.doctitle</parameter>
is <literal>yes</literal>.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>Another way of inserting the target document name 
for a single olink is to employ an
<tag class="attribute">xrefstyle</tag>
attribute using the <literal>template:</literal> syntax.
The <literal>%o</literal> placeholder (the letter o, not zero)
in such a template
will be filled in with the target document's title when it is processed.
This will occur regardless of 
the value of <parameter>olink.doctitle</parameter>.
</para>
<para>Note that prior to version 1.66 of the XSL stylesheets,
the allowed values for this parameter were 0 and 1.  Those
values are still supported and mapped to 'no' and 'yes', respectively.
</para>
</refsection> 
</refentry>

<refentry version="5.0" id="activate.external.olinks">
<refmeta>
<refentrytitle>activate.external.olinks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>activate.external.olinks</refname>
<refpurpose>Make external olinks into active links</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="activate.external.olinks.frag">
&lt;xsl:param name="activate.external.olinks" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>activate.external.olinks</parameter> is nonzero
(the default), then any olinks that reference another document
become active links that can be clicked on to follow the link.
If the parameter is set to zero, then external olinks
will have the appropriate link text generated, but the link is
not made active.  Olinks to destinations in
the current document remain active.</para>

<para>To make an external olink active for HTML
outputs, the link text is wrapped in an <tag>a</tag>
element with an <tag>href</tag> attribute. To
make an external olink active for FO outputs, the link text is
wrapped in an <tag>fo:basic-link</tag> element with an
<tag>external-destination</tag> attribute.</para>

<para>This parameter is useful when you need external olinks
to resolve but not be clickable. For example, if documents
in a collection are available independently of each other,
then having active links between them could lead to
unresolved links when a given target document is missing.</para>

<para>The epub stylesheets set this parameter to zero by default
because there is no standard linking mechanism between Epub documents.</para>

<para>If external links are made inactive, you should
consider setting the
stylesheet parameter <parameter>olink.doctitle</parameter>
to <literal>yes</literal>. That will append the external document's
title to the link text, making it easier for the user to
locate the other document.</para>

<para>An olink is considered external when the
<parameter>current.docid</parameter> stylesheet parameter
is set to some value, and the olink's <tag>targetdoc</tag>
attribute has a different value. If the two values
match, then the link is considered internal.  If the
<parameter>current.docid</parameter> parameter is blank, or
the <tag>olink</tag> element does not have a <tag>targetdoc</tag> attribute,
then the link is considered to be internal and will become
an active link.</para>

<para>See also <parameter>olink.doctitle</parameter>,
<parameter>prefer.internal.olink</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="olink.debug">
<refmeta>
<refentrytitle>olink.debug</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.debug</refname>
<refpurpose>Turn on debugging messages for olinks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="olink.debug.frag">
&lt;xsl:param name="olink.debug" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then each olink will generate several
messages about how it is being resolved during processing.
This is useful when an olink does not resolve properly
and the standard error messages are not sufficient to
find the problem. 
</para>

<para>You may need to read through the olink XSL templates
to understand the context for some of the debug messages.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="olink.properties">
<refmeta>
<refentrytitle>olink.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.properties</refname>
<refpurpose>Properties associated with the cross-reference 
text of an olink.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="olink.properties.frag">
&lt;xsl:attribute-set name="olink.properties"&gt;
  &lt;xsl:attribute name="show-destination"&gt;replace&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This <literal>attribute set</literal> is applied to the
<literal>fo:basic-link</literal> element of an olink. It is not applied to the
optional page number or optional title of the external
document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="olink.lang.fallback.sequence"> 
<refmeta> 
<refentrytitle>olink.lang.fallback.sequence</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.lang.fallback.sequence</refname> 
<refpurpose>look up translated documents if olink not found?</refpurpose>

</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.lang.fallback.sequence.frag">
&lt;xsl:param name="olink.lang.fallback.sequence"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 

<para>This parameter defines a list of lang values
to search among to resolve olinks.
</para>

<para>Normally an olink tries to resolve to a document in the same
language as the olink itself.  The language of an olink
is determined by its nearest ancestor element with a
<tag class="attribute">lang</tag> attribute, otherwise the
value of the <parameter>l10n.gentext.default.lang</parameter>
parameter.
</para>

<para>An olink database can contain target data for the same
document in multiple languages.  Each set of data has the
same value for the <tag>targetdoc</tag> attribute in
the <tag>document</tag> element in the database, but with a 
different <tag>lang</tag> attribute value.
</para>

<para>When an olink is being resolved, the target is first
sought in the document with the same language as the olink.
If no match is found there, then this parameter is consulted
for additional languages to try.</para>

<para>The <parameter>olink.lang.fallback.sequence</parameter>
must be a whitespace separated list of lang values to
try.  The first one with a match in the olink database is used.
The default value is empty.</para>

<para>For example, a document might be written in German
and contain an olink with
<literal>targetdoc="adminguide"</literal>.
When the document is processed, the processor
first looks for a target dataset in the
olink database starting with:</para>

<literallayout><literal>&lt;document targetdoc="adminguide" lang="de"&gt;</literal>.
</literallayout>

<para>If there is no such element, then the
<parameter>olink.lang.fallback.sequence</parameter> 
parameter is consulted.
If its value is, for example, <quote>fr en</quote>, then the processor next
looks for <literal>targetdoc="adminguide" lang="fr"</literal>, and
then for <literal>targetdoc="adminguide" lang="en"</literal>.
If there is still no match, it looks for
<literal>targetdoc="adminguide"</literal> with no
lang attribute.
</para>

<para>This parameter is useful when a set of documents is only
partially translated, or is in the process of being translated.  
If a target of an olink has not yet been translated, then this
parameter permits the processor to look for the document in
other languages.  This assumes the reader would rather have
a link to a document in a different language than to have
a broken link.
</para>

</refsection> 
</refentry>

<refentry version="5.0" id="insert.olink.page.number">
<refmeta>
<refentrytitle>insert.olink.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.olink.page.number</refname>
<refpurpose>Turns page numbers in olinks on and off</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.olink.page.number.frag">
&lt;xsl:param name="insert.olink.page.number"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines if
cross references made between documents with
<tag>olink</tag> will 
include page number citations.
In most cases this is only applicable to references in printed output.
</para>
<para>The parameter has three possible values.
</para>
<variablelist>
<varlistentry>
<term>no</term>
<listitem><para>No page number references will be generated for olinks.
</para></listitem>
</varlistentry>
<varlistentry>
<term>yes</term>
<listitem><para>Page number references will be generated
for all <tag>olink</tag> references.
The style of page reference may be changed
if an <tag class="attribute">xrefstyle</tag>
attribute is used.
</para></listitem>
</varlistentry>
<varlistentry>
<term>maybe</term>
<listitem><para>Page number references will not be generated
for an <tag>olink</tag> element unless 
it has an
<tag class="attribute">xrefstyle</tag>
attribute whose value specifies a page reference.
</para></listitem>
</varlistentry>
</variablelist>
<para>Olinks that point to targets within the same document
are treated as <tag>xref</tag>s, and controlled by
the <parameter>insert.xref.page.number</parameter> parameter.
</para>

<para>Page number references for olinks to
external documents can only be inserted if the 
information exists in the olink database. 
This means each olink target element 
(<tag>div</tag> or <tag>obj</tag>)
must have a <tag class="attribute">page</tag> attribute
whose value is its page number in the target document.
The XSL stylesheets are not able to extract that information
during processing because pages have not yet been created in
XSLT transformation.  Only the XSL-FO processor knows what
page each element is placed on.
Therefore some postprocessing must take place to populate
page numbers in the olink database.
</para>



</refsection>
</refentry>

<refentry version="5.0" id="insert.olink.pdf.frag">
<refmeta>
<refentrytitle>insert.olink.pdf.frag</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.olink.pdf.frag</refname>
<refpurpose>Add fragment identifiers for links into PDF files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.olink.pdf.frag.frag">
&lt;xsl:param name="insert.olink.pdf.frag" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines whether
the cross reference URIs to PDF documents made with
<tag>olink</tag> will 
include fragment identifiers.
</para>

<para>When forming a URI to link to a PDF document,
a fragment identifier (typically a '#' followed by an
id value) appended to the PDF filename can be used by
the PDF viewer to open
the PDF file to a location within the document instead of
the first page.
However, not all PDF files have id
values embedded in them, and not all PDF viewers can
handle fragment identifiers. 
</para>

<para>If <parameter>insert.olink.pdf.frag</parameter> is set
to a non-zero value, then any olink targeting a
PDF file will have the fragment identifier appended to the URI.
The URI is formed by concatenating the value of the
<parameter>olink.base.uri</parameter> parameter, the
value of the <tag class="attribute">baseuri</tag>
attribute from the <tag class="element">document</tag>
element in the olink database with the matching
<tag class="attribute">targetdoc</tag> value,
and the value of the <tag class="attribute">href</tag>
attribute for the targeted element in the olink database.
The <tag class="attribute">href</tag> attribute
contains the fragment identifier.
</para>

<para>If <parameter>insert.olink.pdf.frag</parameter> is set
to zero (the default value), then 
the <tag class="attribute">href</tag> attribute
from the olink database
is not appended to PDF olinks, so the fragment identifier is left off.
A PDF olink is any olink for which the
<tag class="attribute">baseuri</tag> attribute
from the matching <tag class="element">document</tag>
element in the olink database ends with '.pdf'.
Any other olinks will still have the fragment identifier added.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="prefer.internal.olink">
<refmeta>
<refentrytitle>prefer.internal.olink</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>prefer.internal.olink</refname>
<refpurpose>Prefer a local olink reference to an external reference</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="prefer.internal.olink.frag">
&lt;xsl:param name="prefer.internal.olink" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you are re-using XML content modules in multiple documents,
you may want to redirect some of your olinks.  This parameter
permits you to redirect an olink to the current document.
</para>

<para>For example: you are writing documentation for a  product, 
which includes 3 manuals: a little installation
booklet (booklet.xml), a user 
guide (user.xml), and a reference manual (reference.xml).
All 3 documents begin with the same introduction section (intro.xml) that 
contains a reference to the customization section (custom.xml) which is 
included in both user.xml and reference.xml documents.
</para>

<para>How do you write the link to custom.xml in intro.xml
so that it is interpreted correctly in all 3 documents?</para>
<itemizedlist>
<listitem><para>If you use xref, it will fail in user.xml.</para>
</listitem>
<listitem><para>If you use olink (pointing to reference.xml),
the reference in user.xml  
will point to the customization section of the reference manual, while it is 
actually available in user.xml.</para>
</listitem>
</itemizedlist>

<para>If you set the <parameter>prefer.internal.olink</parameter>
parameter to a non-zero value, then the processor will
first look in the olink database
for the olink's <tag>targetptr</tag> attribute value
in document matching the <parameter>current.docid</parameter>
parameter value.  If it isn't found there, then
it tries the document in the database
with the <tag>targetdoc</tag>
value that matches the olink's <tag>targetdoc</tag>
attribute.
</para>

<para>This feature permits an olink reference to resolve to
the current document if there is an element
with an id matching the olink's <tag>targetptr</tag>
value.  The current document's olink data must be
included in the target database for this to work.</para>

<caution>
<para>There is a potential for incorrect links if
the same <tag>id</tag> attribute value is used for different
content in different documents.
Some of your olinks may be redirected to the current document
when they shouldn't be.  It is not possible to control
individual olink instances.</para>
</caution>

</refsection>
</refentry>

<refentry version="5.0" id="link.mailto.url">
<refmeta>
<refentrytitle>link.mailto.url</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>link.mailto.url</refname>
<refpurpose>Mailto URL for the LINK REL=made HTML HEAD element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="link.mailto.url.frag">
&lt;xsl:param name="link.mailto.url"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If not the empty string, this address will be used for the
rel=made <literal>link</literal> element in the html <literal>head</literal>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="ulink.target">
<refmeta>
<refentrytitle>ulink.target</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.target</refname>
<refpurpose>The HTML anchor target for ULinks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ulink.target.frag">
&lt;xsl:param name="ulink.target"&gt;_top&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>ulink.target</parameter> is non-zero, its value will
be used for the <literal>target</literal> attribute
on anchors generated for <tag>ulink</tag>s.</para>

</refsection>
</refentry>

</reference><reference id="xrefs" xml:base="../html/param.xml"><title>Cross References</title>
<refentry version="5.0" id="collect.xref.targets"> 
<refmeta> 
<refentrytitle>collect.xref.targets</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">only</refmiscinfo>
</refmeta> 
<refnamediv> 
<refname>collect.xref.targets</refname> 
<refpurpose>Controls whether cross reference data is
collected</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="collect.xref.targets.frag">
&lt;xsl:param name="collect.xref.targets"&gt;no&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is  <literal>no</literal>, which means the data file is not generated during processing. The other choices are <literal>yes</literal>, which means the data file is created and the document is processed for output, and <literal>only</literal>, which means the data file is created but the document is not processed for output.
See also <parameter>targets.filename</parameter>.
</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="insert.xref.page.number">
<refmeta>
<refentrytitle>insert.xref.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.xref.page.number</refname>
<refpurpose>Turns page numbers in xrefs on and off</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.xref.page.number.frag">
&lt;xsl:param name="insert.xref.page.number"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines if
cross references (<tag>xref</tag>s) in
printed output will
include page number citations.
It has three possible values.
</para>
<variablelist>
<varlistentry>
<term>no</term>
<listitem><para>No page number references will be generated.
</para></listitem>
</varlistentry>
<varlistentry>
<term>yes</term>
<listitem><para>Page number references will be generated
for all <tag>xref</tag> elements.
The style of page reference may be changed
if an <tag class="attribute">xrefstyle</tag>
attribute is used.
</para></listitem>
</varlistentry>
<varlistentry>
<term>maybe</term>
<listitem><para>Page number references will not be generated
for an <tag>xref</tag> element unless 
it has an
<tag class="attribute">xrefstyle</tag>
attribute whose value specifies a page reference.
</para></listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="use.role.as.xrefstyle">
<refmeta>
<refentrytitle>use.role.as.xrefstyle</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.as.xrefstyle</refname>
<refpurpose>Use <tag class="attribute">role</tag> attribute for
<tag class="attribute">xrefstyle</tag> on <tag>xref</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.role.as.xrefstyle.frag">
&lt;xsl:param name="use.role.as.xrefstyle" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In DocBook documents that conform to a schema older than V4.3, this parameter allows 
<tag class="attribute">role</tag> to serve the purpose of specifying the cross reference style.</para>

<para>If non-zero, the <tag class="attribute">role</tag> attribute on
<tag>xref</tag> will be used to select the cross reference style.
In DocBook V4.3, the <tag class="attribute">xrefstyle</tag> attribute was added for this purpose.
If the <tag class="attribute">xrefstyle</tag> attribute is present, 
<tag class="attribute">role</tag> will be ignored, regardless of the setting
of this parameter.</para>

</refsection>

<refsection><info><title>Example</title></info>

<para>The following small stylesheet shows how to configure the
stylesheets to make use of the cross reference style:</para>

<programlisting>&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"&gt;

&lt;xsl:import href="../xsl/html/docbook.xsl"/&gt;

&lt;xsl:output method="html"/&gt;

&lt;xsl:param name="local.l10n.xml" select="document('')"/&gt;
&lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"&gt;
  &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"&gt;
   &lt;l:context name="xref"&gt;
      &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/&gt;
      &lt;l:template name="chapter" text="Chapter %n"/&gt;
    &lt;/l:context&gt;
  &lt;/l:l10n&gt;
&lt;/l:i18n&gt;

&lt;/xsl:stylesheet&gt;</programlisting>

<para>With this stylesheet, the cross references in the following document:</para>

<programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"&gt;
&lt;book id="book"&gt;&lt;title&gt;Book&lt;/title&gt;

&lt;preface&gt;
&lt;title&gt;Preface&lt;/title&gt;

&lt;para&gt;Normal: &lt;xref linkend="ch1"/&gt;.&lt;/para&gt;
&lt;para&gt;Title: &lt;xref xrefstyle="title" linkend="ch1"/&gt;.&lt;/para&gt;

&lt;/preface&gt;

&lt;chapter id="ch1"&gt;
&lt;title&gt;First Chapter&lt;/title&gt;

&lt;para&gt;Irrelevant.&lt;/para&gt;

&lt;/chapter&gt;
&lt;/book&gt;</programlisting>

<para>will appear as:</para>

<informalexample>
<para>Normal: Chapter 1.</para>
<para>Title: Chapter 1, <emphasis>First Chapter</emphasis>.</para>
</informalexample>
</refsection>

</refentry>

<refentry version="5.0" id="xref.with.number.and.title">
<refmeta>
<refentrytitle>xref.with.number.and.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.with.number.and.title</refname>
<refpurpose>Use number and title in cross references</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.with.number.and.title.frag">
&lt;xsl:param name="xref.with.number.and.title" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A cross reference may include the number (for example, the number of
an example or figure) and the <tag>title</tag> which is a required child of some
targets. This parameter inserts both the relevant number as well as
the title into the link. </para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.label-page.separator">
<refmeta>
<refentrytitle>xref.label-page.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.label-page.separator</refname>
<refpurpose>Punctuation or space separating label from page number in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.label-page.separator.frag">&lt;xsl:param name="xref.label-page.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both label and page
but no title,
then the value of this parameter is inserted between
label and page number in the output.  
If a title is included, then other separators are used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.label-title.separator">
<refmeta>
<refentrytitle>xref.label-title.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.label-title.separator</refname>
<refpurpose>Punctuation or space separating label from title in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.label-title.separator.frag">&lt;xsl:param name="xref.label-title.separator"&gt;: &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both label and title,
then the value of this parameter is inserted between
label and title in the output.  
</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.title-page.separator">
<refmeta>
<refentrytitle>xref.title-page.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.title-page.separator</refname>
<refpurpose>Punctuation or space separating title from page number in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.title-page.separator.frag">&lt;xsl:param name="xref.title-page.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both title and page number,
then the value of this parameter is inserted between
title and page number in the output.  
</para>

</refsection>
</refentry>

</reference><reference id="lists" xml:base="../html/param.xml"><title>Lists</title>
<refentry version="5.0" id="segmentedlist.as.table">
<refmeta>
<refentrytitle>segmentedlist.as.table</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>segmentedlist.as.table</refname>
<refpurpose>Format segmented lists as tables?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="segmentedlist.as.table.frag">
&lt;xsl:param name="segmentedlist.as.table" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>segmentedlist</tag>s will be formatted as
tables.</para>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.as.table">
<refmeta>
<refentrytitle>variablelist.as.table</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.as.table</refname>
<refpurpose>Format <tag>variablelist</tag>s as tables?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.as.table.frag">
&lt;xsl:param name="variablelist.as.table" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>variablelist</tag>s will be formatted as
tables. A processing instruction exists to specify a particular width for the 
column containing the <tag>term</tag>s:   
<tag class="xmlpi">dbhtml term-width=".25in"</tag></para>

<para>You can override this setting with a processing instruction as the
child of <tag>variablelist</tag>: <tag class="xmlpi">dbhtml
list-presentation="table"</tag> or <tag class="xmlpi">dbhtml
list-presentation="list"</tag>.</para>

<para>This parameter only applies to the HTML transformations. In the
FO case, proper list markup is robust enough to handle the formatting.
But see also <parameter>variablelist.as.blocks</parameter>.</para>

<programlisting>  &lt;variablelist&gt;
        &lt;?dbhtml list-presentation="table"?&gt;
        &lt;?dbhtml term-width="1.5in"?&gt;
        &lt;?dbfo list-presentation="list"?&gt;
        &lt;?dbfo term-width="1in"?&gt;
        &lt;varlistentry&gt;
          &lt;term&gt;list&lt;/term&gt;
          &lt;listitem&gt;
                &lt;para&gt;
                  Formatted as a table even if variablelist.as.table is set to 0.
                &lt;/para&gt;
          &lt;/listitem&gt;
        &lt;/varlistentry&gt;
  &lt;/variablelist&gt;</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.term.separator">
<refmeta>
<refentrytitle>variablelist.term.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.term.separator</refname>
<refpurpose>Text to separate <tag>term</tag>s within a multi-term
<tag>varlistentry</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.term.separator.frag">
&lt;xsl:param name="variablelist.term.separator"&gt;, &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When a <tag>varlistentry</tag> contains multiple <tag>term</tag>
elements, the string specified in the value of the
<parameter>variablelist.term.separator</parameter> parameter is placed
after each <tag>term</tag> except the last.</para>

<note>
  <para>To generate a line break between multiple <tag>term</tag>s in
  a <tag>varlistentry</tag>, set a non-zero value for the
  <parameter>variablelist.term.break.after</parameter> parameter. If
  you do so, you may also want to set the value of the
  <parameter>variablelist.term.separator</parameter> parameter to an
  empty string (to suppress rendering of the default comma and space
  after each <tag>term</tag>).</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.term.break.after">
<refmeta>
<refentrytitle>variablelist.term.break.after</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.term.break.after</refname>
<refpurpose>Generate line break after each <tag>term</tag> within a
multi-term <tag>varlistentry</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.term.break.after.frag">
&lt;xsl:param name="variablelist.term.break.after"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set a non-zero value for the
<parameter>variablelist.term.break.after</parameter> parameter to
generate a line break between <tag>term</tag>s in a
multi-term <tag>varlistentry</tag>.</para>

<note>
<para>If you set a non-zero value for
<parameter>variablelist.term.break.after</parameter>, you may also
want to set the value of the
<parameter>variablelist.term.separator</parameter> parameter to an
empty string (to suppress rendering of the default comma and space
after each <tag>term</tag>).</para>
</note>

</refsection>
</refentry>

</reference><reference id="biblio" xml:base="../html/param.xml"><title>Bibliography</title>
<refentry version="5.0" id="bibliography.style">
<refmeta>
<refentrytitle>bibliography.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">normal</refmiscinfo>
<refmiscinfo class="other" otherclass="value">iso690</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.style</refname>
<refpurpose>Style used for formatting of biblioentries.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.style.frag">
&lt;xsl:param name="bibliography.style"&gt;normal&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Currently only <literal>normal</literal> and
<literal>iso690</literal> styles are supported.</para>

<para>In order to use ISO690 style to the full extent you might need
to use additional markup described on <link xlink:href="http://wiki.docbook.org/topic/ISO690Bibliography">the
following WiKi page</link>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="biblioentry.item.separator">
<refmeta>
<refentrytitle>biblioentry.item.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>biblioentry.item.separator</refname>
<refpurpose>Text to separate bibliography entries</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="biblioentry.item.separator.frag">&lt;xsl:param name="biblioentry.item.separator"&gt;. &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Text to separate bibliography entries
</para>

</refsection>
</refentry>

<refentry version="5.0" id="bibliography.collection">
<refmeta>
<refentrytitle>bibliography.collection</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.collection</refname>
<refpurpose>Name of the bibliography collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.collection.frag">
&lt;xsl:param name="bibliography.collection"&gt;http://docbook.sourceforge.net/release/bibliography/bibliography.xml&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Maintaining bibliography entries across a set of documents is tedious, time
consuming, and error prone. It makes much more sense, usually, to store all of
the bibliography entries in a single place and simply <quote>extract</quote>
the ones you need in each document.</para>

<para>That's the purpose of the
<parameter>bibliography.collection</parameter> parameter. To setup a global
bibliography <quote>database</quote>, follow these steps:</para>

<para>First, create a stand-alone bibliography document that contains all of
the documents that you wish to reference. Make sure that each bibliography
entry (whether you use <tag>biblioentry</tag> or <tag>bibliomixed</tag>)
has an ID.</para>

<para>My global bibliography, <filename>~/bibliography.xml</filename> begins
like this:</para>

<informalexample>
<programlisting>&lt;!DOCTYPE bibliography
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;bibliography&gt;&lt;title&gt;References&lt;/title&gt;

&lt;bibliomixed id="xml-rec"&gt;&lt;abbrev&gt;XML 1.0&lt;/abbrev&gt;Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml"&gt;Extensible Markup
Language (XML) 1.0 Second Edition&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 2000.
&lt;/bibliomixed&gt;

&lt;bibliomixed id="xml-names"&gt;&lt;abbrev&gt;Namespaces&lt;/abbrev&gt;Tim Bray,
Dave Hollander,
and Andrew Layman, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces in
XML&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 1999.
&lt;/bibliomixed&gt;

&lt;!-- ... --&gt;
&lt;/bibliography&gt;
</programlisting>
</informalexample>

<para>When you create a bibliography in your document, simply
provide <emphasis>empty</emphasis> <tag>bibliomixed</tag>
entries for each document that you wish to cite. Make sure that these
elements have the same ID as the corresponding <quote>real</quote>
entry in your global bibliography.</para>

<para>For example:</para>

<informalexample>
<programlisting>&lt;bibliography&gt;&lt;title&gt;Bibliography&lt;/title&gt;

&lt;bibliomixed id="xml-rec"/&gt;
&lt;bibliomixed id="xml-names"/&gt;
&lt;bibliomixed id="DKnuth86"&gt;Donald E. Knuth. &lt;citetitle&gt;Computers and
Typesetting: Volume B, TeX: The Program&lt;/citetitle&gt;. Addison-Wesley,
1986.  ISBN 0-201-13437-3.
&lt;/bibliomixed&gt;
&lt;bibliomixed id="relaxng"/&gt;

&lt;/bibliography&gt;</programlisting>
</informalexample>

<para>Note that it's perfectly acceptable to mix entries from your
global bibliography with <quote>normal</quote> entries. You can use
<tag>xref</tag> or other elements to cross-reference your
bibliography entries in exactly the same way you do now.</para>

<para>Finally, when you are ready to format your document, simply set the
<parameter>bibliography.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global bibliography.</para>

<para>A relative path in the parameter is interpreted in one
of two ways:</para>
<orderedlist numeration="loweralpha">
  <listitem>
    <para>If your document contains no links to empty bibliographic elements,
    then the path is relative to the file containing
    the first <tag>bibliomixed</tag> element in the document.</para>
  </listitem>
  <listitem>
    <para>If your document does contain links to empty bibliographic elements,
    then the path is relative to the file containing
    the first such link element in the document.</para>
  </listitem>
</orderedlist>
<para>Once the collection file is opened by the first instance described
above, it stays open for the current document
and the relative path is not reinterpreted again.</para>

<para>The stylesheets will format the bibliography in your document as if
all of the entries referenced appeared there literally.</para>

</refsection>
</refentry>

<refentry version="5.0" id="bibliography.numbered">
<refmeta>
<refentrytitle>bibliography.numbered</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.numbered</refname>
<refpurpose>Should bibliography entries be numbered?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.numbered.frag">
&lt;xsl:param name="bibliography.numbered" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero bibliography entries will be numbered</para>

</refsection>
</refentry>

</reference><reference id="glossary" xml:base="../html/param.xml"><title>Glossary</title>
<refentry version="5.0" id="glossterm.auto.link">
<refmeta>
<refentrytitle>glossterm.auto.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.auto.link</refname>
<refpurpose>Generate links from glossterm to glossentry automatically?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.auto.link.frag">
&lt;xsl:param name="glossterm.auto.link" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, links from inline <tag>glossterm</tag>s to the corresponding 
<tag>glossentry</tag> elements in a <tag>glossary</tag> or <tag>glosslist</tag> 
will be automatically generated. This is useful when your glossterms are consistent 
and you don't want to add links manually.</para>

<para>The automatic link generation feature is not used on <tag>glossterm</tag> elements
that have a <tag class="attribute">linkend</tag> attribute.</para>

</refsection>
</refentry>

<refentry version="5.0" id="firstterm.only.link">
<refmeta>
<refentrytitle>firstterm.only.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>firstterm.only.link</refname>
<refpurpose>Does automatic glossterm linking only apply to firstterms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="firstterm.only.link.frag">
&lt;xsl:param name="firstterm.only.link" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, only <tag>firstterm</tag>s will be automatically linked
to the glossary. If glossary linking is not enabled, this parameter
has no effect.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossary.collection">
<refmeta>
<refentrytitle>glossary.collection</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.collection</refname>
<refpurpose>Name of the glossary collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossary.collection.frag">
&lt;xsl:param name="glossary.collection"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Glossaries maintained independently across a set of documents
are likely to become inconsistent unless considerable effort is
expended to keep them in sync. It makes much more sense, usually, to
store all of the glossary entries in a single place and simply
<quote>extract</quote> the ones you need in each document.</para>

<para>That's the purpose of the
<parameter>glossary.collection</parameter> parameter. To setup a global
glossary <quote>database</quote>, follow these steps:</para>

<refsection><info><title>Setting Up the Glossary Database</title></info>

<para>First, create a stand-alone glossary document that contains all of
the entries that you wish to reference. Make sure that each glossary
entry has an ID.</para>

<para>Here's an example glossary:</para>

<informalexample>
<programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE glossary
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;glossary&gt;
&lt;glossaryinfo&gt;
&lt;editor&gt;&lt;firstname&gt;Eric&lt;/firstname&gt;&lt;surname&gt;Raymond&lt;/surname&gt;&lt;/editor&gt;
&lt;title&gt;Jargon File 4.2.3 (abridged)&lt;/title&gt;
&lt;releaseinfo&gt;Just some test data&lt;/releaseinfo&gt;
&lt;/glossaryinfo&gt;

&lt;glossdiv&gt;&lt;title&gt;0&lt;/title&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;0&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;Numeric zero, as opposed to the letter `O' (the 15th letter of
the English alphabet). In their unmodified forms they look a lot
alike, and various kluges invented to make them visually distinct have
compounded the confusion. If your zero is center-dotted and letter-O
is not, or if letter-O looks almost rectangular but zero looks more
like an American football stood on end (or the reverse), you're
probably looking at a modern character display (though the dotted zero
seems to have originated as an option on IBM 3270 controllers). If
your zero is slashed but letter-O is not, you're probably looking at
an old-style ASCII graphic set descended from the default typewheel on
the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter,
curse this arrangement). (Interestingly, the slashed zero long
predates computers; Florian Cajori's monumental "A History of
Mathematical Notations" notes that it was used in the twelfth and
thirteenth centuries.) If letter-O has a slash across it and the zero
does not, your display is tuned for a very old convention used at IBM
and a few other early mainframe makers (Scandinavians curse &lt;emphasis&gt;this&lt;/emphasis&gt;
arrangement even more, because it means two of their letters collide).
Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis&gt;reversed&lt;/emphasis&gt;
slash. Old CDC computers rendered letter O as an unbroken oval and 0
as an oval broken at upper right and lower left. And yet another
convention common on early line printers left zero unornamented but
added a tail or hook to the letter-O so that it resembled an inverted
Q or cursive capital letter-O (this was endorsed by a draft ANSI
standard for how to draw ASCII characters, but the final standard
changed the distinguisher to a tick-mark in the upper-left corner).
Are we sufficiently confused yet?&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;1TBS&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para role="accidence"&gt;
&lt;phrase role="pronounce"&gt;&lt;/phrase&gt;
&lt;phrase role="partsofspeach"&gt;n&lt;/phrase&gt;
&lt;/para&gt;
&lt;para&gt;The "One True Brace Style"&lt;/para&gt;
&lt;glossseealso&gt;indent style&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;!-- ... --&gt;

&lt;/glossdiv&gt;

&lt;!-- ... --&gt;

&lt;/glossary&gt;</programlisting>
</informalexample>

</refsection>

<refsection><info><title>Marking Up Glossary Terms</title></info>

<para>That takes care of the glossary database, now you have to get the entries
into your document. Unlike bibliography entries, which can be empty, creating
<quote>placeholder</quote> glossary entries would be very tedious. So instead,
support for <parameter>glossary.collection</parameter> relies on implicit linking.</para>

<para>In your source document, simply use <tag>firstterm</tag> and
<tag>glossterm</tag> to identify the terms you wish to have included
in the glossary. The stylesheets assume that you will either set the
<tag class="attribute">baseform</tag> attribute correctly, or that the
content of the element exactly matches a term in your glossary.</para>

<para>If you're using a <parameter>glossary.collection</parameter>, don't
make explicit links on the terms in your document.</para>

<para>So, in your document, you might write things like this:</para>

<informalexample>
<programlisting>&lt;para&gt;This is dummy text, without any real meaning.
The point is simply to reference glossary terms like &lt;glossterm&gt;0&lt;/glossterm&gt;
and the &lt;firstterm baseform="1TBS"&gt;One True Brace Style (1TBS)&lt;/firstterm&gt;.
The &lt;glossterm&gt;1TBS&lt;/glossterm&gt;, as you can probably imagine, is a nearly
religious issue.&lt;/para&gt;</programlisting>
</informalexample>

<para>If you set the <parameter>firstterm.only.link</parameter> parameter,
only the terms marked with <tag>firstterm</tag> will be links.
Otherwise, all the terms will be linked.</para>

</refsection>

<refsection><info><title>Marking Up the Glossary</title></info>

<para>The glossary itself has to be identified for the stylesheets. For lack
of a better choice, the <tag class="attribute">role</tag> is used.
To identify the glossary as the target for automatic processing, set
the role to <quote><literal>auto</literal></quote>. The title of this
glossary (and any other information from the <tag>glossaryinfo</tag>
that's rendered by your stylesheet) will be displayed, but the entries will
come from the database.
</para>

<para>Unfortunately, the glossary can't be empty, so you must put in
at least one <tag>glossentry</tag>. The content of this entry
is irrelevant, it will not be rendered:</para>

<informalexample>
<programlisting>&lt;glossary role="auto"&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>

<para>What about glossary divisions? If your glossary database has glossary
divisions <emphasis>and</emphasis> your automatic glossary contains at least
one <tag>glossdiv</tag>, the automic glossary will have divisions.
If the <tag>glossdiv</tag> is missing from either location, no divisions
will be rendered.</para>

<para>Glossary entries (and divisions, if appropriate) in the glossary will
occur in precisely the order they occur in your database.</para>

</refsection>

<refsection><info><title>Formatting the Document</title></info>

<para>Finally, when you are ready to format your document, simply set the
<parameter>glossary.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global glossary.</para>

<para>A relative path in the parameter is interpreted in one
of two ways:</para>
<orderedlist numeration="loweralpha">
  <listitem>
    <para>If the parameter <literal>glossterm.auto.link</literal>
    is set to zero, then the path is relative to the file containing
    the empty <tag>glossary</tag> element in the document.</para>
  </listitem>
  <listitem>
    <para>If the parameter <literal>glossterm.auto.link</literal>
    is set to non-zero, then the path is relative to the file containing
    the first inline <tag>glossterm</tag> or
    <tag>firstterm</tag> in the document to be linked.</para>
  </listitem>
</orderedlist>
<para>Once the collection file is opened by the first instance described
above, it stays open for the current document
and the relative path is not reinterpreted again.</para>

<para>The stylesheets will format the glossary in your document as if
all of the entries implicilty referenced appeared there literally.</para>
</refsection>

<refsection><info><title>Limitations</title></info>

<para>Glossary cross-references <emphasis>within the glossary</emphasis> are
not supported. For example, this <emphasis>will not</emphasis> work:</para>

<informalexample>
<programlisting>&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>

<para>If you put glossary cross-references in your glossary that way,
you'll get the cryptic error: <computeroutput>Warning:
glossary.collection specified, but there are 0 automatic
glossaries</computeroutput>.</para>

<para>Instead, you must do two things:</para>

<orderedlist>
<listitem>
<para>Markup your glossary using <tag>glossseealso</tag>:</para>

<informalexample>
<programlisting>&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>
</listitem>

<listitem>
<para>Make sure there is at least one <tag>glossterm</tag> reference to
<glossterm>gloss-2</glossterm> <emphasis>in your document</emphasis>. The
easiest way to do that is probably within a <tag>remark</tag> in your
automatic glossary:</para>

<informalexample>
<programlisting>&lt;glossary role="auto"&gt;
&lt;remark&gt;Make sure there's a reference to &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/remark&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>
</listitem>
</orderedlist>
</refsection>

</refsection>
</refentry>

<refentry version="5.0" id="glossary.sort">
<refmeta>
<refentrytitle>glossary.sort</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.sort</refname>
<refpurpose>Sort glossentry elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossary.sort.frag">
&lt;xsl:param name="glossary.sort" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then the glossentry elements within a
glossary, glossdiv, or glosslist are sorted on the glossterm, using
the current lang setting.  If zero (the default), then
glossentry elements are not sorted and are presented
in document order.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossentry.show.acronym">
<refmeta>
<refentrytitle>glossentry.show.acronym</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">no</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">primary</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossentry.show.acronym</refname>
<refpurpose>Display <tag>glossentry</tag> acronyms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossentry.show.acronym.frag">
&lt;xsl:param name="glossentry.show.acronym"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A setting of <quote>yes</quote> means they should be displayed;
<quote>no</quote> means they shouldn't. If <quote>primary</quote> is used,
then they are shown as the primary text for the entry.</para>

<note>
<para>This setting controls both <tag>acronym</tag> and
<tag>abbrev</tag> elements in the <tag>glossentry</tag>.</para>
</note>

</refsection>
</refentry>

</reference><reference id="misc" xml:base="../html/param.xml"><title>Miscellaneous</title>
<refentry version="5.0" id="formal.procedures">
<refmeta>
<refentrytitle>formal.procedures</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.procedures</refname>
<refpurpose>Selects formal or informal procedures</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.procedures.frag">
&lt;xsl:param name="formal.procedures" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Formal procedures are numbered and always have a title.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="formal.title.placement">
<refmeta>
<refentrytitle>formal.title.placement</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.title.placement</refname>
<refpurpose>Specifies where formal object titles should occur</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.title.placement.frag">
&lt;xsl:param name="formal.title.placement"&gt;
figure before
example before
equation before
table before
procedure before
task before
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies where formal object titles should occur. For each formal object
type (<tag>figure</tag>,
<tag>example</tag>,
<tag>equation</tag>,
<tag>table</tag>, and <tag>procedure</tag>)
you can specify either the keyword
<quote><literal>before</literal></quote> or
<quote><literal>after</literal></quote>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="runinhead.default.title.end.punct">
<refmeta>
<refentrytitle>runinhead.default.title.end.punct</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.default.title.end.punct</refname>
<refpurpose>Default punctuation character on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="runinhead.default.title.end.punct.frag">&lt;xsl:param name="runinhead.default.title.end.punct"&gt;.&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, For a <tag>formalpara</tag>, use the specified
string as the separator between the title and following text. The period is the default value.</para>

</refsection>
</refentry>

<refentry version="5.0" id="runinhead.title.end.punct">
<refmeta>
<refentrytitle>runinhead.title.end.punct</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.title.end.punct</refname>
<refpurpose>Characters that count as punctuation on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="runinhead.title.end.punct.frag">
&lt;xsl:param name="runinhead.title.end.punct"&gt;.!?:&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specify which characters are to be counted as punctuation. These
characters are checked for a match with the last character of the
title. If no match is found, the
<parameter>runinhead.default.title.end.punct</parameter> contents are
inserted. This is to avoid duplicated punctuation in the output.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="show.comments">
<refmeta>
<refentrytitle>show.comments</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>show.comments</refname>
<refpurpose>Display <tag>remark</tag> elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="show.comments.frag">
&lt;xsl:param name="show.comments" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, comments will be displayed, otherwise they
are suppressed.  Comments here refers to the <tag>remark</tag> element
(which was called <literal>comment</literal> prior to DocBook
4.0), not XML comments (&lt;-- like this --&gt;) which are
unavailable.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="show.revisionflag">
<refmeta>
<refentrytitle>show.revisionflag</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>show.revisionflag</refname>
<refpurpose>Enable decoration of elements that have a revisionflag</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="show.revisionflag.frag">
&lt;xsl:param name="show.revisionflag" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If <parameter>show.revisionflag</parameter> is turned on, then the stylesheets
may produce additional markup designed to allow a CSS stylesheet to
highlight elements that have specific revisionflag settings.</para>

<para>The markup inserted will be usually be either a &lt;span&gt; or
&lt;div&gt; with an appropriate <literal>class</literal>
attribute. (The value of the class attribute will be the same as the
value of the revisionflag attribute). In some contexts, for example
tables, where extra markup would be structurally illegal, the class
attribute will be added to the appropriate container element.</para>

<para>In general, the stylesheets only test for revisionflag in contexts
where an importing stylesheet would have to redefine whole templates.
Most of the revisionflag processing is expected to be done by another
stylesheet, for example <filename>changebars.xsl</filename>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="shade.verbatim">
<refmeta>
<refentrytitle>shade.verbatim</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>shade.verbatim</refname>
<refpurpose>Should verbatim environments be shaded?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="shade.verbatim.frag">&lt;xsl:param name="shade.verbatim" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In the FO stylesheet, if this parameter is non-zero then the
<property>shade.verbatim.style</property> properties will be applied
to verbatim environments.</para>

<para>In the HTML stylesheet, this parameter is now deprecated. Use
CSS instead.</para>

</refsection>
</refentry>

<refentry version="5.0" id="shade.verbatim.style">
<refmeta>
<refentrytitle>shade.verbatim.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>shade.verbatim.style</refname>
<refpurpose>Properties that specify the style of shaded verbatim listings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="shade.verbatim.style.frag">
&lt;xsl:attribute-set name="shade.verbatim.style"&gt;
  &lt;xsl:attribute name="border"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="bgcolor"&gt;#E0E0E0&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties that specify the style of shaded verbatim listings. The
parameters specified (the border and background color) are added to
the styling of the xsl-fo output. A border might be specified as "thin
black solid" for example. See <link xlink:href="http://www.w3.org/TR/2004/WD-xsl11-20041216/#border">xsl-fo</link></para>

</refsection>
</refentry>

<refentry version="5.0" id="punct.honorific">
<refmeta>
<refentrytitle>punct.honorific</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>punct.honorific</refname>
<refpurpose>Punctuation after an honorific in a personal name.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="punct.honorific.frag">
&lt;xsl:param name="punct.honorific"&gt;.&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the punctuation that should be added after an
honorific in a personal name.</para>

</refsection>
</refentry>

<refentry version="5.0" id="tex.math.in.alt">
<refmeta>
<refentrytitle>tex.math.in.alt</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">plain</refmiscinfo>
<refmiscinfo class="other" otherclass="value">latex</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.in.alt</refname>
<refpurpose>TeX notation used for equations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="tex.math.in.alt.frag">
&lt;xsl:param name="tex.math.in.alt"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want type math directly in TeX notation in equations,
this parameter specifies notation used. Currently are supported two
values -- <literal>plain</literal> and <literal>latex</literal>. Empty
value means that you are not using TeX math at all.</para>

<para>Preferred way for including TeX alternative of math is inside of
<tag>textobject</tag> element. Eg.:</para>

<programlisting>&lt;inlineequation&gt;
&lt;inlinemediaobject&gt;
&lt;imageobject&gt;
&lt;imagedata fileref="eq1.gif"/&gt;
&lt;/imageobject&gt;
&lt;textobject&gt;&lt;phrase&gt;E=mc squared&lt;/phrase&gt;&lt;/textobject&gt;
&lt;textobject role="tex"&gt;&lt;phrase&gt;E=mc^2&lt;/phrase&gt;&lt;/textobject&gt;
&lt;/inlinemediaobject&gt;
&lt;/inlineequation&gt;</programlisting>

<para>If you are using <tag>graphic</tag> element, you can
store TeX inside <tag>alt</tag> element:</para>

<programlisting>&lt;inlineequation&gt;
&lt;alt role="tex"&gt;a^2+b^2=c^2&lt;/alt&gt;
&lt;graphic fileref="a2b2c2.gif"/&gt;  
&lt;/inlineequation&gt;</programlisting>

<para>If you want use this feature, you should process your FO with
PassiveTeX, which only supports TeX math notation. When calling
stylsheet, don't forget to specify also
passivetex.extensions=1.</para>

<para>If you want equations in HTML, just process generated file
<filename>tex-math-equations.tex</filename> by TeX or LaTeX. Then run
dvi2bitmap program on result DVI file. You will get images for
equations in your document.</para>

<warning>
  <para>This feature is useful for print/PDF output only if you
    use the obsolete and now unsupported PassiveTeX XSL-FO
    engine.</para>
</warning>

</refsection>

<refsection><info><title>Related Parameters</title></info>
  <para><parameter>tex.math.delims</parameter>,
    <parameter>passivetex.extensions</parameter>,
    <parameter>tex.math.file</parameter></para>
</refsection>

</refentry>

<refentry version="5.0" id="tex.math.file">
<refmeta>
<refentrytitle>tex.math.file</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.file</refname>
<refpurpose>Name of temporary file for generating images from equations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="tex.math.file.frag">
&lt;xsl:param name="tex.math.file"&gt;tex-math-equations.tex&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Name of auxiliary file for TeX equations. This file can be
processed by dvi2bitmap to get bitmap versions of equations for HTML
output.</para>

</refsection>
<refsection><info><title>Related Parameters</title></info>
  <para><parameter>tex.math.in.alt</parameter>,
    <parameter>tex.math.delims</parameter>,
  </para>
</refsection>
<refsection><info><title>More information</title></info>
  <para>For how-to documentation on embedding TeX equations and
    generating output from them, see
    <link role="tcg" xlink:href="TexMath.html">DBTeXMath</link>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="tex.math.delims">
<refmeta>
<refentrytitle>tex.math.delims</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.delims</refname>
<refpurpose>Should equations output for processing by TeX be
surrounded by math mode delimiters?</refpurpose>
</refnamediv> 

<refsynopsisdiv>
<programlisting id="tex.math.delims.frag">
&lt;xsl:param name="tex.math.delims" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>For compatibility with DSSSL based DBTeXMath from Allin Cottrell
you should set this parameter to 0.</para>

<warning>
  <para>This feature is useful for print/PDF output only if you
  use the obsolete and now unsupported PassiveTeX XSL-FO
  engine.</para>
</warning>

</refsection>
<refsection><info><title>Related Parameters</title></info>
  <para><parameter>tex.math.in.alt</parameter>,
    <parameter>passivetex.extensions</parameter></para>
</refsection>

<refsection><info><title>See Also</title></info>
  <para>You can also use the <tag class="xmlpi">dbtex delims</tag> processing
    instruction to control whether delimiters are output.</para>
</refsection>


</refentry>

<refentry version="5.0" id="pixels.per.inch">
<refmeta>
<refentrytitle>pixels.per.inch</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>pixels.per.inch</refname>
<refpurpose>How many pixels are there per inch?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="pixels.per.inch.frag">
&lt;xsl:param name="pixels.per.inch"&gt;90&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When lengths are converted to pixels, this value is used to
determine the size of a pixel. The default value is taken from the
<link xlink:href="http://www.w3.org/TR/2004/WD-xsl11-20041216/">XSL
Recommendation</link>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="points.per.em">
<refmeta>
<refentrytitle>points.per.em</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>points.per.em</refname>
<refpurpose>Specify the nominal size of an em-space in points</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="points.per.em.frag">
&lt;xsl:param name="points.per.em"&gt;10&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The fixed value used for calculations based upon the size of a
character. The assumption made is that ten point font is in use. This
assumption may not be valid.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.svg">
<refmeta>
<refentrytitle>use.svg</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.svg</refname>
<refpurpose>Allow SVG in the result tree?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.svg.frag">
&lt;xsl:param name="use.svg" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, SVG will be considered an acceptable image format. SVG
is passed through to the result tree, so correct rendering of the resulting
diagram depends on the formatter (FO processor or web browser) that is used
to process the output from the stylesheet.</para>

</refsection>
</refentry>

<refentry version="5.0" id="menuchoice.separator">
<refmeta>
<refentrytitle>menuchoice.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>menuchoice.separator</refname>
<refpurpose>Separator between items of a <tag>menuchoice</tag>
other than <tag>guimenuitem</tag> and
<tag>guisubmenu</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="menuchoice.separator.frag">
&lt;xsl:param name="menuchoice.separator"&gt;+&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator used to connect items of a <tag>menuchoice</tag> other
than <tag>guimenuitem</tag> and <tag>guisubmenu</tag>. The latter
elements are linked with <parameter>menuchoice.menu.separator</parameter>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="menuchoice.menu.separator">
<refmeta>
<refentrytitle>menuchoice.menu.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>menuchoice.menu.separator</refname>
<refpurpose>Separator between items of a <tag>menuchoice</tag>
with <tag>guimenuitem</tag> or
<tag>guisubmenu</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="menuchoice.menu.separator.frag">
&lt;xsl:param name="menuchoice.menu.separator"&gt; &#8594; &lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator used to connect items of a <tag>menuchoice</tag> with
<tag>guimenuitem</tag> or <tag>guisubmenu</tag>. Other elements
are linked with <parameter>menuchoice.separator</parameter>.
</para>
<para>The default value is &amp;#x2192;, which is the
&amp;rarr; (right arrow) character entity.  
The current FOP (0.20.5) requires setting the font-family
explicitly.
</para>
<para>The default value also includes spaces around the arrow,
which will allow a line to break.  Replace the spaces with
&amp;#xA0; (nonbreaking space) if you don't want those
spaces to break.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.float.class">
<refmeta>
<refentrytitle>default.float.class</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.float.class</refname>
<refpurpose>Specifies the default float class</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.float.class.frag">
&lt;xsl:param name="default.float.class"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($stylesheet.result.type,'html')"&gt;left&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;before&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the direction in which a float should be placed. for
xsl-fo this is before, for html it is left. For Western texts, the
before direction is the top of the page.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.number.format">
<refmeta>
<refentrytitle>footnote.number.format</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.number.format.frag">
&lt;xsl:param name="footnote.number.format"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A).</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.footnote.number.format">
<refmeta>
<refentrytitle>table.footnote.number.format</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers in tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.footnote.number.format.frag">
&lt;xsl:param name="table.footnote.number.format"&gt;a&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>table.footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A) in tables.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.number.symbols">
<refmeta>
<refentrytitle>footnote.number.symbols</refentrytitle>
<refmiscinfo class="other" otherclass="datatype"/>
</refmeta>
<refnamediv>
<refname>footnote.number.symbols</refname>
<refpurpose>Special characters to use as footnote markers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.number.symbols.frag">
&lt;xsl:param name="footnote.number.symbols"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>footnote.number.symbols</parameter> is not the empty string,
footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>&#8224;</quote>, <quote>&#8225;</quote>,
<quote>&#9674;</quote>, and <quote>&#10016;</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter>footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.footnote.number.symbols">
<refmeta>
<refentrytitle>table.footnote.number.symbols</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.number.symbols</refname>
<refpurpose>Special characters to use a footnote markers in tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.footnote.number.symbols.frag">
&lt;xsl:param name="table.footnote.number.symbols"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>table.footnote.number.symbols</parameter> is not the empty string,
table footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>&#8224;</quote>, <quote>&#8225;</quote>,
<quote>&#9674;</quote>, and <quote>&#10016;</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter>table.footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="highlight.source">
<refmeta>
<refentrytitle>highlight.source</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.source</refname>
<refpurpose>Should the content of <tag>programlisting</tag>
be syntactically highlighted?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.source.frag">
&lt;xsl:param name="highlight.source" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When this parameter is non-zero, the stylesheets will try to do syntax highlighting of the 
content of <tag>programlisting</tag> elements. You specify the language for each programlisting 
by using the <tag class="attribute">language</tag> attribute. The <parameter>highlight.default.language</parameter> 
parameter can be used to specify the language for programlistings without a <tag class="attribute">language</tag> 
attribute. Syntax highlighting also works for <tag>screen</tag> and <tag>synopsis</tag> elements.</para>

<para>The actual highlighting work is done by the XSLTHL extension module. This is an external Java library that has to be 
downloaded separately (see below).</para>

<itemizedlist>
<para>In order to use this extension, you must</para> 

<listitem><para>add <filename>xslthl-2.x.x.jar</filename> to your Java classpath. The latest version is available
from <link xlink:href="http://sourceforge.net/projects/xslthl">the XSLT syntax highlighting project</link> 
at SourceForge.</para>
</listitem>
<listitem>
<para>use a customization layer in which you import one of the following stylesheet modules: 
<itemizedlist>
  <listitem>
    <para><filename>html/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>xhtml/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>xhtml-1_1/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>fo/highlight.xsl</filename>
    </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem><para>let either the <literal>xslthl.config</literal> Java system property or the
<parameter>highlight.xslthl.config</parameter> parameter point to the configuration file for syntax 
highlighting (using URL syntax). DocBook XSL comes with a ready-to-use configuration file, 
<filename>highlighting/xslthl-config.xml</filename>.</para>
</listitem>
</itemizedlist>

<para>The extension works with Saxon 6.5.x and Xalan-J. (Saxon 8.5 or later is also supported, but since it is 
an XSLT 2.0 processor it is not guaranteed to work with DocBook XSL in all circumstances.)</para>

<para>The following is an example of a Saxon 6 command adapted for syntax highlighting, to be used on Windows:</para>

<informalexample>
<para><command>java -cp c:/Java/saxon.jar;c:/Java/xslthl-2.0.1.jar 
-Dxslthl.config=file:///c:/docbook-xsl/highlighting/xslthl-config.xml com.icl.saxon.StyleSheet 
-o test.html test.xml myhtml.xsl</command></para>
</informalexample>

</refsection>
</refentry>

<refentry version="5.0" id="highlight.xslthl.config">
<refmeta>
<refentrytitle>highlight.xslthl.config</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.xslthl.config</refname>
<refpurpose>Location of XSLTHL configuration file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.xslthl.config.frag">
&lt;xsl:param name="highlight.xslthl.config"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This location has precedence over the corresponding Java property.</para>

<para>Please note that usually you have to specify location as URL not
just as a simple path on the local
filesystem. E.g. <filename>file:///home/user/xslthl/my-xslthl-config.xml</filename>.</para>



</refsection>
</refentry>

<refentry version="5.0" id="highlight.default.language">
<refmeta>
<refentrytitle>highlight.default.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.default.language</refname>
<refpurpose>Default language of programlisting</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.default.language.frag">
&lt;xsl:param name="highlight.default.language"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This language is used when there is no language attribute on programlisting.</para>

</refsection>
</refentry>

<refentry version="5.0" id="email.delimiters.enabled">
<refmeta>
<refentrytitle>email.delimiters.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>email.delimiters.enabled</refname>
<refpurpose>Generate delimiters around email addresses?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="email.delimiters.enabled.frag">
&lt;xsl:param name="email.delimiters.enabled" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, delimiters

<footnote><para>For delimiters, the
stylesheets are currently hard-coded to output angle
brackets.</para></footnote> 

are generated around e-mail addresses
(the output of the <tag>email</tag> element).</para>

</refsection>
</refentry>

<refentry version="5.0" id="exsl.node.set.available">
<refmeta>
<refentrytitle>exsl.node.set.available</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>exsl.node.set.available</refname>
<refpurpose>Is the test function-available('exsl:node-set') true?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="exsl.node.set.available.frag">&lt;xsl:param name="exsl.node.set.available"&gt; 
  &lt;xsl:choose&gt;
    &lt;xsl:when exsl:foo="" test="function-available('exsl:node-set') or                        contains(system-property('xsl:vendor'),                          'Apache Software Foundation')"&gt;1&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;0&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
then the exsl:node-set() function is available to be used in
the stylesheet.
If zero, then the function is not available.
This param automatically detects the presence of
the function and does not normally need to be set manually.</para>

<para>This param was created to handle a long-standing
bug in the Xalan processor that fails to detect the
function even though it is available.</para>

</refsection>
</refentry>

</reference><reference id="annos" xml:base="../html/param.xml"><title>Annotations</title>
<refentry version="5.0" id="annotation.support">
<refmeta>
<refentrytitle>annotation.support</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotation.support</refname>
<refpurpose>Enable annotations?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotation.support.frag">
&lt;xsl:param name="annotation.support" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the stylesheets will attempt to support annotation
elements in HTML by including some JavaScript (see
<parameter>annotation.js</parameter>).</para>

</refsection>
</refentry>

<refentry version="5.0" id="annotation.js">
<refmeta>
<refentrytitle>annotation.js</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotation.js</refname>
<refpurpose>URIs identifying JavaScript files with support for annotation popups</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotation.js.frag">

&lt;xsl:param name="annotation.js"&gt;
&lt;xsl:text&gt;http://docbook.sourceforge.net/release/script/AnchorPosition.js http://docbook.sourceforge.net/release/script/PopupWindow.js&lt;/xsl:text&gt;&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <property>annotation.support</property> is enabled and the
document contains <tag>annotation</tag>s, then the URIs listed
in this parameter will be included. These JavaScript files are required
for popup annotation support.</para>

</refsection>
</refentry>

<refentry version="5.0" id="annotation.css">
<refmeta>
<refentrytitle>annotation.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotation.css</refname>
<refpurpose>CSS rules for annotations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotation.css.frag">
&lt;xsl:param name="annotation.css"&gt;
/* ======================================================================
   Annotations
*/

div.annotation-list  { visibility: hidden;
                     }

div.annotation-nocss { position: absolute;
                       visibility: hidden;
                     }

div.annotation-popup { position: absolute;
                       z-index: 4;
                       visibility: hidden;
                       padding: 0px;
                       margin: 2px;
                       border-style: solid;
                       border-width: 1px;
                       width: 200px;
		       background-color: white;
                     }

div.annotation-title { padding: 1px;
                       font-weight: bold;
                       border-bottom-style: solid;
                       border-bottom-width: 1px;
		       color: white;
		       background-color: black;
                     }

div.annotation-body  { padding: 2px;
                     }

div.annotation-body p { margin-top: 0px;
                        padding-top: 0px;
                      }

div.annotation-close { position: absolute;
                       top: 2px;
                       right: 2px;
                     }
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>annotation.support</parameter> is enabled and the
document contains <tag>annotation</tag>s, then the CSS in this
parameter will be included in the document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="annotation.graphic.open">
<refmeta>
<refentrytitle>annotation.graphic.open</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotation.graphic.open</refname>
<refpurpose>Image for identifying a link that opens an annotation popup</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotation.graphic.open.frag">
&lt;xsl:param name="annotation.graphic.open"&gt;http://docbook.sourceforge.net/release/images/annot-open.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This image is used inline to identify the location of
annotations. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels.</para>

</refsection>
</refentry>

<refentry version="5.0" id="annotation.graphic.close">
<refmeta>
<refentrytitle>annotation.graphic.close</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotation.graphic.close</refname>
<refpurpose>Image for identifying a link that closes an annotation popup</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="annotation.graphic.close.frag">
&lt;xsl:param name="annotation.graphic.close"&gt;
http://docbook.sourceforge.net/release/images/annot-close.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This image is used on popup annotations as the &#8220;x&#8221; that the
user can click to dismiss the popup.</para>
<para>This image is used on popup annotations as the &#8220;x&#8221; that the user can
click to dismiss the popup. It may be replaced by a user provided graphic. The size should be approximately 10x10 pixels.</para>

</refsection>
</refentry>

</reference><reference id="graphics" xml:base="../html/param.xml"><title>Graphics</title>
<refentry version="5.0" id="img.src.path">
<refmeta>
<refentrytitle>img.src.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>img.src.path</refname>
<refpurpose>Path to HTML/FO image files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="img.src.path.frag">&lt;xsl:param name="img.src.path"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Add a path prefix to the value of the <tag class="attribute">fileref</tag> 
attribute of <tag>graphic</tag>, <tag>inlinegraphic</tag>, and <tag>imagedata</tag> elements. The resulting 
compound path is used in the output as the value of the <tag class="attribute">src</tag> 
attribute of <tag class="element">img</tag> (HTML) or <tag class="element">external-graphic</tag> (FO).
</para>

<para>
The path given by <literal>img.src.path</literal> could be relative to the directory where the HTML/FO
files are created, or it could be an absolute URI.
The default value is empty.
Be sure to include a trailing slash if needed.
</para>

<para>This prefix is not applied to any filerefs that start
with "/" or contain "//:".
</para>

</refsection>
</refentry>

<refentry version="5.0" id="keep.relative.image.uris">
<refmeta>
<refentrytitle>keep.relative.image.uris</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keep.relative.image.uris</refname>
<refpurpose>Should image URIs be resolved against xml:base?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="keep.relative.image.uris.frag">
&lt;xsl:param name="keep.relative.image.uris" select="1"&gt;&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, relative URIs (in, for example
<literal>fileref</literal> attributes) will be used in the generated
output. Otherwise, the URIs will be made absolute with respect to the
base URI.</para>

<para>Note that the stylesheets calculate (and use) the absolute form
for some purposes, this only applies to the resulting output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="graphic.default.extension">
<refmeta>
<refentrytitle>graphic.default.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphic.default.extension</refname>
<refpurpose>Default extension for graphic filenames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="graphic.default.extension.frag">&lt;xsl:param name="graphic.default.extension"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If a <tag>graphic</tag> or <tag>mediaobject</tag>
includes a reference to a filename that does not include an extension,
and the <tag class="attribute">format</tag> attribute is
<emphasis>unspecified</emphasis>, the default extension will be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.image.width">
<refmeta>
<refentrytitle>default.image.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.image.width</refname>
<refpurpose>The default width of images</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.image.width.frag">
&lt;xsl:param name="default.image.width"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If specified, this value will be used for the
<tag class="attribute">width</tag> attribute on images that do not specify any 
<emphasis xlink:title="DocBook 5: The Definitive Guide" xlink:href="http://docbook.org/tdg5/en/html/imagedata.html#viewport.area">viewport dimensions</emphasis>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="nominal.image.width">
<refmeta>
<refentrytitle>nominal.image.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.image.width</refname>
<refpurpose>The nominal image width</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nominal.image.width.frag">
&lt;xsl:param name="nominal.image.width" select="6 * $pixels.per.inch"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Graphic widths expressed as a percentage are problematic. In the
following discussion, we speak of width and contentwidth, but
the same issues apply to depth and contentdepth.</para>

<para>A width of 50% means "half of the available space for the image."
That's fine. But note that in HTML, this is a dynamic property and
the image size will vary if the browser window is resized.</para>

<para>A contentwidth of 50% means "half of the actual image width".
But what does that mean if the stylesheets cannot assess the image's
actual size? Treating this as a width of 50% is one possibility, but
it produces behavior (dynamic scaling) that seems entirely out of
character with the meaning.</para>

<para>Instead, the stylesheets define a
<parameter>nominal.image.width</parameter> and convert percentages to
actual values based on that nominal size.</para>

</refsection>
</refentry>

<refentry version="5.0" id="nominal.image.depth">
<refmeta>
<refentrytitle>nominal.image.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.image.depth</refname>
<refpurpose>Nominal image depth</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nominal.image.depth.frag">
&lt;xsl:param name="nominal.image.depth" select="4 * $pixels.per.inch"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>See <parameter>nominal.image.width</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.embed.for.svg">
<refmeta>
<refentrytitle>use.embed.for.svg</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.embed.for.svg</refname>
<refpurpose>Use HTML <tag>embed</tag> for SVG?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.embed.for.svg.frag">
&lt;xsl:param name="use.embed.for.svg" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, an <tag>embed</tag> element will be created for
SVG figures. An <tag>object</tag> is <emphasis>always</emphasis> created,
this parameter merely controls whether or not an additional <tag>embed</tag>
is generated inside the <tag>object</tag>.</para>

<para>On the plus side, this may be more portable among browsers and plug-ins.
On the minus side, it isn't valid HTML.</para>

</refsection>
</refentry>

<refentry version="5.0" id="make.graphic.viewport">
<refmeta>
<refentrytitle>make.graphic.viewport</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.graphic.viewport</refname>
<refpurpose>Use tables in HTML to make viewports for graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.graphic.viewport.frag">
&lt;xsl:param name="make.graphic.viewport" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The HTML <tag>img</tag> element only supports the notion
of content-area scaling; it doesn't support the distinction between a
content-area and a viewport-area, so we have to make some compromises.</para>

<para>If <parameter>make.graphic.viewport</parameter> is non-zero, a table
will be used to frame the image. This creates an effective viewport-area.
</para>

<para>Tables and alignment don't work together, so this parameter is ignored
if alignment is specified on an image.</para>
</refsection>
</refentry>

<refentry version="5.0" id="preferred.mediaobject.role">
<refmeta>
<refentrytitle>preferred.mediaobject.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>preferred.mediaobject.role</refname>
<refpurpose>Select which mediaobject to use based on
this value of an object's <tag class="attribute">role</tag> attribute.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="preferred.mediaobject.role.frag">
&lt;xsl:param name="preferred.mediaobject.role"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A mediaobject may contain several objects such as imageobjects.
If the parameter <parameter>use.role.for.mediaobject</parameter> is
non-zero, then the <literal>role</literal> attribute on
<tag>imageobject</tag>s and other objects within a
<tag>mediaobject</tag> container will be used to select which object
will be used.  If one of the objects has a role value that matches the
<parameter>preferred.mediaobject.role</parameter> parameter, then it
has first priority for selection.  If more than one has such a role
value, the first one is used.
</para>
<para>
See the <parameter>use.role.for.mediaobject</parameter> parameter
for the sequence of selection.</para>
</refsection>
</refentry>

<refentry version="5.0" id="use.role.for.mediaobject">
<refmeta>
<refentrytitle>use.role.for.mediaobject</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.for.mediaobject</refname>
<refpurpose>Use <tag class="attribute">role</tag> attribute 
value for selecting which of several objects within a mediaobject to use.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.role.for.mediaobject.frag">
&lt;xsl:param name="use.role.for.mediaobject" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the <tag class="attribute">role</tag> attribute on
<tag>imageobject</tag>s or other objects within a <tag>mediaobject</tag> container will be used to select which object will be
used.
</para>
<para>
The order of selection when then parameter is non-zero is:
</para>
<orderedlist>
<listitem>
    <para>If the stylesheet parameter <parameter>preferred.mediaobject.role</parameter> has a value, then the object whose role equals that value is selected.</para>
</listitem>
<listitem>
<para>Else if an object's role attribute has a value of
<literal>html</literal> for HTML processing or
<literal>fo</literal> for FO output, then the first
of such objects is selected.
</para>
</listitem>
<listitem>
<para>Else the first suitable object is selected.</para>
</listitem>
</orderedlist>
<para>
If the value of 
<parameter>use.role.for.mediaobject</parameter>
is zero, then role attributes are not considered
and the first suitable object
with or without a role value is used.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="ignore.image.scaling">
<refmeta>
<refentrytitle>ignore.image.scaling</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ignore.image.scaling</refname>
<refpurpose>Tell the stylesheets to ignore the author's image scaling attributes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ignore.image.scaling.frag">
&lt;xsl:param name="ignore.image.scaling" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the scaling attributes on graphics and media objects are
ignored.</para>

</refsection>
</refentry>

</reference><reference id="chunking" xml:base="../html/param.xml"><title>Chunking</title>
<refentry version="5.0" id="chunker.output.cdata-section-elements">
<refmeta>
<refentrytitle>chunker.output.cdata-section-elements</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.cdata-section-elements</refname>
<refpurpose>List of elements to escape with CDATA sections</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.cdata-section-elements.frag">
&lt;xsl:param name="chunker.output.cdata-section-elements"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the list of elements that should be escaped
as CDATA sections by the chunking stylesheet.  Not all processors support
specification of this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.doctype-public">
<refmeta>
<refentrytitle>chunker.output.doctype-public</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.doctype-public</refname>
<refpurpose>Public identifer to use in the document type of generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.doctype-public.frag">
&lt;xsl:param name="chunker.output.doctype-public"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the public identifier that should be used by
the chunking stylesheet in the document type declaration of chunked pages.
Not all processors support specification of
this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.doctype-system">
<refmeta>
<refentrytitle>chunker.output.doctype-system</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.doctype-system</refname>
<refpurpose>System identifier to use for the document type in generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.doctype-system.frag">
&lt;xsl:param name="chunker.output.doctype-system"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the system identifier that should be used by
the chunking stylesheet in the document type declaration of chunked pages.
Not all processors support specification of
this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.encoding">
<refmeta>
<refentrytitle>chunker.output.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.encoding</refname>
<refpurpose>Encoding used in generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.encoding.frag">
&lt;xsl:param name="chunker.output.encoding"&gt;ISO-8859-1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the encoding to be used in files
generated by the chunking stylesheet. Not all processors support
specification of this parameter.
</para>
<para>This parameter used to be named <literal>default.encoding</literal>.</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.indent">
<refmeta>
<refentrytitle>chunker.output.indent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.indent</refname>
<refpurpose>Specification of indentation on generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.indent.frag">
&lt;xsl:param name="chunker.output.indent"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the value of the indent
specification for generated pages. Not all processors support
specification of this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.media-type">
<refmeta>
<refentrytitle>chunker.output.media-type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.media-type</refname>
<refpurpose>Media type to use in generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.media-type.frag">
&lt;xsl:param name="chunker.output.media-type"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the media type that should be used by
the chunking stylesheet. Not all processors support specification of
this parameter.
</para>
<para>This parameter specifies the media type that should be used by the
chunking stylesheet. This should be one from those defined in
<link xlink:href="http://www.ietf.org/rfc/rfc2045.txt">[RFC2045]</link>  and
 <link xlink:href="http://www.ietf.org/rfc/rfc2046.txt">[RFC2046]</link> </para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
<para>It must be one from html, xml or text</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.method">
<refmeta>
<refentrytitle>chunker.output.method</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">html</refmiscinfo>
<refmiscinfo class="other" otherclass="value">xml</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.method</refname>
<refpurpose>Method used in generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.method.frag">
&lt;xsl:param name="chunker.output.method"&gt;html&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the output method to be used in files
generated by the chunking stylesheet.
</para>
<para>This parameter used to be named <literal>output.method</literal>.</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.omit-xml-declaration">
<refmeta>
<refentrytitle>chunker.output.omit-xml-declaration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.omit-xml-declaration</refname>
<refpurpose>Omit-xml-declaration for generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.omit-xml-declaration.frag">
&lt;xsl:param name="chunker.output.omit-xml-declaration"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the value of the omit-xml-declaration
specification for generated pages. Not all processors support
specification of this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="chunker.output.standalone">
<refmeta>
<refentrytitle>chunker.output.standalone</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.standalone</refname>
<refpurpose>Standalone declaration for generated pages</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="chunker.output.standalone.frag">
&lt;xsl:param name="chunker.output.standalone"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>This parameter specifies the value of the standalone
  specification for generated pages. It must be either
  <literal>yes</literal> or <literal>no</literal>. Not all
  processors support specification of this parameter.
</para>
<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="saxon.character.representation">
<refmeta>
<refentrytitle>saxon.character.representation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>saxon.character.representation</refname>
<refpurpose>Saxon character representation used in generated HTML pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="saxon.character.representation.frag">&lt;xsl:param name="saxon.character.representation" select="'entity;decimal'"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter has effect only when Saxon 6 is used (version 6.4.2 or later). 
It sets the character representation in files generated by the chunking stylesheets. 
If you want to suppress entity references for characters with direct representations in 
<parameter>chunker.output.encoding</parameter>, set the parameter value to <literal>native</literal>. 
</para>

<para> For more information, see <link role="tcg" xlink:href="OutputEncoding.html#SaxonCharacter">Saxon output character representation</link>.</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename>chunker.xsl</filename> stylesheet module.</para>
</note>

</refsection>

</refentry>

<refentry version="5.0" id="html.ext">
<refmeta>
<refentrytitle>html.ext</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.ext</refname>
<refpurpose>Identifies the extension of generated HTML files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.ext.frag">
&lt;xsl:param name="html.ext"&gt;.html&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The extension identified by <parameter>html.ext</parameter> will
be used as the filename extension for chunks created by this
stylesheet. </para>

</refsection>
</refentry>

<refentry version="5.0" id="use.id.as.filename">
<refmeta>
<refentrytitle>use.id.as.filename</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.id.as.filename</refname>
<refpurpose>Use ID value of chunk elements as the filename?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.id.as.filename.frag">
&lt;xsl:param name="use.id.as.filename" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>use.id.as.filename</parameter>
is non-zero, the filename of chunk elements that have IDs will be
derived from the ID value.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="html.extra.head.links">
<refmeta>
<refentrytitle>html.extra.head.links</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.extra.head.links</refname>
<refpurpose>Toggle extra HTML head link information</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="html.extra.head.links.frag">
&lt;xsl:param name="html.extra.head.links" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, extra <tag>link</tag> elements will be
generated in the <tag>head</tag> of chunked HTML files. These
extra links point to chapters, appendixes, sections, etc. as supported
by the <quote>Site Navigation Bar</quote> in Mozilla 1.0 (as of CR1, at least).
</para>

</refsection>
</refentry>

<refentry version="5.0" id="root.filename">
<refmeta>
<refentrytitle>root.filename</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>root.filename</refname>
<refpurpose>Identifies the name of the root HTML file when chunking</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="root.filename.frag">
&lt;xsl:param name="root.filename"&gt;index&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>root.filename</parameter> is the base filename for
the chunk created for the root of each document processed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="base.dir">
<refmeta>
<refentrytitle>base.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>base.dir</refname>
<refpurpose>The base directory of chunks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="base.dir.frag">
&lt;xsl:param name="base.dir"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If specified, the <parameter>base.dir</parameter> parameter identifies
the output directory for chunks. (If not specified, the output directory
is system dependent.)</para>

<para>Starting with version 1.77 of the stylesheets, 
the param's value will have a trailing slash added if it does
not already have one.</para>

<caution><para>Do not use <parameter>base.dir</parameter>
to add a filename prefix string to chunked  files. 
Instead, use the <parameter>chunked.filename.prefix</parameter>
parameter.</para></caution>

</refsection>
</refentry>

<refentry version="5.0" id="chunked.filename.prefix">
<refmeta>
<refentrytitle>chunked.filename.prefix</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunked.filename.prefix</refname>
<refpurpose>Filename prefix for chunked files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunked.filename.prefix.frag">
&lt;xsl:param name="chunked.filename.prefix"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If specified, the <parameter>chunked.filename.prefix</parameter> 
parameter specifies a prefix string to add to each generated chunk filename.
For example:</para>
<programlisting>&lt;xsl:param name="chunked.filename.prefix"&gt;admin-&lt;xsl:param&gt;</programlisting>
<para>will produce chunked filenames like:</para>
<programlisting>admin-index.html
admin-ch01.html
admin-ch01s01.html
...
</programlisting>

<caution><para>Trying to use the <parameter>base.dir</parameter>
parameter to add a string prefix (by omitting the trailing slash)
no longer works (it never worked completely anyway). That parameter
value should contain only a directory path, and
now gets a trailing slash appended if it was omitted from the param.</para></caution>
</refsection>
</refentry>

<refentry version="5.0" id="generate.manifest">
  <refmeta>
    <refentrytitle>generate.manifest</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>generate.manifest</refname>
    <refpurpose>Generate a manifest file?</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="generate.manifest.frag">&lt;xsl:param name="generate.manifest" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

    <para>If non-zero, a list of HTML files generated by the
      stylesheet transformation is written to the file named by
      the <parameter>manifest</parameter> parameter.</para>

  </refsection>
</refentry>

<refentry version="5.0" id="manifest">
  <refmeta>
    <refentrytitle>manifest</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>manifest</refname>
    <refpurpose>Name of manifest file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="manifest.frag">
    &lt;xsl:param name="manifest"&gt;HTML.manifest&lt;/xsl:param&gt;
    </programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

    <para>The name of the file to which a manifest is written (if the
      value of the <parameter>generate.manifest</parameter> parameter
      is non-zero).</para>

  </refsection>
</refentry>

<refentry version="5.0" id="manifest.in.base.dir">
<refmeta>
<refentrytitle>manifest.in.base.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>manifest.in.base.dir</refname>
<refpurpose>Should the manifest file be written into <parameter>base.dir</parameter>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="manifest.in.base.dir.frag">
&lt;xsl:param name="manifest.in.base.dir" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the manifest file as well as project files for HTML Help and
Eclipse Help are written into <parameter>base.dir</parameter> instead
of the current directory.</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.toc">
<refmeta>
<refentrytitle>chunk.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.toc</refname>
<refpurpose>An explicit TOC to be used for chunking</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.toc.frag">
&lt;xsl:param name="chunk.toc"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>chunk.toc</parameter> identifies an explicit TOC that
will be used for chunking. This parameter is only used by the
<filename>chunktoc.xsl</filename> stylesheet (and customization layers built
from it).</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.tocs.and.lots">
<refmeta>
<refentrytitle>chunk.tocs.and.lots</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.tocs.and.lots</refname>
<refpurpose>Should ToC and LoTs be in separate chunks?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.tocs.and.lots.frag">
&lt;xsl:param name="chunk.tocs.and.lots" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, ToC and LoT (List of Examples, List of Figures, etc.)
will be put in a separate chunk. At the moment, this chunk is not in the
normal forward/backward navigation list. Instead, a new link is added to the
navigation footer.</para>

<para>This feature is still somewhat experimental. Feedback welcome.</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.separate.lots">
<refmeta>
<refentrytitle>chunk.separate.lots</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.separate.lots</refname>
<refpurpose>Should each LoT be in its own separate chunk?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.separate.lots.frag">
&lt;xsl:param name="chunk.separate.lots" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, each of the ToC and LoTs
(List of Examples, List of Figures, etc.)
will be put in its own separate chunk.
The title page includes generated links to each of the separate files.
</para>
<para>
This feature depends on the
<parameter>chunk.tocs.and.lots</parameter>
parameter also being non-zero. 
</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.tocs.and.lots.has.title">
<refmeta>
<refentrytitle>chunk.tocs.and.lots.has.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.tocs.and.lots.has.title</refname>
<refpurpose>Should ToC and LoTs in a separate chunks have title?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.tocs.and.lots.has.title.frag">
&lt;xsl:param name="chunk.tocs.and.lots.has.title" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero title of document is shown before ToC/LoT in
separate chunk.</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.section.depth">
<refmeta>
<refentrytitle>chunk.section.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.section.depth</refname>
<refpurpose>Depth to which sections should be chunked</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.section.depth.frag">
&lt;xsl:param name="chunk.section.depth" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter sets the depth of section chunking.</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.first.sections">
<refmeta>
<refentrytitle>chunk.first.sections</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.first.sections</refname>
<refpurpose>Chunk the first top-level section?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.first.sections.frag">
&lt;xsl:param name="chunk.first.sections" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a chunk will be created for the first top-level
<tag>sect1</tag> or <tag>section</tag> elements in
each component. Otherwise, that section will be part of the chunk for
its parent.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.quietly">
<refmeta>
<refentrytitle>chunk.quietly</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.quietly</refname>
<refpurpose>Omit the chunked filename messages.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.quietly.frag">
&lt;xsl:param name="chunk.quietly" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), the XSL processor emits a message naming
each separate chunk filename as it is being output.
If nonzero, then the messages are suppressed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.append">
<refmeta>
<refentrytitle>chunk.append</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.append</refname>
<refpurpose>Specifies content to append to chunked HTML output</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.append.frag">&lt;xsl:param name="chunk.append"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies content to append to the end of HTML files output by
the <filename>html/chunk.xsl</filename> stylesheet, after the closing
<code>&lt;html&gt;</code> tag. You probably don&#8217;t want to set any value
for this parameter; but if you do, the only value it should ever be
set to is a newline character: <code>&amp;#x0a;</code> or
<code>&amp;#10;</code></para>

</refsection>
</refentry>

<refentry version="5.0" id="navig.graphics">
<refmeta>
<refentrytitle>navig.graphics</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics</refname>
<refpurpose>Use graphics in navigational headers and footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navig.graphics.frag">
&lt;xsl:param name="navig.graphics" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the navigational headers and footers in chunked
HTML are presented in an alternate style that uses graphical icons for
Next, Previous, Up, and Home.  Default graphics are provided in the
distribution. If zero, text is used instead of graphics.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="navig.graphics.extension">
<refmeta>
<refentrytitle>navig.graphics.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics.extension</refname>
<refpurpose>Extension for navigational graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navig.graphics.extension.frag">
&lt;xsl:param name="navig.graphics.extension"&gt;.gif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the filename extension to use on navigational graphics used
in the headers and footers of chunked HTML.</para>

</refsection>
</refentry>

<refentry version="5.0" id="navig.graphics.path">
<refmeta>
<refentrytitle>navig.graphics.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics.path</refname>
<refpurpose>Path to navigational graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navig.graphics.path.frag">
&lt;xsl:param name="navig.graphics.path"&gt;images/&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the navigational graphics used in the
headers and footers of chunked HTML.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="navig.showtitles">
<refmeta>
<refentrytitle>navig.showtitles</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.showtitles</refname>
<refpurpose>Display titles in HTML headers and footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navig.showtitles.frag">&lt;xsl:param name="navig.showtitles"&gt;1&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
the headers and footers of chunked HTML
display the titles of the next and previous chunks,
along with the words 'Next' and 'Previous' (or the
equivalent graphical icons if navig.graphics is true).
If false (zero), then only the words 'Next' and 'Previous'
(or the icons) are displayed.
</para>

</refsection>
</refentry>

</reference><reference id="profiling" xml:base="../html/param.xml"><title>Profiling</title>
<partintro id="partintro">
<para>The following parameters can be used for attribute-based
profiling of your document. For more information about profiling, see 
<link role="tcg" xlink:href="Profiling.html">Profiling (conditional text)</link>.</para>
</partintro>
<refentry version="5.0" id="profile.arch">
<refmeta>
<refentrytitle>profile.arch</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.arch</refname>
<refpurpose>Target profile for <tag class="attribute">arch</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.arch.frag">
&lt;xsl:param name="profile.arch"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>


<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.audience">
<refmeta>
<refentrytitle>profile.audience</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.audience</refname>
<refpurpose>Target profile for <tag class="attribute">audience</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.audience.frag">
&lt;xsl:param name="profile.audience"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.condition">
<refmeta>
<refentrytitle>profile.condition</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.condition</refname>
<refpurpose>Target profile for <tag class="attribute">condition</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.condition.frag">
&lt;xsl:param name="profile.condition"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.conformance">
<refmeta>
<refentrytitle>profile.conformance</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.conformance</refname>
<refpurpose>Target profile for <tag class="attribute">conformance</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.conformance.frag">
&lt;xsl:param name="profile.conformance"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.lang">
<refmeta>
<refentrytitle>profile.lang</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.lang</refname>
<refpurpose>Target profile for <tag class="attribute">lang</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.lang.frag">
&lt;xsl:param name="profile.lang"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.os">
<refmeta>
<refentrytitle>profile.os</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.os</refname>
<refpurpose>Target profile for <tag class="attribute">os</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.os.frag">
&lt;xsl:param name="profile.os"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.revision">
<refmeta>
<refentrytitle>profile.revision</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revision</refname>
<refpurpose>Target profile for <tag class="attribute">revision</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.revision.frag">
&lt;xsl:param name="profile.revision"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.revisionflag">
<refmeta>
<refentrytitle>profile.revisionflag</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revisionflag</refname>
<refpurpose>Target profile for <tag class="attribute">revisionflag</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.revisionflag.frag">
&lt;xsl:param name="profile.revisionflag"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.role">
<refmeta>
<refentrytitle>profile.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.role</refname>
<refpurpose>Target profile for <tag class="attribute">role</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.role.frag">
&lt;xsl:param name="profile.role"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

<warning>
<para>Note that <tag class="attribute">role</tag> is often
used for other purposes than profiling. For example it is commonly
used to get emphasize in bold font:</para>

<programlisting>&lt;emphasis role="bold"&gt;very important&lt;/emphasis&gt;</programlisting>

<para>If you are using <tag class="attribute">role</tag> for
these purposes do not forget to add values like <literal>bold</literal> to
value of this parameter. If you forgot you will get document with
small pieces missing which are very hard to track.</para>

<para>For this reason it is not recommended to use <tag class="attribute">role</tag> attribute for profiling. You should
rather use profiling specific attributes like <tag class="attribute">userlevel</tag>, <tag class="attribute">os</tag>, <tag class="attribute">arch</tag>, <tag class="attribute">condition</tag>, etc.</para>
</warning>

</refsection>
</refentry>

<refentry version="5.0" id="profile.security">
<refmeta>
<refentrytitle>profile.security</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.security</refname>
<refpurpose>Target profile for <tag class="attribute">security</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.security.frag">
&lt;xsl:param name="profile.security"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.status">
<refmeta>
<refentrytitle>profile.status</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.status</refname>
<refpurpose>Target profile for <tag class="attribute">status</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.status.frag">
&lt;xsl:param name="profile.status"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.userlevel">
<refmeta>
<refentrytitle>profile.userlevel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.userlevel</refname>
<refpurpose>Target profile for <tag class="attribute">userlevel</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.userlevel.frag">
&lt;xsl:param name="profile.userlevel"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.vendor">
<refmeta>
<refentrytitle>profile.vendor</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.vendor</refname>
<refpurpose>Target profile for <tag class="attribute">vendor</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.vendor.frag">
&lt;xsl:param name="profile.vendor"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.wordsize">
<refmeta>
<refentrytitle>profile.wordsize</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.wordsize</refname>
<refpurpose>Target profile for <tag class="attribute">wordsize</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.wordsize.frag">
&lt;xsl:param name="profile.wordsize"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.attribute">
<refmeta>
<refentrytitle>profile.attribute</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.attribute</refname>
<refpurpose>Name of user-specified profiling attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.attribute.frag">
&lt;xsl:param name="profile.attribute"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter is used in conjuction with
<parameter>profile.value</parameter>.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.value">
<refmeta>
<refentrytitle>profile.value</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.value</refname>
<refpurpose>Target profile for user-specified attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.value.frag">
&lt;xsl:param name="profile.value"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When you are using this parameter you must also specify name of
profiling attribute with parameter
<parameter>profile.attribute</parameter>.</para>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.separator">
<refmeta>
<refentrytitle>profile.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.separator</refname>
<refpurpose>Separator character for compound profile values</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.separator.frag">
&lt;xsl:param name="profile.separator"&gt;;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator character used for compound profile values. See <parameter>profile.arch</parameter></para>

</refsection>
</refentry>

</reference><reference id="htmlhelp" xml:base="../html/param.xml"><title>HTML Help</title>
<refentry version="5.0" id="htmlhelp.encoding">
<refmeta>
<refentrytitle>htmlhelp.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.encoding</refname>
<refpurpose>Character encoding to use in files for HTML Help compiler.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.encoding.frag">
&lt;xsl:param name="htmlhelp.encoding"&gt;iso-8859-1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The HTML Help Compiler is not UTF-8 aware, so you should always use an
appropriate single-byte encoding here. See also <link xlink:href="HtmlHelp.html#HelpProcOptions" role="tcg">Processing options</link>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.autolabel">
<refmeta>
<refentrytitle>htmlhelp.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.autolabel</refname>
<refpurpose>Should tree-like ToC use autonumbering feature?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.autolabel.frag">
&lt;xsl:param name="htmlhelp.autolabel" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set this to non-zero to include chapter and section numbers into ToC
in the left panel.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.chm">
<refmeta>
<refentrytitle>htmlhelp.chm</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.chm</refname>
<refpurpose>Filename of output HTML Help file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.chm.frag">
&lt;xsl:param name="htmlhelp.chm"&gt;htmlhelp.chm&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set the  name of resulting CHM file</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.default.topic">
<refmeta>
<refentrytitle>htmlhelp.default.topic</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.default.topic</refname>
<refpurpose>Name of file with default topic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.default.topic.frag">
&lt;xsl:param name="htmlhelp.default.topic"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Normally first chunk of document is displayed when you open HTML
Help file. If you want to display another topic, simply set its
filename by this parameter.</para>

<para>This is useful especially if you don't generate ToC in front of
your document and you also hide root element in ToC. E.g.:</para>

<programlisting>&lt;xsl:param name="generate.book.toc" select="0"/&gt;
&lt;xsl:param name="htmlhelp.hhc.show.root" select="0"/&gt;
&lt;xsl:param name="htmlhelp.default.topic"&gt;pr01.html&lt;/xsl:param&gt;
</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.display.progress">
<refmeta>
<refentrytitle>htmlhelp.display.progress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.display.progress</refname>
<refpurpose>Display compile progress?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.display.progress.frag">
&lt;xsl:param name="htmlhelp.display.progress" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to to display compile progress
</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhp">
<refmeta>
<refentrytitle>htmlhelp.hhp</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp</refname>
<refpurpose>Filename of project file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhp.frag">
&lt;xsl:param name="htmlhelp.hhp"&gt;htmlhelp.hhp&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Change this parameter if you want different name of project
file than htmlhelp.hhp.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc">
<refmeta>
<refentrytitle>htmlhelp.hhc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc</refname>
<refpurpose>Filename of TOC file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.frag">
&lt;xsl:param name="htmlhelp.hhc"&gt;toc.hhc&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set the name of the TOC file. The default is <filename>toc.hhc</filename>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhk">
<refmeta>
<refentrytitle>htmlhelp.hhk</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhk</refname>
<refpurpose>Filename of index file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhk.frag">
&lt;xsl:param name="htmlhelp.hhk"&gt;index.hhk&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>set the name of the index file. The default is <filename>index.hhk</filename>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhp.tail">
<refmeta>
<refentrytitle>htmlhelp.hhp.tail</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp.tail</refname>
<refpurpose>Additional content for project file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhp.tail.frag">
&lt;xsl:param name="htmlhelp.hhp.tail"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want to include some additional parameters into project file,
store appropriate part of project file into this parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhp.window">
<refmeta>
<refentrytitle>htmlhelp.hhp.window</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp.window</refname>
<refpurpose>Name of default window.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhp.window.frag">
&lt;xsl:param name="htmlhelp.hhp.window"&gt;Main&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Name of default window. If empty no [WINDOWS] section will be
added to project file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhp.windows">
<refmeta>
<refentrytitle>htmlhelp.hhp.windows</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp.windows</refname>
<refpurpose>Definition of additional windows</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhp.windows.frag">
&lt;xsl:param name="htmlhelp.hhp.windows"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Content of this parameter is placed at the end of [WINDOWS]
section of project file. You can use it for defining your own
addtional windows.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.enhanced.decompilation">
<refmeta>
<refentrytitle>htmlhelp.enhanced.decompilation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.enhanced.decompilation</refname>
<refpurpose>Allow enhanced decompilation of CHM?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.enhanced.decompilation.frag">
&lt;xsl:param name="htmlhelp.enhanced.decompilation" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When non-zero this parameter enables enhanced decompilation of CHM.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.enumerate.images">
<refmeta>
<refentrytitle>htmlhelp.enumerate.images</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.enumerate.images</refname>
<refpurpose>Should the paths to all used images be added to the project file?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.enumerate.images.frag">
&lt;xsl:param name="htmlhelp.enumerate.images" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero if you insert images into your documents as
external binary entities or if you are using absolute image paths.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.force.map.and.alias">
<refmeta>
<refentrytitle>htmlhelp.force.map.and.alias</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.force.map.and.alias</refname>
<refpurpose>Should [MAP] and [ALIAS] sections be added to the project file unconditionally?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="htmlhelp.force.map.and.alias.frag">
&lt;xsl:param name="htmlhelp.force.map.and.alias" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
  <para>Set to non-zero if you have your own
    <literal>alias.h</literal> and <literal>context.h</literal>
    files and you want to include references to them in the project
    file.</para>
</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.map.file">
<refmeta>
<refentrytitle>htmlhelp.map.file</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.map.file</refname>
<refpurpose>Filename of map file.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="htmlhelp.map.file.frag">
&lt;xsl:param name="htmlhelp.map.file"&gt;context.h&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Set the name of map file. The default is
  <filename>context.h</filename>. (used for context-sensitive
  help).</para>
</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.alias.file">
<refmeta>
<refentrytitle>htmlhelp.alias.file</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.alias.file</refname>
<refpurpose>Filename of alias file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.alias.file.frag">
&lt;xsl:param name="htmlhelp.alias.file"&gt;alias.h&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the filename of the alias file (used for context-sensitive help).</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc.section.depth">
<refmeta>
<refentrytitle>htmlhelp.hhc.section.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.section.depth</refname>
<refpurpose>Depth of TOC for sections in a left pane.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.section.depth.frag">
&lt;xsl:param name="htmlhelp.hhc.section.depth"&gt;5&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set the section depth in the left pane of HTML Help viewer. </para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc.show.root">
<refmeta>
<refentrytitle>htmlhelp.hhc.show.root</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.show.root</refname>
<refpurpose>Should there be an entry for the root element in the ToC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.show.root.frag">
&lt;xsl:param name="htmlhelp.hhc.show.root" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If set to zero, there will be no entry for the root element in the 
ToC. This is useful when you want to provide the user with an expanded
ToC as a default.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc.folders.instead.books">
<refmeta>
<refentrytitle>htmlhelp.hhc.folders.instead.books</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.folders.instead.books</refname>
<refpurpose>Use folder icons in ToC (instead of book icons)?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.folders.instead.books.frag">
&lt;xsl:param name="htmlhelp.hhc.folders.instead.books" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero for folder-like icons or zero for book-like icons in the ToC. 
If you want to use folder-like icons, you must switch off the binary ToC using 
<parameter>htmlhelp.hhc.binary</parameter>.

</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc.binary">
<refmeta>
<refentrytitle>htmlhelp.hhc.binary</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.binary</refname>
<refpurpose>Generate binary ToC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.binary.frag">
&lt;xsl:param name="htmlhelp.hhc.binary" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to generate a binary TOC. You must create a binary TOC
if you want to add Prev/Next buttons to toolbar (which is default
behaviour). Files with binary TOC can't be merged.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.hhc.width">
<refmeta>
<refentrytitle>htmlhelp.hhc.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.width</refname>
<refpurpose>Width of navigation pane</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.hhc.width.frag">
&lt;xsl:param name="htmlhelp.hhc.width"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the width of the navigation pane (containing TOC and
other navigation tabs) in pixels.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.title">
<refmeta>
<refentrytitle>htmlhelp.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.title</refname>
<refpurpose>Title of HTML Help</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.title.frag">
&lt;xsl:param name="htmlhelp.title"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Content of this parameter will be used as a title for generated
HTML Help. If empty, title will be automatically taken from document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.show.menu">
<refmeta>
<refentrytitle>htmlhelp.show.menu</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.menu</refname>
<refpurpose>Should the menu bar be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.show.menu.frag">
&lt;xsl:param name="htmlhelp.show.menu" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to have an application menu bar in your HTML Help window.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.show.toolbar.text">
<refmeta>
<refentrytitle>htmlhelp.show.toolbar.text</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.toolbar.text</refname>
<refpurpose>Show text under toolbar buttons?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.show.toolbar.text.frag">
&lt;xsl:param name="htmlhelp.show.toolbar.text" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to display texts under toolbar buttons, zero to switch
off displays.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.show.advanced.search">
<refmeta>
<refentrytitle>htmlhelp.show.advanced.search</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.advanced.search</refname>
<refpurpose>Should advanced search features be available?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.show.advanced.search.frag">
&lt;xsl:param name="htmlhelp.show.advanced.search" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want advanced search features in your help, turn this
parameter to 1.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.show.favorities">
<refmeta>
<refentrytitle>htmlhelp.show.favorities</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.favorities</refname>
<refpurpose>Should the Favorites tab be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.show.favorities.frag">
&lt;xsl:param name="htmlhelp.show.favorities" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include a Favorites tab in the navigation pane 
of the help window.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.hideshow">
<refmeta>
<refentrytitle>htmlhelp.button.hideshow</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.hideshow</refname>
<refpurpose>Should the Hide/Show button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.hideshow.frag">
&lt;xsl:param name="htmlhelp.button.hideshow" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the  Hide/Show button shown on toolbar</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.back">
<refmeta>
<refentrytitle>htmlhelp.button.back</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.back</refname>
<refpurpose>Should the Back button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.back.frag">
&lt;xsl:param name="htmlhelp.button.back" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the  Hide/Show button shown on toolbar</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.forward">
<refmeta>
<refentrytitle>htmlhelp.button.forward</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.forward</refname>
<refpurpose>Should the Forward button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.forward.frag">
&lt;xsl:param name="htmlhelp.button.forward" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the  Forward button  on the toolbar.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.stop">
<refmeta>
<refentrytitle>htmlhelp.button.stop</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.stop</refname>
<refpurpose>Should the Stop button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.stop.frag">
&lt;xsl:param name="htmlhelp.button.stop" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want Stop button shown on toolbar, turn this
parameter to 1.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.refresh">
<refmeta>
<refentrytitle>htmlhelp.button.refresh</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.refresh</refname>
<refpurpose>Should the Refresh button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.refresh.frag">
&lt;xsl:param name="htmlhelp.button.refresh" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Stop button  on the toolbar.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.home">
<refmeta>
<refentrytitle>htmlhelp.button.home</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.home</refname>
<refpurpose>Should the Home button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.home.frag">
&lt;xsl:param name="htmlhelp.button.home" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Home button  on the toolbar.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.home.url">
<refmeta>
<refentrytitle>htmlhelp.button.home.url</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.home.url</refname>
<refpurpose>URL address of page accessible by Home button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.home.url.frag">
&lt;xsl:param name="htmlhelp.button.home.url"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>URL address of page accessible by Home button.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.options">
<refmeta>
<refentrytitle>htmlhelp.button.options</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.options</refname>
<refpurpose>Should the Options button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.options.frag">
&lt;xsl:param name="htmlhelp.button.options" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want Options button shown on toolbar, turn this
parameter to 1.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.print">
<refmeta>
<refentrytitle>htmlhelp.button.print</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.print</refname>
<refpurpose>Should the Print button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.print.frag">
&lt;xsl:param name="htmlhelp.button.print" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Print button  on the toolbar.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.locate">
<refmeta>
<refentrytitle>htmlhelp.button.locate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.locate</refname>
<refpurpose>Should the Locate button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.locate.frag">
&lt;xsl:param name="htmlhelp.button.locate" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want Locate button shown on toolbar, turn this
parameter to 1.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump1">
<refmeta>
<refentrytitle>htmlhelp.button.jump1</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1</refname>
<refpurpose>Should the Jump1 button be shown?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump1.frag">
&lt;xsl:param name="htmlhelp.button.jump1" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
  <para>Set to non-zero to include the <literal>Jump1</literal> button on the toolbar.</para>
</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump1.url">
<refmeta>
<refentrytitle>htmlhelp.button.jump1.url</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1.url</refname>
<refpurpose>URL address of page accessible by Jump1 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump1.url.frag">
&lt;xsl:param name="htmlhelp.button.jump1.url"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>URL address of page accessible by Jump1 button.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump1.title">
<refmeta>
<refentrytitle>htmlhelp.button.jump1.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1.title</refname>
<refpurpose>Title of Jump1 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump1.title.frag">
&lt;xsl:param name="htmlhelp.button.jump1.title"&gt;User1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Title of Jump1 button.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump2">
<refmeta>
<refentrytitle>htmlhelp.button.jump2</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2</refname>
<refpurpose>Should the Jump2 button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump2.frag">
&lt;xsl:param name="htmlhelp.button.jump2" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Jump2 button  on the toolbar.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump2.url">
<refmeta>
<refentrytitle>htmlhelp.button.jump2.url</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2.url</refname>
<refpurpose>URL address of page accessible by Jump2 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump2.url.frag">
&lt;xsl:param name="htmlhelp.button.jump2.url"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>URL address of page accessible by Jump2 button.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.jump2.title">
<refmeta>
<refentrytitle>htmlhelp.button.jump2.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2.title</refname>
<refpurpose>Title of Jump2 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.jump2.title.frag">
&lt;xsl:param name="htmlhelp.button.jump2.title"&gt;User2&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Title of Jump2 button.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.next">
<refmeta>
<refentrytitle>htmlhelp.button.next</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.next</refname>
<refpurpose>Should the Next button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.next.frag">
&lt;xsl:param name="htmlhelp.button.next" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Next button  on the toolbar.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.prev">
<refmeta>
<refentrytitle>htmlhelp.button.prev</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.prev</refname>
<refpurpose>Should the Prev button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.prev.frag">
&lt;xsl:param name="htmlhelp.button.prev" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Prev button  on the toolbar.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.button.zoom">
<refmeta>
<refentrytitle>htmlhelp.button.zoom</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.zoom</refname>
<refpurpose>Should the Zoom button be shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.button.zoom.frag">
&lt;xsl:param name="htmlhelp.button.zoom" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to include the Zoom button  on the toolbar.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.remember.window.position">
<refmeta>
<refentrytitle>htmlhelp.remember.window.position</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.remember.window.position</refname>
<refpurpose>Remember help window position?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.remember.window.position.frag">
&lt;xsl:param name="htmlhelp.remember.window.position" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set to non-zero to remember help window position between starts.</para>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.window.geometry">
<refmeta>
<refentrytitle>htmlhelp.window.geometry</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.window.geometry</refname>
<refpurpose>Set initial geometry of help window</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.window.geometry.frag">
&lt;xsl:param name="htmlhelp.window.geometry"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies initial position of help
window. E.g.</para>

<programlisting>&lt;xsl:param name="htmlhelp.window.geometry"&gt;[160,64,992,704]&lt;/xsl:param&gt;</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.use.hhk">
<refmeta>
<refentrytitle>htmlhelp.use.hhk</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.use.hhk</refname>
<refpurpose>Should the index be built using the HHK file?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.use.hhk.frag">
&lt;xsl:param name="htmlhelp.use.hhk" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the index is created using the HHK file (instead of using <tag role="html">object</tag>
elements in the HTML files). For more information, see <link role="tcg" xlink:href="HtmlHelp.html#HHGenIndex">Generating an index</link>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="htmlhelp.only">
<refmeta>
<refentrytitle>htmlhelp.only</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.only</refname>
<refpurpose>Should only project files be generated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="htmlhelp.only.frag">
&lt;xsl:param name="htmlhelp.only" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>


<para>Set to non-zero if you want to play with various HTML Help parameters
and you don't need to regenerate all HTML files. This setting will not
process whole document, only project files (hhp, hhc, hhk,...) will be
generated.</para>


</refsection>
</refentry>

</reference><reference id="eclipse_help" xml:base="../html/param.xml"><title>Eclipse Help Platform</title>
<refentry version="5.0" id="eclipse.autolabel">
<refmeta>
<refentrytitle>eclipse.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>eclipse.autolabel</refname>
<refpurpose>Should tree-like ToC use autonumbering feature?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="eclipse.autolabel.frag">
&lt;xsl:param name="eclipse.autolabel" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want to include chapter and section numbers into ToC in
the left panel, set this parameter to 1.</para>

</refsection>
</refentry>

<refentry version="5.0" id="eclipse.plugin.name">
<refmeta>
<refentrytitle>eclipse.plugin.name</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>eclipse.plugin.name</refname>
<refpurpose>Eclipse Help plugin name</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="eclipse.plugin.name.frag">
&lt;xsl:param name="eclipse.plugin.name"&gt;DocBook Online Help Sample&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Eclipse Help plugin name.</para>

</refsection>
</refentry>

<refentry version="5.0" id="eclipse.plugin.id">
<refmeta>
<refentrytitle>eclipse.plugin.id</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>eclipse.plugin.id</refname>
<refpurpose>Eclipse Help plugin id</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="eclipse.plugin.id.frag">
&lt;xsl:param name="eclipse.plugin.id"&gt;com.example.help&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Eclipse Help plugin id. You should change this id to something
unique for each help.</para>

</refsection>
</refentry>

<refentry version="5.0" id="eclipse.plugin.provider">
<refmeta>
<refentrytitle>eclipse.plugin.provider</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>eclipse.plugin.provider</refname>
<refpurpose>Eclipse Help plugin provider name</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="eclipse.plugin.provider.frag">
&lt;xsl:param name="eclipse.plugin.provider"&gt;Example provider&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Eclipse Help plugin provider name.</para>

</refsection>
</refentry>

</reference><reference id="webhelp" xml:base="../html/param.xml"><title>WebHelp</title>
<refentry version="5.0" id="webhelp.autolabel">
<refmeta>
<refentrytitle>webhelp.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.autolabel</refname>
<refpurpose>Should tree-like ToC use autonumbering feature?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.autolabel.frag">
&lt;xsl:param name="webhelp.autolabel"&gt;0&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>To include chapter and section numbers the table of contents pane, set this parameter to 1.</para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.base.dir">
<refmeta>
<refentrytitle>webhelp.base.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.base.dir</refname>
<refpurpose>The base directory for webhelp output.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.base.dir.frag">
&lt;xsl:param name="webhelp.base.dir"&gt;docs&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If specified, the <parameter>webhelp.base.dir</parameter>
parameter identifies the output directory for webhelp. (If not
specified, the output directory is system dependent.) By default, this
parameter is set to <filename>docs</filename>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="webhelp.common.dir">
<refmeta>
<refentrytitle>webhelp.common.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.common.dir</refname>
<refpurpose>Path to the directory for the common webhelp resources (JavaScript, css, common images, etc).</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.common.dir.frag">
&lt;xsl:param name="webhelp.common.dir"&gt;../common/&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>By default, webhelp creates a common directory containing resources such as JavaScript files, css, common images, etc. In some cases you may prefer to store these files in a standard location on your site and point all webhelp documents to that location. You can use this parameter to control the urls written to these common resources. For example, you might set this parameter to <code>/common</code> and create a single common directory at the root of your web server.  </para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.default.topic">
<refmeta>
<refentrytitle>webhelp.default.topic</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.default.topic</refname>
<refpurpose>The name of the file to which the start file in the webhelp base directory redirects</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.default.topic.frag">
&lt;xsl:param name="webhelp.default.topic"&gt;index.html&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Currently webhelp creates a base directory and puts the output
files in a <filename>content</filename> subdirectory. It creates a
file in the base directory that redirects to a configured file in the
<filename>content</filename> directory. The
<parameter>webhelp.default.topic</parameter> parameter lets you
configure the name of the file that is redirected to.
<note>
  <para>This parameter will be removed from a future version of
  webhelp along with the <filename>content</filename>
  directory.</para>
</note>
</para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.include.search.tab">
<refmeta>
<refentrytitle>webhelp.include.search.tab</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.include.search.tab</refname>
<refpurpose>Should the webhelp output include a Search tab?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.include.search.tab.frag">
&lt;xsl:param name="webhelp.include.search.tab"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Set this parameter to 0 to suppress the search tab from webhelp output.</para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.indexer.language">
<refmeta>
<refentrytitle>webhelp.indexer.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype"/>
</refmeta>
<refnamediv>
<refname>webhelp.indexer.language</refname>
<refpurpose>The language to use for creating the webhelp search index.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.indexer.language.frag">
&lt;xsl:param name="webhelp.indexer.language"&gt;en&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>To support stemming in the client-side webhelp stemmer, you must provide the language code. By default, the following languages are supported:
<itemizedlist>
  <listitem>
    <para><code>en</code>: English</para>
  </listitem>
  <listitem>
    <para><code>de</code>: German</para>
  </listitem>
  <listitem>
    <para><code>fr</code>: French</para>
  </listitem>
  <listitem>
    <para><code>zh</code>: Chinese</para>
  </listitem>
  <listitem>
    <para><code>ja</code>: Japanese</para>
  </listitem>
  <listitem>
    <para><code>ko</code>: Korean</para>
  </listitem>
</itemizedlist>
See the webhelp documentation for information on adding support for additional languages.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.start.filename">
<refmeta>
<refentrytitle>webhelp.start.filename</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.start.filename</refname>
<refpurpose>The name of the start file in the webhelp base directory.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.start.filename.frag">
&lt;xsl:param name="webhelp.start.filename"&gt;index.html&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Currently webhelp creates a base directory and puts the output
files in a <filename>content</filename> subdirectory. It creates a
file in the base directory that redirects to a configured file in the
<filename>content</filename> directory. The <parameter>webhelp.start.filename</parameter> parameter lets you configure the name of the redirect file.
<note>
  <para>This parameter will be removed from a future version of
  webhelp along with the <filename>content</filename>
  directory.</para>
</note>
</para>
</refsection>
</refentry>

<refentry version="5.0" id="webhelp.tree.cookie.id">
<refmeta>
<refentrytitle>webhelp.tree.cookie.id</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>webhelp.tree.cookie.id</refname>
<refpurpose>Controls how the cookie that stores the webhelp toc state is named.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="webhelp.tree.cookie.id.frag">
&lt;xsl:param name="webhelp.tree.cookie.id" select="concat( 'treeview-', count(//node()) )"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The webhelp output does not use a frameset. Instead, the table of contents is a div on each page. To preserve the state of the table of contents as the user navigates from page to page, webhelp stores the state in a cookie and reads that cookie when you get to the next page. If you've published several webhelp documents on the same domain, it is important that each cookie have a unique id. In lieu of calling on a GUID generator, by default this parameter is just set to the number of nodes in the document on the assumption that it is unlikely that you will have more than one document with the exact number of nodes. A more optimal solution would be for the user to pass in some unique, stable identifier from the build system to use as the webhelp cookie id. For example, if you have safeguards in place to ensure that the xml:id of the root element of each document will be unique on your site, then you could set webhelptree.cookie.id as follows:
<programlisting>
  &lt;xsl:param name="webhelp.tree.cookie.id"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="/*/@xml:id"&gt;
	&lt;xsl:value-of select="concat('treeview-',/*/@xml:id)"/&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
	&lt;xsl:value-of select="concat( 'treeview-', count(//node()) )"/&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:param&gt;
  </programlisting>
 </para>
</refsection>
</refentry>

</reference><reference id="javahelp" xml:base="../html/param.xml"><title>JavaHelp</title>
<refentry version="5.0" id="javahelp.encoding">
<refmeta>
<refentrytitle>javahelp.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>javahelp.encoding</refname>
<refpurpose>Character encoding to use in control files for JavaHelp.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="javahelp.encoding.frag">
&lt;xsl:param name="javahelp.encoding"&gt;iso-8859-1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
  
<para>JavaHelp crashes on some characters when written as character
references. In that case you can use this parameter to select an appropriate encoding.</para>
  
</refsection>
</refentry>




</reference><reference id="l10n" xml:base="../html/param.xml"><title>Localization</title>
<refentry version="5.0" id="l10n.gentext.language">
<refmeta>
<refentrytitle>l10n.gentext.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.language</refname>
<refpurpose>Sets the gentext language</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.gentext.language.frag">
&lt;xsl:param name="l10n.gentext.language"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If this parameter is set to any value other than the empty string, its
value will be used as the value for the language when generating text. Setting
<parameter>l10n.gentext.language</parameter> overrides any settings within the
document being formatted.</para>

<para>It's much more likely that you might want to set the
<parameter>l10n.gentext.default.language</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.gentext.default.language">
  <refmeta>
    <refentrytitle>l10n.gentext.default.language</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>l10n.gentext.default.language</refname>
    <refpurpose>Sets the default language for generated text</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<programlisting id="l10n.gentext.default.language.frag">
&lt;xsl:param name="l10n.gentext.default.language"&gt;en&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of the <parameter>l10n.gentext.default.language</parameter>
parameter is used as the language for generated text if no setting is provided
in the source document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.gentext.use.xref.language">
<refmeta>
<refentrytitle>l10n.gentext.use.xref.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.use.xref.language</refname>
<refpurpose>Use the language of target when generating cross-reference text?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.gentext.use.xref.language.frag">
&lt;xsl:param name="l10n.gentext.use.xref.language" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the language of the target will be used when
generating cross reference text. Usually, the <quote>current</quote>
language is used when generating text (that is, the language of the
element that contains the cross-reference element). But setting this parameter
allows the language of the element <emphasis>pointed to</emphasis> to control
the generated text.</para>

<para>Consider the following example:</para>

<informalexample>
<programlisting>&lt;para lang="en"&gt;See also &lt;xref linkend="chap3"/&gt;.&lt;/para&gt;
</programlisting>
</informalexample>

<para>Suppose that Chapter 3 happens to be written in German.
If <parameter>l10n.gentext.use.xref.language</parameter> is non-zero, the
resulting text will be something like this:</para>

<blockquote>
<para>See also Kapital 3.</para>
</blockquote>

<para>Where the more traditional rendering would be:</para>

<blockquote>
<para>See also Chapter 3.</para>
</blockquote>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.lang.value.rfc.compliant">
<refmeta>
<refentrytitle>l10n.lang.value.rfc.compliant</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.lang.value.rfc.compliant</refname>
<refpurpose>Make value of lang attribute RFC compliant?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.lang.value.rfc.compliant.frag">
&lt;xsl:param name="l10n.lang.value.rfc.compliant" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, ensure that the values for all <tag class="attribute">lang</tag> attributes in HTML output are RFC
compliant<footnote><para>Section 8.1.1, <link xlink:href="http://www.w3.org/TR/REC-html40/struct/dirlang.html#h-8.1.1">Language Codes</link>, in the HTML 4.0 Recommendation states that:

<blockquote><para>[RFC1766] defines and explains the language codes
that must be used in HTML documents.</para>
<para>Briefly, language codes consist of a primary code and a possibly
empty series of subcodes:

<literallayout class="monospaced">language-code = primary-code ( "-" subcode )*</literallayout>
</para>
<para>And in RFC 1766, <link xlink:href="http://www.ietf.org/rfc/rfc1766.txt">Tags for the Identification
of Languages</link>, the EBNF for "language tag" is given as:

<literallayout class="monospaced">Language-Tag = Primary-tag *( "-" Subtag )
Primary-tag = 1*8ALPHA
Subtag = 1*8ALPHA</literallayout>
</para>
</blockquote>
</para></footnote>.

by taking any underscore characters in any <tag class="attribute">lang</tag> values found in source documents, and
replacing them with hyphen characters in output HTML files. For
example, <literal>zh_CN</literal> in a source document becomes
<literal>zh-CN</literal> in the HTML output form that source.

<note>
<para>This parameter does not cause any case change in <tag class="attribute">lang</tag> values, because RFC 1766
explicitly states that all "language tags" (as it calls them) "are
to be treated as case insensitive".</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="writing.mode">
<refmeta>
<refentrytitle>writing.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>writing.mode</refname>
<refpurpose>Direction of text flow based on locale</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="writing.mode.frag">
&lt;xsl:param name="writing.mode"&gt;
  &lt;xsl:call-template name="gentext"&gt;
    &lt;xsl:with-param name="key"&gt;writing-mode&lt;/xsl:with-param&gt;
    &lt;xsl:with-param name="lang"&gt;
      &lt;xsl:call-template name="l10n.language"&gt;
        &lt;xsl:with-param name="target" select="/*[1]"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:with-param&gt;
  &lt;/xsl:call-template&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets direction of text flow and text alignment based on locale.
The value is normally taken from the gentext file for the 
lang attribute of the document's root element, using the 
key name 'writing-mode' to look it up in the gentext file.
But this param can also be
set on the command line to override that gentext value.
</para>
<para>Accepted values are:
<variablelist>
  <varlistentry>
    <term>lr-tb</term>
    <listitem>
      <para>Left-to-right text flow in each line, lines stack top to bottom.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>rl-tb</term>
    <listitem>
      <para>Right-to-left text flow in each line, lines stack top to bottom.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>tb-rl</term>
    <listitem>
      <para>Top-to-bottom text flow in each vertical line, lines stack right to left.
      Supported by only a few XSL-FO processors. Not supported in HTML output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>lr</term>
    <listitem>
      <para>Shorthand for lr-tb.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>rl</term>
    <listitem>
      <para>Shorthand for rl-tb.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>tb</term>
    <listitem>
      <para>Shorthand for tb-rl.</para>
    </listitem>
  </varlistentry>
</variablelist>
</para>

</refsection>
</refentry>

</reference>
    </part>
    <part id="fo">
      <?dbhtml dir="fo"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../fo/param.xml">FO Parameter Reference</title>
      <partintro id="fointro">
        
  <para xml:base="../fo/param.xml">This is reference documentation for all user-configurable
  parameters in the DocBook XSL FO stylesheets (for generating
  XSL-FO output destined for final print/PDF output).</para>

      </partintro>
      <reference id="admons" xml:base="../fo/param.xml"><title>Admonitions</title>
<refentry version="5.0" id="admon.graphics">
<refmeta>
<refentrytitle>admon.graphics</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics</refname>
<refpurpose>Use graphics in admonitions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.frag">
&lt;xsl:param name="admon.graphics" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="admon.graphics.extension">
<refmeta>
<refentrytitle>admon.graphics.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.extension</refname>
<refpurpose>Filename extension for admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.extension.frag">
&lt;xsl:param name="admon.graphics.extension"&gt;.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the filename extension to use on admonition graphics.</para>

<itemizedlist>
  <para>The DocBook XSL distribution provides admonition graphics in the following formats:</para>
  <listitem><para>GIF (extension: <filename class="extension">.gif</filename>)</para></listitem>
  <listitem><para>PNG (extension: <filename class="extension">.png</filename>)</para></listitem>
  <listitem><para>SVG (extension: <filename class="extension">.svg</filename>)</para></listitem>
  <listitem><para>TIFF (extension: <filename class="extension">.tif</filename>)</para></listitem>
</itemizedlist>

</refsection>
</refentry>

<refentry version="5.0" id="admon.graphics.path">
<refmeta>
<refentrytitle>admon.graphics.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.path</refname>
<refpurpose>Path to admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.graphics.path.frag">&lt;xsl:param name="admon.graphics.path"&gt;images/&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the path to the directory containing the admonition graphics
(caution.png, important.png etc). This location is normally relative
to the output html directory. See <parameter>base.dir</parameter></para>

</refsection>
</refentry>

<refentry version="5.0" id="admon.textlabel">
<refmeta>
<refentrytitle>admon.textlabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.textlabel</refname>
<refpurpose>Use text label in admonitions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admon.textlabel.frag">
&lt;xsl:param name="admon.textlabel" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), admonitions are presented with a generated
text label such as Note or Warning in the appropriate language.
If zero, such labels are turned off, but any title child
of the admonition element are still output.
The default value is 1.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="admonition.title.properties">

<refmeta>
  <refentrytitle>admonition.title.properties</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admonition.title.properties</refname>
<refpurpose>To set the style for admonitions titles.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admonition.title.properties.frag">
&lt;xsl:attribute-set name="admonition.title.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;14pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>How do you want admonitions titles styled? </para>
<para>Set the font-size, weight etc to the style required.</para>

</refsection>
</refentry>

<refentry version="5.0" id="admonition.properties">
<refmeta>
  <refentrytitle>admonition.properties</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>admonition.properties</refname>
<refpurpose>To set the style for admonitions.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="admonition.properties.frag">&lt;xsl:attribute-set name="admonition.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>How do you want admonitions styled? </para>
<para>Set the font-size, weight, etc. to the style required</para>

</refsection>
</refentry>

<refentry version="5.0" id="graphical.admonition.properties">
<refmeta>
<refentrytitle>graphical.admonition.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphical.admonition.properties</refname>
<refpurpose>To add properties to the outer block of a graphical admonition.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="graphical.admonition.properties.frag">&lt;xsl:attribute-set name="graphical.admonition.properties"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the outer block containing the
entire graphical admonition, including its title.
It is used when the parameter
<parameter>admon.graphics</parameter> is set to nonzero.
Use this attribute-set to set the space above and below,
and any indent for the whole admonition.</para>

<para>In addition to these properties, a graphical admonition
also applies the <parameter>admonition.title.properties</parameter>
attribute-set to the title, and applies the
<parameter>admonition.properties</parameter> attribute-set
to the rest of the content.</para>

</refsection>
</refentry>

<refentry version="5.0" id="nongraphical.admonition.properties">
<refmeta>
<refentrytitle>nongraphical.admonition.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nongraphical.admonition.properties</refname>
<refpurpose>To add properties to the outer block of a nongraphical admonition.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nongraphical.admonition.properties.frag">&lt;xsl:attribute-set name="nongraphical.admonition.properties"&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-{$direction.align.start}"&gt;0.25in&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-{$direction.align.end}"&gt;0.25in&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the outer block containing the
entire nongraphical admonition, including its title.
It is used when the parameter
<parameter>admon.graphics</parameter> is set to zero.
Use this attribute-set to set the space above and below,
and any indent for the whole admonition.</para>

<para>In addition to these properties, a nongraphical admonition
also applies the <parameter>admonition.title.properties</parameter>
attribute-set to the title, and the
<parameter>admonition.properties</parameter> attribute-set
to the rest of the content.</para>

</refsection>
</refentry>

</reference><reference id="callouts" xml:base="../fo/param.xml"><title>Callouts</title>
<refentry version="5.0" id="calloutlist.properties">
<refmeta>
<refentrytitle>calloutlist.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>calloutlist.properties</refname>
<refpurpose>Properties that apply to each list-block generated by calloutlist.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="calloutlist.properties.frag">&lt;xsl:attribute-set name="calloutlist.properties"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="provisional-distance-between-starts"&gt;2.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="provisional-label-separation"&gt;0.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to the fo:list-block generated by calloutlist.
Typically used to adjust spacing or margins of the entire list.
Change the <literal>provisional-distance-between-starts</literal> attribute to
change the indent of the list paragraphs relative to the
callout numbers.</para>
</refsection>
</refentry>

<refentry version="5.0" id="callout.properties">
<refmeta>
<refentrytitle>callout.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.properties</refname>
<refpurpose>Properties that apply to the list-item generated by each callout within a calloutlist.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.properties.frag">&lt;xsl:attribute-set name="callout.properties"&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to the fo:list-item generated by each callout within a calloutlist. Typically used to add spacing properties.</para>
</refsection>
</refentry>

<refentry version="5.0" id="callout.defaultcolumn">
<refmeta>
<refentrytitle>callout.defaultcolumn</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.defaultcolumn</refname>
<refpurpose>Indicates what column callouts appear in by default</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.defaultcolumn.frag">
&lt;xsl:param name="callout.defaultcolumn"&gt;60&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If a callout does not identify a column (for example, if it uses
the <literal>linerange</literal> <tag class="attribute">unit</tag>),
it will appear in the default column.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics">
<refmeta>
<refentrytitle>callout.graphics</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics</refname>
<refpurpose>Use graphics for callouts?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.frag">
&lt;xsl:param name="callout.graphics" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, callouts are presented with graphics (e.g., reverse-video
circled numbers instead of "(1)", "(2)", etc.).
Default graphics are provided in the distribution.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.extension">
<refmeta>
<refentrytitle>callout.graphics.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.extension</refname>
<refpurpose>Filename extension for callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.extension.frag">

&lt;xsl:param name="callout.graphics.extension"&gt;.svg&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Sets the filename extension to use on callout graphics. </para>

<itemizedlist>
<para>The Docbook XSL distribution provides callout graphics in the following formats:</para>
<listitem><para>SVG (extension: <filename class="extension">.svg</filename>)</para></listitem>
<listitem><para>PNG (extension: <filename class="extension">.png</filename>)</para></listitem>
<listitem><para>GIF (extension: <filename class="extension">.gif</filename>)</para></listitem>
</itemizedlist>
</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.number.limit">
<refmeta>
<refentrytitle>callout.graphics.number.limit</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.number.limit.frag">

&lt;xsl:param name="callout.graphics.number.limit"&gt;30&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.graphics</parameter> is non-zero, graphics
are used to represent callout numbers instead of plain text. The value
of <parameter>callout.graphics.number.limit</parameter> is the largest
number for which a graphic exists. If the callout number exceeds this
limit, the default presentation "(plain text instead of a graphic)"
will  be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.graphics.path">
<refmeta>
<refentrytitle>callout.graphics.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.path</refname>
<refpurpose>Path to callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.graphics.path.frag">
&lt;xsl:param name="callout.graphics.path"&gt;images/callouts/&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the path to the directory holding the callout graphics. his
location is normally relative to the output html directory. see
base.dir. Always terminate the directory with / since the graphic file
is appended to this string, hence needs the separator.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.icon.size">
<refmeta>
<refentrytitle>callout.icon.size</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.icon.size</refname>
<refpurpose>Specifies the size of callout marker icons</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.icon.size.frag">
&lt;xsl:param name="callout.icon.size"&gt;7pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the size of the callout marker icons.
The default size is 7 points.</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode">
<refmeta>
<refentrytitle>callout.unicode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode</refname>
<refpurpose>Use Unicode characters rather than images for callouts.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.frag">&lt;xsl:param name="callout.unicode" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode.font">
<refmeta>
<refentrytitle>callout.unicode.font</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.font</refname>
<refpurpose>Specify a font for Unicode glyphs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.font.frag">
&lt;xsl:param name="callout.unicode.font"&gt;ZapfDingbats&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The name of the font to specify around Unicode callout glyphs.
If set to the empty string, no font change will occur.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode.number.limit">
<refmeta>
<refentrytitle>callout.unicode.number.limit</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.number.limit</refname>
<refpurpose>Number of the largest unicode callout character</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.number.limit.frag">
&lt;xsl:param name="callout.unicode.number.limit"&gt;10&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter>callout.unicode.number.limit</parameter>
is
the largest number for which a unicode character exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callout.unicode.start.character">
<refmeta>
<refentrytitle>callout.unicode.start.character</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.start.character</refname>
<refpurpose>First Unicode character to use, decimal value.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callout.unicode.start.character.frag">
&lt;xsl:param name="callout.unicode.start.character"&gt;10102&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>callout.graphics</parameter> is zero and <parameter>callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter>callout.unicode.start.character</parameter>
is the decimal unicode value used for callout number one. Currently, 
only values 9312 and 10102 are supported in the stylesheets for this parameter. 
</para>

</refsection>
</refentry>

<refentry version="5.0" id="callouts.extension">
<refmeta>
<refentrytitle>callouts.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callouts.extension</refname>
<refpurpose>Enable the callout extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="callouts.extension.frag">
&lt;xsl:param name="callouts.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The callouts extension processes <tag>areaset</tag>
elements in <tag>programlistingco</tag> and other text-based
callout elements.
</para>

</refsection>
</refentry>

</reference><reference id="toc_index" xml:base="../fo/param.xml"><title>ToC/LoT/Index Generation</title>
<refentry version="5.0" id="autotoc.label.separator">
<refmeta>
<refentrytitle>autotoc.label.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>autotoc.label.separator</refname>
<refpurpose>Separator between labels and titles in the ToC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="autotoc.label.separator.frag">
&lt;xsl:param name="autotoc.label.separator"&gt;. &lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>String used to separate labels and titles in a table of contents.</para>

</refsection>
</refentry>

<refentry version="5.0" id="process.empty.source.toc">
<refmeta>
<refentrytitle>process.empty.source.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.empty.source.toc</refname>
<refpurpose>Generate automated TOC if <tag>toc</tag> element occurs in a source document?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="process.empty.source.toc.frag">&lt;xsl:param name="process.empty.source.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies that if an empty <tag>toc</tag> element is found in a
source document, an automated TOC is generated at this point in the
document.
<note>
  <para>Depending on what the value of the
  <parameter>generate.toc</parameter> parameter is, setting this
  parameter to <literal>1</literal> could result in generation of
  duplicate automated TOCs. So the
  <parameter>process.empty.source.toc</parameter> is primarily useful
  as an "override": by placing an empty <tag>toc</tag> in your
  document and setting this parameter to <literal>1</literal>, you can
  force a TOC to be generated even if <tag>generate.toc</tag>
  says not to.</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="process.source.toc">
<refmeta>
<refentrytitle>process.source.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.source.toc</refname>
<refpurpose>Process a non-empty <tag>toc</tag> element if it occurs in a source document?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="process.source.toc.frag">&lt;xsl:param name="process.source.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies that the contents of a non-empty "hard-coded"
<tag>toc</tag> element in a source document are processed to
generate a TOC in output.
<note>
  <para>This parameter has no effect on automated generation of
  TOCs. An automated TOC may still be generated along with the
  "hard-coded" TOC. To suppress automated TOC generation, adjust the
  value of the <parameter>generate.toc</parameter> paramameter.</para>

  <para>The <tag>process.source.toc</tag> parameter also has
  no effect if the <tag>toc</tag> element is empty; handling
  for empty <tag>toc</tag> is controlled by the
  <parameter>process.empty.source.toc</parameter> parameter.</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.toc">
<refmeta>
<refentrytitle>generate.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.toc</refname>
<refpurpose>Control generation of ToCs and LoTs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.toc.frag">

&lt;xsl:param name="generate.toc"&gt;
/appendix toc,title
article/appendix  nop
/article  toc,title
book      toc,title,figure,table,example,equation
/chapter  toc,title
part      toc,title
/preface  toc,title
reference toc,title
/sect1    toc
/sect2    toc
/sect3    toc
/sect4    toc
/sect5    toc
/section  toc
set       toc,title
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter has a structured value. It is a table of space-delimited
path/value pairs. Each path identifies some element in the source document
using a restricted subset of XPath (only the implicit child axis, no wildcards,
no predicates). Paths can be either relative or absolute.</para>

<para>When processing a particular element, the stylesheets consult this table to
determine if a ToC (or LoT(s)) should be generated.</para>

<para>For example, consider the entry:</para>

<screen>book toc,figure</screen>

<para>This indicates that whenever a <tag>book</tag> is formatted, a
Table Of Contents and a List of Figures should be generated. Similarly,</para>

<screen>/chapter toc</screen>

<para>indicates that whenever a document <emphasis>that has a root
of</emphasis> <tag>chapter</tag> is formatted, a Table of
Contents should be generated. The entry <literal>chapter</literal> would match
all chapters, but <literal>/chapter</literal> matches only <tag>chapter</tag>
document elements.</para>

<para>Generally, the longest match wins. So, for example, if you want to distinguish
articles in books from articles in parts, you could use these two entries:</para>

<screen>book/article toc,figure
part/article toc</screen>

<para>Note that an article in a part can never match a <literal>book/article</literal>,
so if you want nothing to be generated for articles in parts, you can simply leave
that rule out.</para>

<para>If you want to leave the rule in, to make it explicit that you're turning
something off, use the value <quote>nop</quote>. For example, the following
entry disables ToCs and LoTs for articles:</para>

<screen>article nop</screen>

<para>Do not simply leave the word <quote>article</quote> in the file
without a matching value. That'd be just begging the silly little
path/value parser to get confused.</para>

<para>Section ToCs are further controlled by the
<parameter>generate.section.toc.level</parameter> parameter.
For a given section level to have a ToC, it must have both an entry in 
<parameter>generate.toc</parameter> and be within the range enabled by
<parameter>generate.section.toc.level</parameter>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="generate.index">
<refmeta>
<refentrytitle>generate.index</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.index</refname>
<refpurpose>Do you want an index?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.index.frag">&lt;xsl:param name="generate.index" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specify if an index should be generated. </para>

</refsection>
</refentry>

<refentry version="5.0" id="make.index.markup">
<refmeta>
<refentrytitle>make.index.markup</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.index.markup</refname>
<refpurpose>Generate XML index markup in the index?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.index.markup.frag">
&lt;xsl:param name="make.index.markup" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter enables a very neat trick for getting properly
merged, collated back-of-the-book indexes. G. Ken Holman suggested
this trick at Extreme Markup Languages 2002 and I'm indebted to him
for it.</para>

<para>Jeni Tennison's excellent code in
<filename>autoidx.xsl</filename> does a great job of merging and
sorting <tag>indexterm</tag>s in the document and building a
back-of-the-book index. However, there's one thing that it cannot
reasonably be expected to do: merge page numbers into ranges. (I would
not have thought that it could collate and suppress duplicate page
numbers, but in fact it appears to manage that task somehow.)</para>

<para>Ken's trick is to produce a document in which the index at the
back of the book is <quote>displayed</quote> in XML. Because the index
is generated by the FO processor, all of the page numbers have been resolved.
It's a bit hard to explain, but what it boils down to is that instead of having
an index at the back of the book that looks like this:</para>

<blockquote>
<formalpara><info><title>A</title></info>
<para>ap1, 1, 2, 3</para>
</formalpara>
</blockquote>

<para>you get one that looks like this:</para>

<blockquote>
<programlisting>&lt;indexdiv&gt;A&lt;/indexdiv&gt;
&lt;indexentry&gt;
&lt;primaryie&gt;ap1&lt;/primaryie&gt;,
&lt;phrase role="pageno"&gt;1&lt;/phrase&gt;,
&lt;phrase role="pageno"&gt;2&lt;/phrase&gt;,
&lt;phrase role="pageno"&gt;3&lt;/phrase&gt;
&lt;/indexentry&gt;</programlisting>
</blockquote>

<para>After building a PDF file with this sort of odd-looking index, you can
extract the text from the PDF file and the result is a proper index expressed in
XML.</para>

<para>Now you have data that's amenable to processing and a simple Perl script
(such as <filename>fo/pdf2index</filename>) can
merge page ranges and generate a proper index.</para>

<para>Finally, reformat your original document using this literal index instead of
an automatically generated one and <quote>bingo</quote>!</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.method">
<refmeta>
<refentrytitle>index.method</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">basic</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kosek</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kimber</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.method</refname>
<refpurpose>Select method used to group index entries in an index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.method.frag">
&lt;xsl:param name="index.method"&gt;basic&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter lets you select which method to use for sorting and grouping
 index entries in an index.
Indexes in Latin-based languages that have accented characters typically
sort together accented words and unaccented words.
Thus <quote>&#193;</quote> (U+00C1 LATIN CAPITAL LETTER A WITH ACUTE) would sort together
with <quote>A</quote> (U+0041 LATIN CAPITAL LETTER A), so both would appear in the <quote>A</quote>
section of the index.
Languages using other alphabets (such as Russian,  which is written in the Cyrillic alphabet)
and languages using ideographic chararacters (such as Japanese)
require grouping specific to the languages and alphabets.
</para>

<para>The default indexing method is limited.
It can group accented characters in Latin-based languages only.
It cannot handle non-Latin alphabets or ideographic languages.
The other indexing methods require extensions of one type or
another, and do not work with
all XSLT processors, which is why they are not used by default.</para>

<para>The three choices for indexing method are:</para>
<variablelist>
<varlistentry>
<term><literal>basic</literal></term>
<listitem>
<para>
(default)  Sort and groups words based only on the Latin alphabet.
Words with accented Latin letters will group and sort with
their respective primary letter, but
words in non-Latin alphabets will be
put in the <quote>Symbols</quote> section of the index.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>kosek</literal></term>
<listitem>
<para>
This method sorts and groups words based on letter groups configured in
the DocBook locale file for the given language.
See, for example, the French locale file <filename>common/fr.xml</filename>.
This method requires that the XSLT processor
supports the EXSLT extensions (most do).
It also requires support for using 
user-defined functions in xsl:key (xsltproc does not).
</para>
<para>This method is suitable for any language for which you can
list all the individual characters that should appear
in each letter group in an index.
It is probably not practical to use it for ideographic languages
such as Chinese that have hundreds or thousands of characters.
</para>

<para>To use the kosek method, you must:</para>

<orderedlist>
<listitem>
<para>Use a processor that supports its extensions, such as
Saxon 6 or Xalan (xsltproc and Saxon 8 do not).
</para>
</listitem>
<listitem>
<para>Set the index.method parameter's value to <quote>kosek</quote>.
</para>
</listitem>
<listitem>
<para>Import the appropriate index extensions stylesheet module
<filename>fo/autoidx-kosek.xsl</filename> or 
<filename>html/autoidx-kosek.xsl</filename> into your
customization.
</para>
</listitem>
</orderedlist>

</listitem>
</varlistentry>
<varlistentry>
<term><literal>kimber</literal></term>
<listitem>
<para>
This method uses extensions to the Saxon processor to implement
sophisticated indexing processes. It uses its own 
configuration file, which can include information for any number of
languages. Each language's configuration can group
words using one of two processes. In the
enumerated process similar to that used in the kosek method,
you indicate the groupings character-by-character.
In the between-key process, you specify the
break-points in the sort order that should start a new group.
The latter configuration is useful for ideographic languages
such as Chinese, Japanese, and Korean.
You can also define your own collation algorithms and how you
want mixed Latin-alphabet words sorted.</para>
<itemizedlist>
<listitem>
<para>For a whitepaper describing the extensions, see:
<link xlink:href="http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf">http://www.innodata-isogen.com/knowledge_center/white_papers/back_of_book_for_xsl_fo.pdf</link>.
</para>
</listitem>
<listitem>
<para>To download the extension library, see
<link xlink:href="http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport">http://www.innodata-isogen.com/knowledge_center/tools_downloads/i18nsupport</link>.
</para>
</listitem>
</itemizedlist>

<para>To use the kimber method, you must:</para>

<orderedlist>
<listitem>
<para>Use Saxon (version 6 or 8) as your XSLT processor.
</para>
</listitem>
<listitem>
<para>Install and configure the Innodata Isogen library, using
the documentation that comes with it.
</para>
</listitem>
<listitem>
<para>Set the index.method parameter's value to <quote>kimber</quote>.
</para>
</listitem>
<listitem>
<para>Import the appropriate index extensions stylesheet module
<filename>fo/autoidx-kimber.xsl</filename> or 
<filename>html/autoidx-kimber.xsl</filename> into your
customization.
</para>
</listitem>
</orderedlist>

</listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="index.on.type">
<refmeta>
<refentrytitle>index.on.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.on.type</refname>
<refpurpose>Select indexterms based on <tag class="attribute">type</tag>
attribute value</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.on.type.frag">
&lt;xsl:param name="index.on.type" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, 
then an <tag>index</tag> element that has a
<tag class="attribute">type</tag> attribute
value will contain only those <tag>indexterm</tag>
elements with a matching <tag class="attribute">type</tag> attribute value.
If an <tag>index</tag> has no <tag class="attribute">type</tag>
attribute or it is blank, then the index will contain
all <tag>indexterm</tag>s in the current scope.
</para>

<para>
If <literal>index.on.type</literal> is zero, then the
<tag class="attribute">type</tag> attribute has no effect
on selecting indexterms for an index.
</para>

<para>For those using DocBook version 4.2 or earlier,
the <tag class="attribute">type</tag> attribute is not available
for index terms.  However, you can achieve the same
effect by using the <tag class="attribute">role</tag> attribute
in the same manner on <tag>indexterm</tag>
and <tag>index</tag>, and setting the stylesheet parameter 
<parameter>index.on.role</parameter> to a nonzero value.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.on.role">
<refmeta>
<refentrytitle>index.on.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.on.role</refname>
<refpurpose>Select indexterms based on <tag class="attribute">role</tag> value</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.on.role.frag">
&lt;xsl:param name="index.on.role" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
If non-zero, 
then an <tag>index</tag> element that has a
<tag class="attribute">role</tag> attribute
value will contain only those <tag>indexterm</tag>
elements with a matching role value.
If an <tag>index</tag> has no <tag class="attribute">role</tag>
attribute or it is blank, then the index will contain
all <tag>indexterm</tag>s in the current scope.
</para>
<para>
If <literal>index.on.role</literal> is zero, then the
<tag class="attribute">role</tag> attribute has no effect
on selecting indexterms for an index.
</para>

<para>If you are using DocBook version 4.3 or later, you should
use the <tag class="attribute">type</tag> attribute instead of <tag class="attribute">role</tag>
on <tag>indexterm</tag> and <tag>index</tag>,
and set the <parameter>index.on.type</parameter> to a nonzero
value.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.preferred.page.properties">
<refmeta>
<refentrytitle>index.preferred.page.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.preferred.page.properties</refname>
<refpurpose>Properties used to emphasize page number references for
significant index terms</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.preferred.page.properties.frag">
&lt;xsl:attribute-set name="index.preferred.page.properties"&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties used to emphasize page number references for
significant index terms (<tag class="attribute">significance</tag>=<tag class="attvalue">preferred</tag>). Currently works only with
XEP.</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.entry.properties">
<refmeta>
<refentrytitle>index.entry.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.entry.properties</refname>
<refpurpose>Properties applied to the formatted entries
in an index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.entry.properties.frag">
&lt;xsl:attribute-set name="index.entry.properties"&gt;
  &lt;xsl:attribute name="start-indent"&gt;0pt&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to the block containing
the entries in a letter division in an index.  It can be used to set the
font-size, font-family, and other inheritable properties that will be
applied to all index entries.</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.div.title.properties">
<refmeta>
<refentrytitle>index.div.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.div.title.properties</refname>
<refpurpose>Properties associated with the letter headings in an
index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.div.title.properties.frag">
&lt;xsl:attribute-set name="index.div.title.properties"&gt;
  &lt;xsl:attribute name="margin-{$direction.align.start}"&gt;0pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;14.4pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-family"&gt;&lt;xsl:value-of select="$title.fontset"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;&lt;xsl:value-of select="concat($body.font.master,'pt')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;&lt;xsl:value-of select="concat($body.font.master,'pt * 0.8')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;&lt;xsl:value-of select="concat($body.font.master,'pt * 1.2')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="start-indent"&gt;0pt&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is used on the letter headings that separate
the divisions in an index.</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.number.separator">
<refmeta>
<refentrytitle>index.number.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.number.separator</refname>
<refpurpose>Override for punctuation separating page numbers in index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.number.separator.frag">
&lt;xsl:param name="index.number.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you to override the text to insert between
page references in a formatted index entry.  Typically 
that would be a comma and a space.
</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'number-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
override the gentext with the content of this parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
</para>

<para>In HTML index output, section title references are used instead of
page number references.  This punctuation appears between
such section titles in an HTML index.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.range.separator">
<refmeta>
<refentrytitle>index.range.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.range.separator</refname>
<refpurpose>Override for punctuation separating the two numbers
in a page range in index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.range.separator.frag">
&lt;xsl:param name="index.range.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you
to override the text to insert between
the two numbers of a page range in an index.
This parameter is only used by those XSL-FO processors
that support an extension for generating such page ranges
(such as XEP).</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'range-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
override the gentext with the content of this parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
</para>

<para>In HTML index output, section title references are used instead of
page number references. So there are no page ranges
and this parameter has no effect.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.term.separator">
<refmeta>
<refentrytitle>index.term.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.term.separator</refname>
<refpurpose>Override for punctuation separating an index term 
from its list of page references in an index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.term.separator.frag">
&lt;xsl:param name="index.term.separator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter permits you to override
the text to insert between
the end of an index term and its list of page references.
Typically that might be a comma and a space.
</para>

<para>Because this text may be locale dependent,
this parameter's value is normally taken from a gentext
template named 'term-separator' in the
context 'index' in the stylesheet
locale file for the language
of the current document.
This parameter can be used to override the gentext string,
and would typically be used on the command line.
This parameter would apply to all languages.
</para>

<para>So this text string can be customized in two ways.
You can reset the default gentext string using
the <parameter>local.l10n.xml</parameter> parameter, or you can
fill in the content for this normally empty 
override parameter.
The content can be a simple string, or it can be
something more complex such as a call-template.
For fo output, it could be an <tag>fo:leader</tag>
element to provide space of a specific length, or a dot leader.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="xep.index.item.properties">
<refmeta>
<refentrytitle>xep.index.item.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xep.index.item.properties</refname>
<refpurpose>Properties associated with XEP index-items</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xep.index.item.properties.frag">
&lt;xsl:attribute-set name="xep.index.item.properties" use-attribute-sets="index.page.number.properties"&gt;
  &lt;xsl:attribute name="merge-subsequent-page-numbers"&gt;true&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="link-back"&gt;true&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties associated with XEP index-items, which generate
page numbers in an index processed by XEP. For more info see
the XEP documentation section "Indexes" in
<uri xlink:href="http://www.renderx.com/reference.html#Indexes">http://www.renderx.com/reference.html#Indexes</uri>.</para>

<para>This attribute-set also adds by default any properties from the
<tag class="attribute">index.page.number.properties</tag>
attribute-set.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.section.depth">
<refmeta>
<refentrytitle>toc.section.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.section.depth</refname>
<refpurpose>How deep should recursive <tag>section</tag>s appear
in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.section.depth.frag">&lt;xsl:param name="toc.section.depth"&gt;2&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the depth to which recursive sections should appear in the
TOC.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.max.depth">
<refmeta>
<refentrytitle>toc.max.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.max.depth</refname>
<refpurpose>How many levels should be created for each TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.max.depth.frag">&lt;xsl:param name="toc.max.depth"&gt;8&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the maximal depth of TOC on all levels.</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.indent.width">
<refmeta>
<refentrytitle>toc.indent.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">float</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.indent.width</refname>
<refpurpose>Amount of indentation for TOC entries</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.indent.width.frag">
&lt;xsl:param name="toc.indent.width"&gt;24&lt;/xsl:param&gt;
&lt;!-- inconsistant point specification? --&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies, in points, the distance by which each level of the
TOC is indented from its parent.</para>

<para>This value is expressed in points, without
a unit (in other words, it is a bare number). Using a bare number allows the stylesheet
to perform calculations that would otherwise have to be performed by the FO processor
because not all processors support expressions.</para>

</refsection>
</refentry>

<refentry version="5.0" id="toc.line.properties">
<refmeta>
<refentrytitle>toc.line.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.line.properties</refname>
<refpurpose>Properties for lines in ToCs and LoTs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.line.properties.frag">
&lt;xsl:attribute-set name="toc.line.properties"&gt;
  &lt;xsl:attribute name="text-align-last"&gt;justify&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="end-indent"&gt;&lt;xsl:value-of select="concat($toc.indent.width, 'pt')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="last-line-end-indent"&gt;&lt;xsl:value-of select="concat('-', $toc.indent.width, 'pt')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties which are applied to every line in ToC (or LoT). You can
modify them in order to change appearance of all, or some lines. For
example, in order to make lines for chapters bold, specify the
following in your customization layer:</para>

<programlisting>&lt;xsl:attribute-set name="toc.line.properties"&gt;
  &lt;xsl:attribute name="font-weight"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="self::chapter"&gt;bold&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;normal&lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="toc.margin.properties">
<refmeta>
<refentrytitle>toc.margin.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.margin.properties</refname>
<refpurpose>Margin properties used on Tables of Contents</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.margin.properties.frag">
&lt;xsl:attribute-set name="toc.margin.properties"&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>This attribute set is used on Tables of Contents. These attributes are set
on the wrapper that surrounds the ToC block, not on each individual lines.</para>
</refsection>
</refentry>

<refentry version="5.0" id="bridgehead.in.toc">
<refmeta>
<refentrytitle>bridgehead.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bridgehead.in.toc</refname>
<refpurpose>Should bridgehead elements appear in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bridgehead.in.toc.frag">&lt;xsl:param name="bridgehead.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>bridgehead</tag>s appear in the TOC. Note that
this option is not fully supported and may be removed in a future
version of the stylesheets.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="simplesect.in.toc">
<refmeta>
<refentrytitle>simplesect.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>simplesect.in.toc</refname>
<refpurpose>Should <tag>simplesect</tag> elements appear in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="simplesect.in.toc.frag">&lt;xsl:param name="simplesect.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>simplesect</tag>s will be included in the TOC.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.section.toc.level">
<refmeta>
<refentrytitle>generate.section.toc.level</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.section.toc.level</refname>
<refpurpose>Control depth of TOC generation in sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.section.toc.level.frag">
&lt;xsl:param name="generate.section.toc.level" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>generate.section.toc.level</parameter> parameter
controls the depth of <tag>section</tag> in which TOCs will be generated. Note
that this is related to, but not the same as
<parameter>toc.section.depth</parameter>, which controls the depth to
which TOC entries will be generated in a given TOC.</para>
<para>If, for example, <parameter>generate.section.toc.level</parameter>
is <literal>3</literal>, TOCs will be generated in first, second, and third
level sections, but not in fourth level sections.
</para>

</refsection>
</refentry>




</reference><reference id="fo_ext" xml:base="../fo/param.xml"><title>Processor Extensions</title>
<refentry version="5.0" id="arbortext.extensions">
<refmeta>
<refentrytitle>arbortext.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>arbortext.extensions</refname>
<refpurpose>Enable Arbortext extensions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="arbortext.extensions.frag">&lt;xsl:param name="arbortext.extensions" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
<link xlink:href="http://www.arbortext.com/">Arbortext</link>
extensions will be used.
</para>
<para>This parameter can also affect which graphics file formats
are supported</para>

</refsection>
</refentry>

<refentry version="5.0" id="axf.extensions">
<refmeta>
<refentrytitle>axf.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>axf.extensions</refname>
<refpurpose>Enable XSL Formatter extensions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="axf.extensions.frag">
&lt;xsl:param name="axf.extensions" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
<link xlink:href="http://www.antennahouse.com/">XSL Formatter</link>
extensions will be used. XSL Formatter extensions consists of PDF bookmarks,
document information and better index processing.</para>

<para>This parameter can also affect which graphics file formats
are supported</para>

</refsection>
</refentry>

<refentry version="5.0" id="fop.extensions">
<refmeta>
<refentrytitle>fop.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>fop.extensions</refname>
<refpurpose>Enable extensions for FOP version 0.20.5 and earlier</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="fop.extensions.frag">&lt;xsl:param name="fop.extensions" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, extensions intended for
<link xlink:href="http://xml.apache.org/fop/">FOP</link>
version 0.20.5 and earlier will be used.
At present, this consists of PDF bookmarks.
</para>

<para>This parameter can also affect which graphics file formats
are supported.</para>

<para>If you are using a version of FOP beyond
version 0.20.5, then use the <parameter>fop1.extensions</parameter> parameter
instead.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="fop1.extensions">
<refmeta>
<refentrytitle>fop1.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>fop1.extensions</refname>
<refpurpose>Enable extensions for FOP version 0.90 and later</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="fop1.extensions.frag">&lt;xsl:param name="fop1.extensions" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, extensions for 
<link xlink:href="http://xml.apache.org/fop/">FOP</link>
version 0.90 and later will be used.
</para>

<para>This parameter can also affect which graphics file formats
are supported.</para>

<para>The original <parameter>fop.extensions</parameter> parameter
should still be used for FOP version 0.20.5 and earlier.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="passivetex.extensions">
<refmeta>
<refentrytitle>passivetex.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>passivetex.extensions</refname>
<refpurpose>Enable PassiveTeX extensions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="passivetex.extensions.frag">&lt;xsl:param name="passivetex.extensions" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<important><para>The PassiveTeX XSL-FO processor is
no longer supported by DocBook XSL, beginning with version 1.78.</para></important>

<para>PassiveTeX was never a complete implementation of
XSL-FO, and development has ceased. Setting this parameter will
have no effect on the output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="tex.math.in.alt">
<refmeta>
<refentrytitle>tex.math.in.alt</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">plain</refmiscinfo>
<refmiscinfo class="other" otherclass="value">latex</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.in.alt</refname>
<refpurpose>TeX notation used for equations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="tex.math.in.alt.frag">
&lt;xsl:param name="tex.math.in.alt"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you want type math directly in TeX notation in equations,
this parameter specifies notation used. Currently are supported two
values -- <literal>plain</literal> and <literal>latex</literal>. Empty
value means that you are not using TeX math at all.</para>

<para>Preferred way for including TeX alternative of math is inside of
<tag>textobject</tag> element. Eg.:</para>

<programlisting>&lt;inlineequation&gt;
&lt;inlinemediaobject&gt;
&lt;imageobject&gt;
&lt;imagedata fileref="eq1.gif"/&gt;
&lt;/imageobject&gt;
&lt;textobject&gt;&lt;phrase&gt;E=mc squared&lt;/phrase&gt;&lt;/textobject&gt;
&lt;textobject role="tex"&gt;&lt;phrase&gt;E=mc^2&lt;/phrase&gt;&lt;/textobject&gt;
&lt;/inlinemediaobject&gt;
&lt;/inlineequation&gt;</programlisting>

<para>If you are using <tag>graphic</tag> element, you can
store TeX inside <tag>alt</tag> element:</para>

<programlisting>&lt;inlineequation&gt;
&lt;alt role="tex"&gt;a^2+b^2=c^2&lt;/alt&gt;
&lt;graphic fileref="a2b2c2.gif"/&gt;  
&lt;/inlineequation&gt;</programlisting>

<para>If you want use this feature, you should process your FO with
PassiveTeX, which only supports TeX math notation. When calling
stylsheet, don't forget to specify also
passivetex.extensions=1.</para>

<para>If you want equations in HTML, just process generated file
<filename>tex-math-equations.tex</filename> by TeX or LaTeX. Then run
dvi2bitmap program on result DVI file. You will get images for
equations in your document.</para>

<warning>
  <para>This feature is useful for print/PDF output only if you
    use the obsolete and now unsupported PassiveTeX XSL-FO
    engine.</para>
</warning>

</refsection>

<refsection><info><title>Related Parameters</title></info>
  <para><parameter>tex.math.delims</parameter>,
    <parameter>passivetex.extensions</parameter>,
    <parameter>tex.math.file</parameter></para>
</refsection>

</refentry>

<refentry version="5.0" id="tex.math.delims">
<refmeta>
<refentrytitle>tex.math.delims</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.delims</refname>
<refpurpose>Should equations output for processing by TeX be
surrounded by math mode delimiters?</refpurpose>
</refnamediv> 

<refsynopsisdiv>
<programlisting id="tex.math.delims.frag">
&lt;xsl:param name="tex.math.delims" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>For compatibility with DSSSL based DBTeXMath from Allin Cottrell
you should set this parameter to 0.</para>

<warning>
  <para>This feature is useful for print/PDF output only if you
  use the obsolete and now unsupported PassiveTeX XSL-FO
  engine.</para>
</warning>

</refsection>
<refsection><info><title>Related Parameters</title></info>
  <para><parameter>tex.math.in.alt</parameter>,
    <parameter>passivetex.extensions</parameter></para>
</refsection>

<refsection><info><title>See Also</title></info>
  <para>You can also use the <tag class="xmlpi">dbtex delims</tag> processing
    instruction to control whether delimiters are output.</para>
</refsection>


</refentry>

<refentry version="5.0" id="xep.extensions">
<refmeta>
<refentrytitle>xep.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xep.extensions</refname>
<refpurpose>Enable XEP extensions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xep.extensions.frag">&lt;xsl:param name="xep.extensions" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
<link xlink:href="http://www.renderx.com/">XEP</link>
extensions will be used. XEP extensions consists of PDF bookmarks,
document information and better index processing.
</para>

<para>This parameter can also affect which graphics file formats
are supported</para>
</refsection>
</refentry>

</reference><reference id="dbk_ext" xml:base="../fo/param.xml"><title>Stylesheet Extensions</title>
<refentry version="5.0" id="linenumbering.everyNth">
<refmeta>
<refentrytitle>linenumbering.everyNth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.everyNth</refname>
<refpurpose>Indicate which lines should be numbered</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.everyNth.frag">
&lt;xsl:param name="linenumbering.everyNth"&gt;5&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If line numbering is enabled, everyNth line will be
numbered. Note that numbering is one based, not zero based.
</para>
<para>See also <parameter>linenumbering.extension</parameter>,
<parameter>linenumbering.separator</parameter>,
<parameter>linenumbering.width</parameter> and
<parameter>use.extensions</parameter></para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.extension">
<refmeta>
<refentrytitle>linenumbering.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.extension</refname>
<refpurpose>Enable the line numbering extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.extension.frag">
&lt;xsl:param name="linenumbering.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, verbatim environments (<tag>address</tag>, <tag>literallayout</tag>,
<tag>programlisting</tag>, <tag>screen</tag>, <tag>synopsis</tag>) that specify line numbering will
have line numbers.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.separator">
<refmeta>
<refentrytitle>linenumbering.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.separator</refname>
<refpurpose>Specify a separator between line numbers and lines</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.separator.frag">
&lt;xsl:param name="linenumbering.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The separator is inserted between line numbers and lines in the
verbatim environment. The default value is a single white space.
 Note the interaction with <parameter>linenumbering.width</parameter>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="linenumbering.width">
<refmeta>
<refentrytitle>linenumbering.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.width</refname>
<refpurpose>Indicates the width of line numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="linenumbering.width.frag">
&lt;xsl:param name="linenumbering.width"&gt;3&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If line numbering is enabled, line numbers will appear right
justified in a field "width" characters wide.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="tablecolumns.extension">
<refmeta>
<refentrytitle>tablecolumns.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tablecolumns.extension</refname>
<refpurpose>Enable the table columns extension function</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="tablecolumns.extension.frag">
&lt;xsl:param name="tablecolumns.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The table columns extension function adjusts the widths of table
columns in the HTML result to more accurately reflect the specifications
in the CALS table.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="textinsert.extension">
  <refmeta>
    <refentrytitle>textinsert.extension</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>textinsert.extension</refname>
    <refpurpose>Enables the textinsert extension element</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <programlisting id="textinsert.extension.frag">
  &lt;xsl:param name="textinsert.extension" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
  </refsynopsisdiv>
  <refsection><info><title>Description</title></info>
    <para>The textinsert extension element inserts the contents of
      a file into the result tree (as text).</para>
    <note>
      <para>To use the textinsert extension element, you must use
        either Saxon or Xalan as your XSLT processor (it doesn&#8217;t
        work with xsltproc), along with either the DocBook Saxon
        extensions or DocBook Xalan extensions (for more
        information about those extensions, see <link role="tcg" xlink:href="InstallingAProcessor.html#SaxonExtensions">DocBook Saxon Extensions</link> and <link role="tcg" xlink:href="InstallingAProcessor.html#XalanExtensions">DocBook Xalan Extensions</link>), and you must set both
        the <parameter>use.extensions</parameter> and
        <parameter>textinsert.extension</parameter> parameters to
        <literal>1</literal>.</para>
      <para>As an alternative to using the textinsert element,
        consider using an Xinclude element with the
        <literal>parse="text"</literal> attribute and value
        specified, as detailed in <link role="tcg" xlink:href="ExternalCode.html#XIncludeCode">Using XInclude for text inclusions</link>.</para>
    </note>
  </refsection>
  <refsection><info><title>See Also</title></info>
    <para>You can also use the <tag class="xmlpi">dbhtml-include&#160;href</tag> processing
      instruction to insert external files &#8212; both files containing
      plain text and files with markup content (including HTML
      content).</para>
  </refsection>
  <refsection><info><title>More information</title></info>
    <para>For how-to documentation on inserting contents of
      external code files and other text files into output, see
      <link role="tcg" xlink:href="ExternalCode.html">External code files</link>.</para>
    <para>For guidelines on inserting contents of
      HTML files into output, see <link role="tcg" xlink:href="InsertExtHtml.html">Inserting external HTML code</link>.</para>
  </refsection>
</refentry>

<refentry version="5.0" id="textdata.default.encoding">
<refmeta>
<refentrytitle>textdata.default.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>textdata.default.encoding</refname>
<refpurpose>Default encoding of external text files which are included
using textdata element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="textdata.default.encoding.frag">
&lt;xsl:param name="textdata.default.encoding"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the encoding of any external text files included using
<tag>textdata</tag> element. This value is used only when you do
not specify encoding by the appropriate attribute 
directly on textdata. An empty string is interpreted as the system
default encoding.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.extensions">
<refmeta>
<refentrytitle>use.extensions</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.extensions</refname>
<refpurpose>Enable extensions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.extensions.frag">
&lt;xsl:param name="use.extensions" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, extensions may be used. Each extension is
further controlled by its own parameter. But if
<parameter>use.extensions</parameter> is zero, no extensions will
be used.
</para>

</refsection>
</refentry>

</reference><reference id="labels" xml:base="../fo/param.xml"><title>Automatic labelling</title>
<refentry version="5.0" id="appendix.autolabel">
<refmeta>
<refentrytitle>appendix.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>appendix.autolabel</refname>
<refpurpose>Specifies the labeling format for Appendix titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="appendix.autolabel.frag">
&lt;xsl:param name="appendix.autolabel"&gt;A&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then appendices will be numbered using the
parameter value as the number format if the value matches one of the
following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (upperalpha).
</para>

</refsection>
</refentry>

<refentry version="5.0" id="chapter.autolabel">
<refmeta>
<refentrytitle>chapter.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>chapter.autolabel</refname>
<refpurpose>Specifies the labeling format for Chapter titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chapter.autolabel.frag">
&lt;xsl:param name="chapter.autolabel" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then chapters will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (arabic).
</para>

</refsection>
</refentry>

<refentry version="5.0" id="part.autolabel">
<refmeta>
<refentrytitle>part.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>part.autolabel</refname>
<refpurpose>Specifies the labeling format for Part titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="part.autolabel.frag">
&lt;xsl:param name="part.autolabel"&gt;I&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then parts will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (upperroman).
</para>


</refsection>
</refentry>

<refentry version="5.0" id="reference.autolabel">
<refmeta>
<refentrytitle>reference.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>reference.autolabel</refname>
<refpurpose>Specifies the labeling format for Reference titles</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="reference.autolabel.frag">
  &lt;xsl:param name="reference.autolabel"&gt;I&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, references will be numbered using the parameter
  value as the number format if the value matches one of the
  following:
</para>
<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>
<para>Any non-zero value other than the above will generate
the default number format (upperroman).
</para>
</refsection>
</refentry>

<refentry version="5.0" id="preface.autolabel">
<refmeta>
<refentrytitle>preface.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">0<alt>none</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>preface.autolabel</refname>
<refpurpose>Specifices the labeling format for Preface titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="preface.autolabel.frag">&lt;xsl:param name="preface.autolabel" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero then prefaces will be numbered using the parameter
value as the number format if the value matches one of the following:
</para>

<variablelist>
  <varlistentry>
    <term>1 or arabic</term>
    <listitem>
      <para>Arabic numeration (1, 2, 3 ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>A or upperalpha</term>
    <listitem>
      <para>Uppercase letter numeration (A, B, C ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>a or loweralpha</term>
    <listitem>
      <para>Lowercase letter numeration (a, b, c ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>I or upperroman</term>
    <listitem>
      <para>Uppercase roman numeration (I, II, III ...).</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>i or lowerroman</term>
    <listitem>
      <para>Lowercase roman letter numeration (i, ii, iii ...).</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>Any nonzero value other than the above will generate
the default number format (arabic).
</para>


</refsection>
</refentry>

<refentry version="5.0" id="section.autolabel">
<refmeta>
<refentrytitle>section.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.autolabel</refname>
<refpurpose>Are sections enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.autolabel.frag">&lt;xsl:param name="section.autolabel" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), unlabeled sections will be enumerated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.autolabel.max.depth">
<refmeta>
<refentrytitle>section.autolabel.max.depth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.autolabel.max.depth</refname>
<refpurpose>The deepest level of sections that are numbered.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.autolabel.max.depth.frag">
&lt;xsl:param name="section.autolabel.max.depth"&gt;8&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When section numbering is turned on by the
<parameter>section.autolabel</parameter> parameter, then this
parameter controls the depth of <tag>section</tag> nesting that is
numbered.  Sections nested to a level deeper than this value will not
be numbered.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.label.includes.component.label">
<refmeta>
<refentrytitle>section.label.includes.component.label</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.label.includes.component.label</refname>
<refpurpose>Do section labels include the component label?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.label.includes.component.label.frag">&lt;xsl:param name="section.label.includes.component.label" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, section labels are prefixed with the label of the
component that contains them.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="label.from.part">
<refmeta>
<refentrytitle>label.from.part</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>label.from.part</refname>
<refpurpose>Renumber components in each part?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="label.from.part.frag">
&lt;xsl:param name="label.from.part" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>label.from.part</parameter> is non-zero, then
  numbering of components &#8212; <tag>preface</tag>,
  <tag>chapter</tag>, <tag>appendix</tag>, and
  <tag>reference</tag> (when <tag>reference</tag> occurs at the
  component level) &#8212; is re-started within each
  <tag>part</tag>.</para>
<para>If <parameter>label.from.part</parameter> is zero (the
  default), numbering of components is <emphasis>not</emphasis>
  re-started within each <tag>part</tag>; instead, components are
  numbered sequentially throughout each <tag>book</tag>,
  regardless of whether or not they occur within <tag>part</tag>
  instances.</para>

</refsection>
</refentry>

<refentry version="5.0" id="component.label.includes.part.label">
<refmeta>
<refentrytitle>component.label.includes.part.label</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>component.label.includes.part.label</refname>
<refpurpose>Do component labels include the part label?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="component.label.includes.part.label.frag">&lt;xsl:param name="component.label.includes.part.label" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, number labels for <tag>chapter</tag>,
<tag>appendix</tag>, and other component elements are prefixed with
the label of the part element that contains them.  So you might see
Chapter II.3 instead of Chapter 3.  Also, the labels for formal
elements such as <tag>table</tag> and <tag>figure</tag> will include
the part label.  If there is no part element container, then no prefix
is generated.
</para>
<para>
This feature is most useful when the
<parameter>label.from.part</parameter> parameter is turned on.
In that case, there would be more than one <tag>chapter</tag>
<quote>1</quote>, and the extra part label prefix will identify
each chapter unambiguously.
</para>

</refsection>
</refentry>

</reference><reference id="xslt" xml:base="../fo/param.xml"><title>XSLT Processing</title>
<refentry version="5.0" id="rootid">
<refmeta>
<refentrytitle>rootid</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>rootid</refname>
<refpurpose>Specify the root element to format</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="rootid.frag">
&lt;xsl:param name="rootid"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>rootid</parameter> is not empty, it must be the
value of an ID that occurs in the document being formatted. The entire
document will be loaded and parsed, but formatting will begin at the
element identified, rather than at the root. For example, this allows
you to process only <tag>chapter</tag> 4 of a <tag>book</tag>.</para>
<para>Because the entire document is available to the processor, automatic
numbering, cross references, and other dependencies are correctly
resolved.</para>

</refsection>
</refentry>

</reference><reference id="meta" xml:base="../fo/param.xml"><title>Meta/*Info</title>
<refentry version="5.0" id="make.single.year.ranges">
<refmeta>
<refentrytitle>make.single.year.ranges</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.single.year.ranges</refname>
<refpurpose>Print single-year ranges (e.g., 1998-1999)</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.single.year.ranges.frag">
&lt;xsl:param name="make.single.year.ranges" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, year ranges that span a single year will be printed
in range notation (1998-1999) instead of discrete notation
(1998, 1999).</para>

</refsection>
</refentry>

<refentry version="5.0" id="make.year.ranges">
<refmeta>
<refentrytitle>make.year.ranges</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.year.ranges</refname>
<refpurpose>Collate copyright years into ranges?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="make.year.ranges.frag">&lt;xsl:param name="make.year.ranges" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, multiple copyright <tag>year</tag> elements will be
collated into ranges.
This works only if each year number is put into a separate
year element.  The copyright element permits multiple
year elements. If a year element contains a dash or
a comma, then that year element will not be merged into
any range.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="author.othername.in.middle">
<refmeta>
<refentrytitle>author.othername.in.middle</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>author.othername.in.middle</refname>
<refpurpose>Is <tag>othername</tag> in <tag>author</tag> a
middle name?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="author.othername.in.middle.frag">
&lt;xsl:param name="author.othername.in.middle" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the <tag>othername</tag> of an <tag>author</tag>
appears between the <tag>firstname</tag> and
<tag>surname</tag>.  Otherwise, <tag>othername</tag>
is suppressed.
</para>

</refsection>
</refentry>

</reference><reference id="refentry" xml:base="../fo/param.xml"><title>Reference Pages</title>
<refentry version="5.0" id="funcsynopsis.decoration">
<refmeta>
<refentrytitle>funcsynopsis.decoration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.decoration</refname>
<refpurpose>Decorate elements of a <tag>funcsynopsis</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="funcsynopsis.decoration.frag">
&lt;xsl:param name="funcsynopsis.decoration" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, elements of the <tag>funcsynopsis</tag> will be
decorated (e.g. rendered as bold or italic text). The decoration is controlled by
templates that can be redefined in a customization layer.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="funcsynopsis.style">
<refmeta>
<refentrytitle>funcsynopsis.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">ansi</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kr</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.style</refname>
<refpurpose>What style of <tag>funcsynopsis</tag> should be generated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="funcsynopsis.style.frag">&lt;xsl:param name="funcsynopsis.style"&gt;kr&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>funcsynopsis.style</parameter> is <literal>ansi</literal>,
ANSI-style function synopses are generated for a
<tag>funcsynopsis</tag>, otherwise K&amp;R-style
function synopses are generated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="function.parens">
<refmeta>
<refentrytitle>function.parens</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>function.parens</refname>
<refpurpose>Generate parens after a function?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="function.parens.frag">
&lt;xsl:param name="function.parens" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the formatting of a <tag>function</tag> element
will include generated parentheses.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.generate.name">
<refmeta>
<refentrytitle>refentry.generate.name</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.name</refname>
<refpurpose>Output NAME header before <tag>refname</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.generate.name.frag">
&lt;xsl:param name="refentry.generate.name" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a "NAME" section title is output before the list
of <tag>refname</tag>s. This parameter and
<parameter>refentry.generate.title</parameter> are mutually
exclusive. This means that if you change this parameter to zero, you
should set <parameter>refentry.generate.title</parameter> to non-zero unless
you want get quite strange output.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.generate.title">
<refmeta>
<refentrytitle>refentry.generate.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.title</refname>
<refpurpose>Output title before <tag>refname</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.generate.title.frag">
&lt;xsl:param name="refentry.generate.title" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the reference page title or first name is
output before the list of <tag>refname</tag>s. This parameter and
<parameter>refentry.generate.name</parameter> are mutually exclusive.
This means that if you change this parameter to non-zero, you
should set <parameter>refentry.generate.name</parameter> to zero unless
you want get quite strange output.</para>


</refsection>
</refentry>

<refentry version="5.0" id="refentry.pagebreak">
<refmeta>
<refentrytitle>refentry.pagebreak</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.pagebreak</refname>
<refpurpose>Start each refentry on a new page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.pagebreak.frag">&lt;xsl:param name="refentry.pagebreak" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero (the default), each <tag>refentry</tag>
element will start on a new page.  If zero, a page
break will not be generated between <tag>refentry</tag> elements.
The exception is when the <tag>refentry</tag> elements are children of
a <tag>part</tag> element, in which case the page breaks are always
retained.  That is because a <tag>part</tag> element does not generate
a page-sequence for its children, so each <tag>refentry</tag> must
start its own page-sequence.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.title.properties">
<refmeta>
<refentrytitle>refentry.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.title.properties</refname>
<refpurpose>Title properties for a refentry title</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.title.properties.frag">
&lt;xsl:attribute-set name="refentry.title.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$title.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;18pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1.0em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.4em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;0.6em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="start-indent"&gt;&lt;xsl:value-of select="$title.margin.left"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Formatting properties applied to the title generated for the
<tag>refnamediv</tag> part of output for
<tag>refentry</tag> when the value of the
<parameter>refentry.generate.title</parameter> parameter is
non-zero. The font size is supplied by the appropriate <parameter>section.level<replaceable>X</replaceable>.title.properties</parameter>
attribute-set, computed from the location of the
<tag>refentry</tag> in the section hierarchy.</para>

<note>
  <para>This parameter has no effect on the the title generated for
  the <tag>refnamediv</tag> part of output for
  <tag>refentry</tag> when the value of the
  <parameter>refentry.generate.name</parameter> parameter is
  non-zero. By default, that title is formatted with the same
  properties as the titles for all other first-level children of
  <tag>refentry</tag>.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.xref.manvolnum">
<refmeta>
<refentrytitle>refentry.xref.manvolnum</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.xref.manvolnum</refname>
<refpurpose>Output <tag>manvolnum</tag> as part of 
<tag>refentry</tag> cross-reference?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.xref.manvolnum.frag">
&lt;xsl:param name="refentry.xref.manvolnum" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>if non-zero, the <tag>manvolnum</tag> is used when cross-referencing
<tag>refentry</tag>s, either with <tag>xref</tag>
or <tag>citerefentry</tag>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refclass.suppress">
<refmeta>
<refentrytitle>refclass.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refclass.suppress</refname>
<refpurpose>Suppress display of refclass contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refclass.suppress.frag">
&lt;xsl:param name="refclass.suppress" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>refclass.suppress</parameter> is
non-zero, then display of <tag>refclass</tag> contents is
suppressed in output.</para>

</refsection>
</refentry>

</reference><reference id="tables" xml:base="../fo/param.xml"><title>Tables</title>
<refentry version="5.0" id="default.table.width">
<refmeta>
<refentrytitle>default.table.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.width</refname>
<refpurpose>The default width of tables</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="default.table.width.frag">
&lt;xsl:param name="default.table.width"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If non-zero, this value will be used for the
<literal>width</literal> attribute on <tag>table</tag>s that do not specify an
alternate width (with the <tag class="xmlpi">dbhtml table-width</tag> or 
<tag class="xmlpi">dbfo table-width</tag> processing instruction).</para>
</refsection>
</refentry>

<refentry version="5.0" id="nominal.table.width">
<refmeta>
<refentrytitle>nominal.table.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.table.width</refname>
<refpurpose>The (absolute) nominal width of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nominal.table.width.frag">
&lt;xsl:param name="nominal.table.width"&gt;6in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In order to convert CALS column widths into HTML column widths, it
is sometimes necessary to have an absolute table width to use for conversion
of mixed absolute and relative widths. This value must be an absolute
length (not a percentage).</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.table.frame">
<refmeta>
<refentrytitle>default.table.frame</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.frame</refname>
<refpurpose>The default framing of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.table.frame.frag">
&lt;xsl:param name="default.table.frame"&gt;all&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This value will be used when there is no frame attribute on the
table. </para>

</refsection>
</refentry>

<refentry version="5.0" id="default.table.rules">
<refmeta>
<refentrytitle>default.table.rules</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.rules</refname>
<refpurpose>The default column and row rules for tables using HTML markup</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.table.rules.frag">
&lt;xsl:param name="default.table.rules"&gt;none&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Tables using HTML markup elements can use an attribute
named <tag class="attribute">rules</tag> on the <tag>table</tag> or
<tag>informaltable</tag> element
to specify whether column and row border rules should be 
displayed. This parameter lets you specify a global default
style for all HTML tables that don't otherwise have
that attribute.</para>
<para>These are the supported values:</para>

<variablelist>
<varlistentry><term>all</term>
<listitem>
<para>Rules will appear between all rows and columns.</para>
</listitem>
</varlistentry>

<varlistentry><term>rows</term>
<listitem>
<para>Rules will appear between rows only.</para>
</listitem>
</varlistentry>

<varlistentry><term>cols</term>
<listitem>
<para>Rules will appear between columns only.</para>
</listitem>
</varlistentry>

<varlistentry><term>groups</term>
<listitem>
<para>Rules will appear between row groups (thead, tfoot, tbody).
No support for rules between column groups yet.
</para>
</listitem>
</varlistentry>

<varlistentry><term>none</term>
<listitem>
<para>No rules.  This is the default value.
</para>
</listitem>
</varlistentry>

</variablelist>

<para>The border after the last row and the border after
the last column are not affected by
this setting. Those borders are controlled by
the <tag class="attribute">frame</tag> attribute on the table element.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.padding">
<refmeta>
<refentrytitle>table.cell.padding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.padding</refname>
<refpurpose>Specifies the padding of table cells</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.padding.frag">
&lt;xsl:attribute-set name="table.cell.padding"&gt;
  &lt;xsl:attribute name="padding-start"&gt;2pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-end"&gt;2pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-top"&gt;2pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-bottom"&gt;2pt&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the padding of table cells.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.thickness">
<refmeta>
<refentrytitle>table.frame.border.thickness</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.thickness</refname>
<refpurpose>Specifies the thickness of the frame border</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.thickness.frag">
&lt;xsl:param name="table.frame.border.thickness"&gt;0.5pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the thickness of the border on the table's frame.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.style">
<refmeta>
<refentrytitle>table.frame.border.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dotted</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dashed</refmiscinfo>
<refmiscinfo class="other" otherclass="value">double</refmiscinfo>
<refmiscinfo class="other" otherclass="value">groove</refmiscinfo>                       
<refmiscinfo class="other" otherclass="value">ridge</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inset</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outset</refmiscinfo>          
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.style</refname>
<refpurpose>Specifies the border style of table frames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.style.frag">
&lt;xsl:param name="table.frame.border.style"&gt;solid&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border style of table frames.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.frame.border.color">
<refmeta>
<refentrytitle>table.frame.border.color</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.frame.border.color</refname>
<refpurpose>Specifies the border color of table frames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.frame.border.color.frag">

&lt;xsl:param name="table.frame.border.color"&gt;black&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border color of table frames.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.thickness">
<refmeta>
<refentrytitle>table.cell.border.thickness</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.thickness</refname>
<refpurpose>Specifies the thickness of table cell borders</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.thickness.frag">
&lt;xsl:param name="table.cell.border.thickness"&gt;0.5pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, specifies the thickness of borders on table
cells. The units are points. See <link xlink:href="http://www.w3.org/TR/CSS21/box.html#border-width-properties">
CSS</link></para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.style">
<refmeta>
<refentrytitle>table.cell.border.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dotted</refmiscinfo>
<refmiscinfo class="other" otherclass="value">dashed</refmiscinfo>
<refmiscinfo class="other" otherclass="value">double</refmiscinfo>
<refmiscinfo class="other" otherclass="value">groove</refmiscinfo>                       
<refmiscinfo class="other" otherclass="value">ridge</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inset</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outset</refmiscinfo>          
<refmiscinfo class="other" otherclass="value">solid</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.style</refname>
<refpurpose>Specifies the border style of table cells</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.style.frag">
&lt;xsl:param name="table.cell.border.style"&gt;solid&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the border style of table cells.</para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.cell.border.color">
<refmeta>
<refentrytitle>table.cell.border.color</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.cell.border.color</refname>
<refpurpose>Specifies the border color of table cells</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.cell.border.color.frag">

&lt;xsl:param name="table.cell.border.color"&gt;black&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set the color of table cell borders. If non-zero, the value is used
for the border coloration. See <link xlink:href="http://www.w3.org/TR/CSS21/syndata.html#value-def-color">CSS</link>. A
<literal>color</literal> is either a keyword or a numerical RGB specification.
Keywords are aqua, black, blue, fuchsia, gray, green, lime, maroon,
navy, olive, orange, purple, red, silver, teal, white, and
yellow.</para>

<note>
  <para>To control properties of cell borders in HTML output, you must also turn on the 
  <parameter>table.borders.with.css</parameter> parameter.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="table.table.properties">
<refmeta>
<refentrytitle>table.table.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.table.properties</refname>
<refpurpose>Properties associated with a table</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.table.properties.frag">
&lt;xsl:attribute-set name="table.table.properties"&gt;
  &lt;xsl:attribute name="border-before-width.conditionality"&gt;retain&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="border-collapse"&gt;collapse&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for tables. This parameter should really
have been called <literal>table.properties</literal>, but that parameter
name was inadvertently established for the block-level properties
of the table as a whole.
</para>

<para>See also <parameter>table.properties</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.caption.properties">
<refmeta>
<refentrytitle>table.caption.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.caption.properties</refname>
<refpurpose>Properties associated with a table caption</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.caption.properties.frag">
&lt;xsl:attribute-set name="table.caption.properties"&gt;
  &lt;xsl:attribute name="keep-together.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for table caption element (not the table title).</para>

<para>See also <parameter>table.properties</parameter>.</para>

</refsection>
</refentry>

</reference><reference id="links" xml:base="../fo/param.xml"><title>Linking</title>
<refentry version="5.0" id="current.docid"> 
<refmeta> 
<refentrytitle>current.docid</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>current.docid</refname> 
<refpurpose>targetdoc identifier for the document being
processed</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="current.docid.frag">
&lt;xsl:param name="current.docid"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the <literal>targetdoc</literal> identifiers for both documents, as they appear in the <parameter>target.database.document</parameter> database file. This parameter passes to the stylesheet
the targetdoc identifier of the current document, since that
identifier does not appear in the document itself. </para>
<para>This parameter can also be used for print output. If an olink's  <literal>targetdoc</literal>  id differs from the <literal>current.docid</literal>, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also <parameter>olink.doctitle</parameter> to enable that feature.</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="activate.external.olinks">
<refmeta>
<refentrytitle>activate.external.olinks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>activate.external.olinks</refname>
<refpurpose>Make external olinks into active links</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="activate.external.olinks.frag">
&lt;xsl:param name="activate.external.olinks" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>activate.external.olinks</parameter> is nonzero
(the default), then any olinks that reference another document
become active links that can be clicked on to follow the link.
If the parameter is set to zero, then external olinks
will have the appropriate link text generated, but the link is
not made active.  Olinks to destinations in
the current document remain active.</para>

<para>To make an external olink active for HTML
outputs, the link text is wrapped in an <tag>a</tag>
element with an <tag>href</tag> attribute. To
make an external olink active for FO outputs, the link text is
wrapped in an <tag>fo:basic-link</tag> element with an
<tag>external-destination</tag> attribute.</para>

<para>This parameter is useful when you need external olinks
to resolve but not be clickable. For example, if documents
in a collection are available independently of each other,
then having active links between them could lead to
unresolved links when a given target document is missing.</para>

<para>The epub stylesheets set this parameter to zero by default
because there is no standard linking mechanism between Epub documents.</para>

<para>If external links are made inactive, you should
consider setting the
stylesheet parameter <parameter>olink.doctitle</parameter>
to <literal>yes</literal>. That will append the external document's
title to the link text, making it easier for the user to
locate the other document.</para>

<para>An olink is considered external when the
<parameter>current.docid</parameter> stylesheet parameter
is set to some value, and the olink's <tag>targetdoc</tag>
attribute has a different value. If the two values
match, then the link is considered internal.  If the
<parameter>current.docid</parameter> parameter is blank, or
the <tag>olink</tag> element does not have a <tag>targetdoc</tag> attribute,
then the link is considered to be internal and will become
an active link.</para>

<para>See also <parameter>olink.doctitle</parameter>,
<parameter>prefer.internal.olink</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="collect.xref.targets"> 
<refmeta> 
<refentrytitle>collect.xref.targets</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">only</refmiscinfo>
</refmeta> 
<refnamediv> 
<refname>collect.xref.targets</refname> 
<refpurpose>Controls whether cross reference data is
collected</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="collect.xref.targets.frag">
&lt;xsl:param name="collect.xref.targets"&gt;no&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is  <literal>no</literal>, which means the data file is not generated during processing. The other choices are <literal>yes</literal>, which means the data file is created and the document is processed for output, and <literal>only</literal>, which means the data file is created but the document is not processed for output.
See also <parameter>targets.filename</parameter>.
</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="insert.olink.page.number">
<refmeta>
<refentrytitle>insert.olink.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.olink.page.number</refname>
<refpurpose>Turns page numbers in olinks on and off</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.olink.page.number.frag">
&lt;xsl:param name="insert.olink.page.number"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines if
cross references made between documents with
<tag>olink</tag> will 
include page number citations.
In most cases this is only applicable to references in printed output.
</para>
<para>The parameter has three possible values.
</para>
<variablelist>
<varlistentry>
<term>no</term>
<listitem><para>No page number references will be generated for olinks.
</para></listitem>
</varlistentry>
<varlistentry>
<term>yes</term>
<listitem><para>Page number references will be generated
for all <tag>olink</tag> references.
The style of page reference may be changed
if an <tag class="attribute">xrefstyle</tag>
attribute is used.
</para></listitem>
</varlistentry>
<varlistentry>
<term>maybe</term>
<listitem><para>Page number references will not be generated
for an <tag>olink</tag> element unless 
it has an
<tag class="attribute">xrefstyle</tag>
attribute whose value specifies a page reference.
</para></listitem>
</varlistentry>
</variablelist>
<para>Olinks that point to targets within the same document
are treated as <tag>xref</tag>s, and controlled by
the <parameter>insert.xref.page.number</parameter> parameter.
</para>

<para>Page number references for olinks to
external documents can only be inserted if the 
information exists in the olink database. 
This means each olink target element 
(<tag>div</tag> or <tag>obj</tag>)
must have a <tag class="attribute">page</tag> attribute
whose value is its page number in the target document.
The XSL stylesheets are not able to extract that information
during processing because pages have not yet been created in
XSLT transformation.  Only the XSL-FO processor knows what
page each element is placed on.
Therefore some postprocessing must take place to populate
page numbers in the olink database.
</para>



</refsection>
</refentry>

<refentry version="5.0" id="insert.olink.pdf.frag">
<refmeta>
<refentrytitle>insert.olink.pdf.frag</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.olink.pdf.frag</refname>
<refpurpose>Add fragment identifiers for links into PDF files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.olink.pdf.frag.frag">
&lt;xsl:param name="insert.olink.pdf.frag" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines whether
the cross reference URIs to PDF documents made with
<tag>olink</tag> will 
include fragment identifiers.
</para>

<para>When forming a URI to link to a PDF document,
a fragment identifier (typically a '#' followed by an
id value) appended to the PDF filename can be used by
the PDF viewer to open
the PDF file to a location within the document instead of
the first page.
However, not all PDF files have id
values embedded in them, and not all PDF viewers can
handle fragment identifiers. 
</para>

<para>If <parameter>insert.olink.pdf.frag</parameter> is set
to a non-zero value, then any olink targeting a
PDF file will have the fragment identifier appended to the URI.
The URI is formed by concatenating the value of the
<parameter>olink.base.uri</parameter> parameter, the
value of the <tag class="attribute">baseuri</tag>
attribute from the <tag class="element">document</tag>
element in the olink database with the matching
<tag class="attribute">targetdoc</tag> value,
and the value of the <tag class="attribute">href</tag>
attribute for the targeted element in the olink database.
The <tag class="attribute">href</tag> attribute
contains the fragment identifier.
</para>

<para>If <parameter>insert.olink.pdf.frag</parameter> is set
to zero (the default value), then 
the <tag class="attribute">href</tag> attribute
from the olink database
is not appended to PDF olinks, so the fragment identifier is left off.
A PDF olink is any olink for which the
<tag class="attribute">baseuri</tag> attribute
from the matching <tag class="element">document</tag>
element in the olink database ends with '.pdf'.
Any other olinks will still have the fragment identifier added.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="olink.base.uri"> 
<refmeta> 
<refentrytitle>olink.base.uri</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.base.uri</refname> 
<refpurpose>Base URI used in olink hrefs</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.base.uri.frag">
&lt;xsl:param name="olink.base.uri"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When cross reference data is collected for resolving olinks, it
may be necessary to prepend a base URI to each target's href. This
parameter lets you set that base URI when cross reference data is
collected. This feature is needed when you want to link to a document
that is processed without chunking. The output filename for such a
document is not known to the XSL stylesheet; the only target
information consists of fragment identifiers such as
<literal>#idref</literal>. To enable the resolution of olinks between
documents, you should pass the name of the HTML output file as the
value of this parameter. Then the hrefs recorded in the cross
reference data collection look like
<literal>outfile.html#idref</literal>, which can be reached as links
from other documents.</para>
</refsection> 
</refentry>

<refentry version="5.0" id="olink.debug">
<refmeta>
<refentrytitle>olink.debug</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.debug</refname>
<refpurpose>Turn on debugging messages for olinks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="olink.debug.frag">
&lt;xsl:param name="olink.debug" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then each olink will generate several
messages about how it is being resolved during processing.
This is useful when an olink does not resolve properly
and the standard error messages are not sufficient to
find the problem. 
</para>

<para>You may need to read through the olink XSL templates
to understand the context for some of the debug messages.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="olink.doctitle"> 
<refmeta> 
<refentrytitle>olink.doctitle</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta> 
<refnamediv> 
<refname>olink.doctitle</refname> 
<refpurpose>show the document title for external olinks?</refpurpose>

</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.doctitle.frag">
&lt;xsl:param name="olink.doctitle"&gt;no&lt;/xsl:param&gt; 
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When olinks between documents are resolved, the generated text
may not make it clear that the reference is to another document.
It is possible for the stylesheets to append the other document's
title to external olinks. For this to happen, two parameters must
be set.</para>
<itemizedlist>
<listitem>
<para>This <parameter>olink.doctitle</parameter> parameter
should be set to either <literal>yes</literal> or <literal>maybe</literal>
to enable this feature.
</para>
</listitem>
<listitem>
<para>And you should also set the <parameter>current.docid</parameter>
parameter to the document id for the  document currently
being processed for output.
</para>
</listitem>
</itemizedlist>

<para>
Then if an olink's  <literal>targetdoc</literal> id differs from
the <literal>current.docid</literal> value, the stylesheet knows
that it is a reference to another document and can
append the target document's
title to the generated olink text. </para> 

<para>The text for the target document's title is copied from the
olink database from the <tag>ttl</tag> element
of the top-level <tag>div</tag> for that document.
If that <tag>ttl</tag> element is missing or empty,
no title is output.
</para>

<para>The supported values for <parameter>olink.doctitle</parameter> are:
</para>
<variablelist>
<varlistentry>
<term><literal>yes</literal></term>
<listitem>
<para>
Always insert the title to the target document if it is not
the current document.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no</literal></term>
<listitem>
<para>
Never insert the title to the target document, even if requested
in an <tag class="attribute">xrefstyle</tag> attribute.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>maybe</literal></term>
<listitem>
<para>
Only insert the title to the target document, if requested
in an <tag class="attribute">xrefstyle</tag> attribute.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>An <tag class="attribute">xrefstyle</tag> attribute
may override the global setting for individual olinks.
The following values are supported in an
<tag class="attribute">xrefstyle</tag>
attribute using the <literal>select:</literal> syntax:
</para>

<variablelist>
<varlistentry>
<term><literal>docname</literal></term>
<listitem>
<para>
Insert the target document name for this olink using the
<literal>docname</literal> gentext template, but only
if the value of <parameter>olink.doctitle</parameter>
is not <literal>no</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>docnamelong</literal></term>
<listitem>
<para>
Insert the target document name for this olink using the
<literal>docnamelong</literal> gentext template, but only
if the value of <parameter>olink.doctitle</parameter>
is not <literal>no</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>nodocname</literal></term>
<listitem>
<para>
Omit the target document name even if
the value of <parameter>olink.doctitle</parameter>
is <literal>yes</literal>.
</para>
</listitem>
</varlistentry>
</variablelist>
<para>Another way of inserting the target document name 
for a single olink is to employ an
<tag class="attribute">xrefstyle</tag>
attribute using the <literal>template:</literal> syntax.
The <literal>%o</literal> placeholder (the letter o, not zero)
in such a template
will be filled in with the target document's title when it is processed.
This will occur regardless of 
the value of <parameter>olink.doctitle</parameter>.
</para>
<para>Note that prior to version 1.66 of the XSL stylesheets,
the allowed values for this parameter were 0 and 1.  Those
values are still supported and mapped to 'no' and 'yes', respectively.
</para>
</refsection> 
</refentry>

<refentry version="5.0" id="olink.lang.fallback.sequence"> 
<refmeta> 
<refentrytitle>olink.lang.fallback.sequence</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.lang.fallback.sequence</refname> 
<refpurpose>look up translated documents if olink not found?</refpurpose>

</refnamediv> 
<refsynopsisdiv> <programlisting id="olink.lang.fallback.sequence.frag">
&lt;xsl:param name="olink.lang.fallback.sequence"&gt;&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 

<para>This parameter defines a list of lang values
to search among to resolve olinks.
</para>

<para>Normally an olink tries to resolve to a document in the same
language as the olink itself.  The language of an olink
is determined by its nearest ancestor element with a
<tag class="attribute">lang</tag> attribute, otherwise the
value of the <parameter>l10n.gentext.default.lang</parameter>
parameter.
</para>

<para>An olink database can contain target data for the same
document in multiple languages.  Each set of data has the
same value for the <tag>targetdoc</tag> attribute in
the <tag>document</tag> element in the database, but with a 
different <tag>lang</tag> attribute value.
</para>

<para>When an olink is being resolved, the target is first
sought in the document with the same language as the olink.
If no match is found there, then this parameter is consulted
for additional languages to try.</para>

<para>The <parameter>olink.lang.fallback.sequence</parameter>
must be a whitespace separated list of lang values to
try.  The first one with a match in the olink database is used.
The default value is empty.</para>

<para>For example, a document might be written in German
and contain an olink with
<literal>targetdoc="adminguide"</literal>.
When the document is processed, the processor
first looks for a target dataset in the
olink database starting with:</para>

<literallayout><literal>&lt;document targetdoc="adminguide" lang="de"&gt;</literal>.
</literallayout>

<para>If there is no such element, then the
<parameter>olink.lang.fallback.sequence</parameter> 
parameter is consulted.
If its value is, for example, <quote>fr en</quote>, then the processor next
looks for <literal>targetdoc="adminguide" lang="fr"</literal>, and
then for <literal>targetdoc="adminguide" lang="en"</literal>.
If there is still no match, it looks for
<literal>targetdoc="adminguide"</literal> with no
lang attribute.
</para>

<para>This parameter is useful when a set of documents is only
partially translated, or is in the process of being translated.  
If a target of an olink has not yet been translated, then this
parameter permits the processor to look for the document in
other languages.  This assumes the reader would rather have
a link to a document in a different language than to have
a broken link.
</para>

</refsection> 
</refentry>

<refentry version="5.0" id="olink.properties">
<refmeta>
<refentrytitle>olink.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.properties</refname>
<refpurpose>Properties associated with the cross-reference 
text of an olink.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="olink.properties.frag">
&lt;xsl:attribute-set name="olink.properties"&gt;
  &lt;xsl:attribute name="show-destination"&gt;replace&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This <literal>attribute set</literal> is applied to the
<literal>fo:basic-link</literal> element of an olink. It is not applied to the
optional page number or optional title of the external
document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="prefer.internal.olink">
<refmeta>
<refentrytitle>prefer.internal.olink</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>prefer.internal.olink</refname>
<refpurpose>Prefer a local olink reference to an external reference</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="prefer.internal.olink.frag">
&lt;xsl:param name="prefer.internal.olink" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you are re-using XML content modules in multiple documents,
you may want to redirect some of your olinks.  This parameter
permits you to redirect an olink to the current document.
</para>

<para>For example: you are writing documentation for a  product, 
which includes 3 manuals: a little installation
booklet (booklet.xml), a user 
guide (user.xml), and a reference manual (reference.xml).
All 3 documents begin with the same introduction section (intro.xml) that 
contains a reference to the customization section (custom.xml) which is 
included in both user.xml and reference.xml documents.
</para>

<para>How do you write the link to custom.xml in intro.xml
so that it is interpreted correctly in all 3 documents?</para>
<itemizedlist>
<listitem><para>If you use xref, it will fail in user.xml.</para>
</listitem>
<listitem><para>If you use olink (pointing to reference.xml),
the reference in user.xml  
will point to the customization section of the reference manual, while it is 
actually available in user.xml.</para>
</listitem>
</itemizedlist>

<para>If you set the <parameter>prefer.internal.olink</parameter>
parameter to a non-zero value, then the processor will
first look in the olink database
for the olink's <tag>targetptr</tag> attribute value
in document matching the <parameter>current.docid</parameter>
parameter value.  If it isn't found there, then
it tries the document in the database
with the <tag>targetdoc</tag>
value that matches the olink's <tag>targetdoc</tag>
attribute.
</para>

<para>This feature permits an olink reference to resolve to
the current document if there is an element
with an id matching the olink's <tag>targetptr</tag>
value.  The current document's olink data must be
included in the target database for this to work.</para>

<caution>
<para>There is a potential for incorrect links if
the same <tag>id</tag> attribute value is used for different
content in different documents.
Some of your olinks may be redirected to the current document
when they shouldn't be.  It is not possible to control
individual olink instances.</para>
</caution>

</refsection>
</refentry>

<refentry version="5.0" id="target.database.document"> 
<refmeta> 
<refentrytitle>target.database.document</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>target.database.document</refname> 
<refpurpose>Name of master database file for resolving
olinks</refpurpose> 
</refnamediv> 
<refsynopsisdiv> 
<programlisting id="target.database.document.frag">
 &lt;xsl:param name="target.database.document"&gt;olinkdb.xml&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info>
 
<para>
To resolve olinks between documents, the stylesheets use a master
database document that identifies the target datafiles for all the
documents within the scope of the olinks. This parameter value is the
URI of the master document to be read during processing to resolve
olinks.  The default value is <filename>olinkdb.xml</filename>.</para>

<para>The data structure of the file is defined in the
<filename>targetdatabase.dtd</filename> DTD.  The database file
provides the high level elements to record the identifiers, locations,
and relationships of documents. The cross reference data for
individual documents is generally pulled into the database using
system entity references or XIncludes. See also
<parameter>targets.filename</parameter>.  </para> </refsection>
</refentry>

<refentry version="5.0" id="targets.filename"> 
<refmeta> 
<refentrytitle>targets.filename</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>targets.filename</refname> 
<refpurpose>Name of cross reference targets data file</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="targets.filename.frag">
&lt;xsl:param name="targets.filename"&gt;target.db&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info>
 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter lets you change the name of the generated
file from the default name <filename>target.db</filename>.
The name must agree with that used in the target database
used to resolve olinks during processing.
See also <parameter>target.database.document</parameter>.
</para> 
</refsection> 
</refentry>

<refentry version="5.0" id="use.local.olink.style"> 
<refmeta> 
<refentrytitle>use.local.olink.style</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>use.local.olink.style</refname> 
<refpurpose>Process olinks using xref style of current
document</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="use.local.olink.style.frag">
&lt;xsl:param name="use.local.olink.style" select="0"&gt;&lt;/xsl:param&gt; </programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the <parameter>use.local.olink.style</parameter> parameter is set to non-zero, then instead the cross
reference string is formed again from the target title, number, and
element name, using the stylesheet processing the targeting document.
Then olinks will match the xref style in the targeting document
rather than in the target document. If  both documents are processed
with the same stylesheet, then the results will be the same.</para> 
</refsection> 
</refentry>

</reference><reference id="xrefs" xml:base="../fo/param.xml"><title>Cross References</title>
<refentry version="5.0" id="insert.xref.page.number">
<refmeta>
<refentrytitle>insert.xref.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.xref.page.number</refname>
<refpurpose>Turns page numbers in xrefs on and off</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.xref.page.number.frag">
&lt;xsl:param name="insert.xref.page.number"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines if
cross references (<tag>xref</tag>s) in
printed output will
include page number citations.
It has three possible values.
</para>
<variablelist>
<varlistentry>
<term>no</term>
<listitem><para>No page number references will be generated.
</para></listitem>
</varlistentry>
<varlistentry>
<term>yes</term>
<listitem><para>Page number references will be generated
for all <tag>xref</tag> elements.
The style of page reference may be changed
if an <tag class="attribute">xrefstyle</tag>
attribute is used.
</para></listitem>
</varlistentry>
<varlistentry>
<term>maybe</term>
<listitem><para>Page number references will not be generated
for an <tag>xref</tag> element unless 
it has an
<tag class="attribute">xrefstyle</tag>
attribute whose value specifies a page reference.
</para></listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="xref.properties">
<refmeta>
<refentrytitle>xref.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.properties</refname>
<refpurpose>Properties associated with cross-reference text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.properties.frag">
&lt;xsl:attribute-set name="xref.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is used to set properties
on cross reference text.</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.label-title.separator">
<refmeta>
<refentrytitle>xref.label-title.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.label-title.separator</refname>
<refpurpose>Punctuation or space separating label from title in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.label-title.separator.frag">&lt;xsl:param name="xref.label-title.separator"&gt;: &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both label and title,
then the value of this parameter is inserted between
label and title in the output.  
</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.label-page.separator">
<refmeta>
<refentrytitle>xref.label-page.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.label-page.separator</refname>
<refpurpose>Punctuation or space separating label from page number in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.label-page.separator.frag">&lt;xsl:param name="xref.label-page.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both label and page
but no title,
then the value of this parameter is inserted between
label and page number in the output.  
If a title is included, then other separators are used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.title-page.separator">
<refmeta>
<refentrytitle>xref.title-page.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.title-page.separator</refname>
<refpurpose>Punctuation or space separating title from page number in xref</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.title-page.separator.frag">&lt;xsl:param name="xref.title-page.separator"&gt;&lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>
This parameter allows you to control the punctuation of certain
types of generated cross reference text.
When cross reference text is generated for an 
<tag class="element">xref</tag> or 
<tag class="element">olink</tag> element
using an <tag class="attribute">xrefstyle</tag> attribute
that makes use of the <literal>select:</literal> feature,
and the selected components include both title and page number,
then the value of this parameter is inserted between
title and page number in the output.  
</para>

</refsection>
</refentry>

<refentry version="5.0" id="insert.link.page.number">
<refmeta>
<refentrytitle>insert.link.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>insert.link.page.number</refname>
<refpurpose>Turns page numbers in link elements on and off</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="insert.link.page.number.frag">
&lt;xsl:param name="insert.link.page.number"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter determines if
cross references using the <tag>link</tag> element in
printed output will
include standard page number citations.
It has three possible values.
</para>
<variablelist>
<varlistentry>
<term>no</term>
<listitem><para>No page number references will be generated.
</para></listitem>
</varlistentry>
<varlistentry>
<term>yes</term>
<listitem><para>Page number references will be generated
for all <tag>link</tag> elements.
The style of page reference may be changed
if an <tag class="attribute">xrefstyle</tag>
attribute is used.
</para></listitem>
</varlistentry>
<varlistentry>
<term>maybe</term>
<listitem><para>Page number references will not be generated
for a <tag>link</tag> element unless 
it has an
<tag class="attribute">xrefstyle</tag>
attribute whose value specifies a page reference.
</para></listitem>
</varlistentry>
</variablelist>

<para>Although the <tag>xrefstyle</tag> attribute
can be used to turn the page reference on or off, it cannot be
used to control the formatting of the page number as it
can in <tag>xref</tag>.
In <tag>link</tag> it will always format with
the style established by the
gentext template with <literal>name="page.citation"</literal>
in the <literal>l:context name="xref"</literal>.
</para>
</refsection>
</refentry>

</reference><reference id="lists" xml:base="../fo/param.xml"><title>Lists</title>
<refentry version="5.0" id="compact.list.item.spacing">
<refmeta>
<refentrytitle>compact.list.item.spacing</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>compact.list.item.spacing</refname>
<refpurpose>What space do you want between list items (when spacing="compact")?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="compact.list.item.spacing.frag">&lt;xsl:attribute-set name="compact.list.item.spacing"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;0em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;0.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify what spacing you want between each list item when
<tag class="attribute">spacing</tag> is
<quote><literal>compact</literal></quote>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="itemizedlist.properties">
<refmeta>
<refentrytitle>itemizedlist.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>itemizedlist.properties</refname>
<refpurpose>Properties that apply to each list-block generated by itemizedlist.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="itemizedlist.properties.frag">&lt;xsl:attribute-set name="itemizedlist.properties" use-attribute-sets="list.block.properties"&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to each fo:list-block generated by itemizedlist.</para>
</refsection>
</refentry>

<refentry version="5.0" id="itemizedlist.label.properties">
<refmeta>
<refentrytitle>itemizedlist.label.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>itemizedlist.label.properties</refname>
<refpurpose>Properties that apply to each label inside itemized list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="itemizedlist.label.properties.frag">&lt;xsl:attribute-set name="itemizedlist.label.properties"&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to each label inside itemized list. E.g.:</para>
<programlisting>&lt;xsl:attribute-set name="itemizedlist.label.properties"&gt;
  &lt;xsl:attribute name="text-align"&gt;right&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsection>
</refentry>

<refentry version="5.0" id="itemizedlist.label.width">
<refmeta>
<refentrytitle>itemizedlist.label.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>itemizedlist.label.width</refname>
<refpurpose>The default width of the label (bullet) in an itemized list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="itemizedlist.label.width.frag">
    &lt;xsl:param name="itemizedlist.label.width"&gt;1.0em&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Specifies the default width of the label (usually a bullet or other
symbol) in an itemized list. You can override the default value on any
particular list with the &#8220;dbfo&#8221; processing instruction using the
&#8220;label-width&#8221; pseudoattribute.</para>
</refsection>
</refentry>

<refentry version="5.0" id="list.block.properties">
<refmeta>
<refentrytitle>list.block.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>list.block.properties</refname>
<refpurpose>Properties that apply to each list-block generated by list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="list.block.properties.frag">&lt;xsl:attribute-set name="list.block.properties"&gt;
  &lt;xsl:attribute name="provisional-label-separation"&gt;0.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="provisional-distance-between-starts"&gt;1.5em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to each fo:list-block generated by itemizedlist/orderedlist.</para>
</refsection>
</refentry>

<refentry version="5.0" id="list.block.spacing">
<refmeta>
<refentrytitle>list.block.spacing</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>list.block.spacing</refname>
<refpurpose>What spacing do you want before and after lists?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="list.block.spacing.frag">&lt;xsl:attribute-set name="list.block.spacing"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify the spacing required before and after a list. It is necessary to specify the space after a list block because lists can come inside of paras.  </para>
</refsection>
</refentry>

<refentry version="5.0" id="list.item.spacing">
<refmeta>
<refentrytitle>list.item.spacing</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>list.item.spacing</refname>
<refpurpose>What space do you want between list items?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="list.item.spacing.frag">&lt;xsl:attribute-set name="list.item.spacing"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify what spacing you want between each list item.</para>
</refsection>
</refentry>

<refentry version="5.0" id="orderedlist.properties">
<refmeta>
<refentrytitle>orderedlist.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>orderedlist.properties</refname>
<refpurpose>Properties that apply to each list-block generated by orderedlist.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="orderedlist.properties.frag">&lt;xsl:attribute-set name="orderedlist.properties" use-attribute-sets="list.block.properties"&gt;
  &lt;xsl:attribute name="provisional-distance-between-starts"&gt;2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to each fo:list-block generated by orderedlist.</para>
</refsection>
</refentry>

<refentry version="5.0" id="orderedlist.label.properties">
<refmeta>
<refentrytitle>orderedlist.label.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>orderedlist.label.properties</refname>
<refpurpose>Properties that apply to each label inside ordered list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="orderedlist.label.properties.frag">&lt;xsl:attribute-set name="orderedlist.label.properties"&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to each label inside ordered list. E.g.:</para>
<programlisting>&lt;xsl:attribute-set name="orderedlist.label.properties"&gt;
  &lt;xsl:attribute name="text-align"&gt;right&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsection>
</refentry>

<refentry version="5.0" id="orderedlist.label.width">
<refmeta>
<refentrytitle>orderedlist.label.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>orderedlist.label.width</refname>
<refpurpose>The default width of the label (number) in an ordered list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="orderedlist.label.width.frag">
&lt;xsl:param name="orderedlist.label.width"&gt;1.2em&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Specifies the default width of the label (usually a number or
sequence of numbers) in an ordered list. You can override the default
value on any particular list with the &#8220;dbfo&#8221; processing instruction
using the &#8220;label-width&#8221; pseudoattribute.</para>
</refsection>
</refentry>

<refentry version="5.0" id="variablelist.max.termlength">
<refmeta>
<refentrytitle>variablelist.max.termlength</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.max.termlength</refname>
<refpurpose>Specifies the longest term in variablelists</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.max.termlength.frag">
&lt;xsl:param name="variablelist.max.termlength"&gt;24&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In variablelists, the <tag>listitem</tag>
is indented to leave room for the 
<tag>term</tag> elements. That indent may be computed
if it is not specified with a <tag class="attribute">termlength</tag>
attribute on the <tag>variablelist</tag> element.
</para>
<para>
The computation counts characters in the 
<tag>term</tag> elements in the list
to find the longest term.  However, some terms are very long
and would produce extreme indents.  This parameter lets you
set a maximum character count.  Any terms longer than the maximum
would line wrap.  The default value is 24.
</para>
<para>
The character counts are converted to physical widths
by multiplying by 0.50em. There will be some variability
in how many actual characters fit in the space
since some characters are wider than others.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.term.separator">
<refmeta>
<refentrytitle>variablelist.term.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.term.separator</refname>
<refpurpose>Text to separate <tag>term</tag>s within a multi-term
<tag>varlistentry</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.term.separator.frag">
&lt;xsl:param name="variablelist.term.separator"&gt;, &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When a <tag>varlistentry</tag> contains multiple <tag>term</tag>
elements, the string specified in the value of the
<parameter>variablelist.term.separator</parameter> parameter is placed
after each <tag>term</tag> except the last.</para>

<note>
  <para>To generate a line break between multiple <tag>term</tag>s in
  a <tag>varlistentry</tag>, set a non-zero value for the
  <parameter>variablelist.term.break.after</parameter> parameter. If
  you do so, you may also want to set the value of the
  <parameter>variablelist.term.separator</parameter> parameter to an
  empty string (to suppress rendering of the default comma and space
  after each <tag>term</tag>).</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.term.properties">
<refmeta>
<refentrytitle>variablelist.term.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.term.properties</refname>
<refpurpose>To add properties to the term elements in a variablelist.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.term.properties.frag">
&lt;xsl:attribute-set name="variablelist.term.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the block containing a
term in a variablelist.
Use this attribute-set to set
font properties or alignment, for example.</para>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.term.break.after">
<refmeta>
<refentrytitle>variablelist.term.break.after</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.term.break.after</refname>
<refpurpose>Generate line break after each <tag>term</tag> within a
multi-term <tag>varlistentry</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.term.break.after.frag">
&lt;xsl:param name="variablelist.term.break.after"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Set a non-zero value for the
<parameter>variablelist.term.break.after</parameter> parameter to
generate a line break between <tag>term</tag>s in a
multi-term <tag>varlistentry</tag>.</para>

<note>
<para>If you set a non-zero value for
<parameter>variablelist.term.break.after</parameter>, you may also
want to set the value of the
<parameter>variablelist.term.separator</parameter> parameter to an
empty string (to suppress rendering of the default comma and space
after each <tag>term</tag>).</para>
</note>

</refsection>
</refentry>

</reference><reference id="qa" xml:base="../fo/param.xml"><title>QAndASet</title>
<refentry version="5.0" id="qandadiv.autolabel">
<refmeta>
<refentrytitle>qandadiv.autolabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qandadiv.autolabel</refname>
<refpurpose>Are divisions in QAndASets enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qandadiv.autolabel.frag">&lt;xsl:param name="qandadiv.autolabel" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, unlabeled qandadivs will be enumerated.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.inherit.numeration">
<refmeta>
<refentrytitle>qanda.inherit.numeration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.inherit.numeration</refname>
<refpurpose>Does enumeration of QandASet components inherit the numeration of parent elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.inherit.numeration.frag">
&lt;xsl:param name="qanda.inherit.numeration" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, numbered <tag>qandadiv</tag> elements and
<tag>question</tag> and <tag>answer</tag> inherit the enumeration of
the ancestors of the <tag>qandaset</tag>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.defaultlabel">
<refmeta>
<refentrytitle>qanda.defaultlabel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">number</refmiscinfo>
<refmiscinfo class="other" otherclass="value">qanda</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.defaultlabel</refname>
<refpurpose>Sets the default for defaultlabel on QandASet.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.defaultlabel.frag">
&lt;xsl:param name="qanda.defaultlabel"&gt;number&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If no <literal>defaultlabel</literal> attribute is specified on
a <tag>qandaset</tag>, this value is used. It is generally one of the legal
values for the defaultlabel attribute (<literal>none</literal>, 
<literal>number</literal> or
<literal>qanda</literal>), or one of the additional stylesheet-specific values
(<literal>qnumber</literal> or <literal>qnumberanda</literal>).
The default value is 'number'.
</para>
<para>The values are rendered as follows:</para>
<variablelist>
<varlistentry><term><literal>qanda</literal></term>
<listitem>
<para><tag>question</tag>s are labeled "Q:" and
<tag>answer</tag>s are labeled "A:". </para>
</listitem>
</varlistentry>

<varlistentry><term><literal>number</literal></term>
<listitem>
<para>The questions are enumerated and the answers
are not labeled. </para>
</listitem>
</varlistentry>

<varlistentry><term><literal>qnumber</literal></term>
<listitem>
<para>The questions are labeled "Q:" followed by a number, and answers are not 
labeled. 
When sections are numbered, adding a label
to the number distinguishes the question numbers
from the section numbers.
This value is not allowed in the
<tag class="attribute">defaultlabel</tag> attribute
of a <tag>qandaset</tag> element.</para>
</listitem>
</varlistentry>

<varlistentry><term><literal>qnumberanda</literal></term>
<listitem>
<para>The questions are labeled "Q:" followed by a number, and
the answers are labeled "A:". 
When sections are numbered, adding a label
to the number distinguishes the question numbers
from the section numbers.
This value is not allowed in the
<tag class="attribute">defaultlabel</tag> attribute
of a <tag>qandaset</tag> element.</para>
</listitem>
</varlistentry>

<varlistentry><term><literal>none</literal></term>
<listitem>
<para>No distinguishing label precedes Questions or Answers. 
</para>
</listitem>
</varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.in.toc">
<refmeta>
<refentrytitle>qanda.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.in.toc</refname>
<refpurpose>Should qandaentry questions appear in 
the document table of contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.in.toc.frag">&lt;xsl:param name="qanda.in.toc" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true (non-zero), then the generated table of contents
for a document will include <tag>qandaset</tag> titles, 
<tag>qandadiv</tag> titles,
and <tag>question</tag> elements.  The default value (zero) excludes
them from the TOC.
</para>
<para>This parameter does not affect any tables of contents
that may be generated inside a qandaset or qandadiv.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.nested.in.toc">
<refmeta>
<refentrytitle>qanda.nested.in.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.nested.in.toc</refname>
<refpurpose>Should nested answer/qandaentry instances appear in TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.nested.in.toc.frag">
&lt;xsl:param name="qanda.nested.in.toc" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, instances of <tag>qandaentry</tag>
that are children of <tag>answer</tag> elements are shown in
the TOC.</para>

</refsection>
</refentry>

</reference><reference id="biblio" xml:base="../fo/param.xml"><title>Bibliography</title>
<refentry version="5.0" id="bibliography.style">
<refmeta>
<refentrytitle>bibliography.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">normal</refmiscinfo>
<refmiscinfo class="other" otherclass="value">iso690</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.style</refname>
<refpurpose>Style used for formatting of biblioentries.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.style.frag">
&lt;xsl:param name="bibliography.style"&gt;normal&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Currently only <literal>normal</literal> and
<literal>iso690</literal> styles are supported.</para>

<para>In order to use ISO690 style to the full extent you might need
to use additional markup described on <link xlink:href="http://wiki.docbook.org/topic/ISO690Bibliography">the
following WiKi page</link>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="biblioentry.item.separator">
<refmeta>
<refentrytitle>biblioentry.item.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>biblioentry.item.separator</refname>
<refpurpose>Text to separate bibliography entries</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="biblioentry.item.separator.frag">&lt;xsl:param name="biblioentry.item.separator"&gt;. &lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Text to separate bibliography entries
</para>

</refsection>
</refentry>

<refentry version="5.0" id="bibliography.collection">
<refmeta>
<refentrytitle>bibliography.collection</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.collection</refname>
<refpurpose>Name of the bibliography collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.collection.frag">
&lt;xsl:param name="bibliography.collection"&gt;http://docbook.sourceforge.net/release/bibliography/bibliography.xml&lt;/xsl:param&gt;

</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Maintaining bibliography entries across a set of documents is tedious, time
consuming, and error prone. It makes much more sense, usually, to store all of
the bibliography entries in a single place and simply <quote>extract</quote>
the ones you need in each document.</para>

<para>That's the purpose of the
<parameter>bibliography.collection</parameter> parameter. To setup a global
bibliography <quote>database</quote>, follow these steps:</para>

<para>First, create a stand-alone bibliography document that contains all of
the documents that you wish to reference. Make sure that each bibliography
entry (whether you use <tag>biblioentry</tag> or <tag>bibliomixed</tag>)
has an ID.</para>

<para>My global bibliography, <filename>~/bibliography.xml</filename> begins
like this:</para>

<informalexample>
<programlisting>&lt;!DOCTYPE bibliography
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;bibliography&gt;&lt;title&gt;References&lt;/title&gt;

&lt;bibliomixed id="xml-rec"&gt;&lt;abbrev&gt;XML 1.0&lt;/abbrev&gt;Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml"&gt;Extensible Markup
Language (XML) 1.0 Second Edition&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 2000.
&lt;/bibliomixed&gt;

&lt;bibliomixed id="xml-names"&gt;&lt;abbrev&gt;Namespaces&lt;/abbrev&gt;Tim Bray,
Dave Hollander,
and Andrew Layman, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces in
XML&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 1999.
&lt;/bibliomixed&gt;

&lt;!-- ... --&gt;
&lt;/bibliography&gt;
</programlisting>
</informalexample>

<para>When you create a bibliography in your document, simply
provide <emphasis>empty</emphasis> <tag>bibliomixed</tag>
entries for each document that you wish to cite. Make sure that these
elements have the same ID as the corresponding <quote>real</quote>
entry in your global bibliography.</para>

<para>For example:</para>

<informalexample>
<programlisting>&lt;bibliography&gt;&lt;title&gt;Bibliography&lt;/title&gt;

&lt;bibliomixed id="xml-rec"/&gt;
&lt;bibliomixed id="xml-names"/&gt;
&lt;bibliomixed id="DKnuth86"&gt;Donald E. Knuth. &lt;citetitle&gt;Computers and
Typesetting: Volume B, TeX: The Program&lt;/citetitle&gt;. Addison-Wesley,
1986.  ISBN 0-201-13437-3.
&lt;/bibliomixed&gt;
&lt;bibliomixed id="relaxng"/&gt;

&lt;/bibliography&gt;</programlisting>
</informalexample>

<para>Note that it's perfectly acceptable to mix entries from your
global bibliography with <quote>normal</quote> entries. You can use
<tag>xref</tag> or other elements to cross-reference your
bibliography entries in exactly the same way you do now.</para>

<para>Finally, when you are ready to format your document, simply set the
<parameter>bibliography.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global bibliography.</para>

<para>A relative path in the parameter is interpreted in one
of two ways:</para>
<orderedlist numeration="loweralpha">
  <listitem>
    <para>If your document contains no links to empty bibliographic elements,
    then the path is relative to the file containing
    the first <tag>bibliomixed</tag> element in the document.</para>
  </listitem>
  <listitem>
    <para>If your document does contain links to empty bibliographic elements,
    then the path is relative to the file containing
    the first such link element in the document.</para>
  </listitem>
</orderedlist>
<para>Once the collection file is opened by the first instance described
above, it stays open for the current document
and the relative path is not reinterpreted again.</para>

<para>The stylesheets will format the bibliography in your document as if
all of the entries referenced appeared there literally.</para>

</refsection>
</refentry>

<refentry version="5.0" id="bibliography.numbered">
<refmeta>
<refentrytitle>bibliography.numbered</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.numbered</refname>
<refpurpose>Should bibliography entries be numbered?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bibliography.numbered.frag">
&lt;xsl:param name="bibliography.numbered" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero bibliography entries will be numbered</para>

</refsection>
</refentry>

<refentry version="5.0" id="biblioentry.properties">
<refmeta>
  <refentrytitle>biblioentry.properties</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>biblioentry.properties</refname>
<refpurpose>To set the style for biblioentry.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="biblioentry.properties.frag">&lt;xsl:attribute-set name="biblioentry.properties" use-attribute-sets="normal.para.spacing"&gt;
  &lt;xsl:attribute name="start-indent"&gt;0.5in&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-indent"&gt;-0.5in&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>How do you want biblioentry styled? </para>
<para>Set the font-size, weight, space-above and space-below, indents, etc. to the style required</para>

</refsection>
</refentry>

</reference><reference id="glossary" xml:base="../fo/param.xml"><title>Glossary</title>
<refentry version="5.0" id="glossterm.auto.link">
<refmeta>
<refentrytitle>glossterm.auto.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.auto.link</refname>
<refpurpose>Generate links from glossterm to glossentry automatically?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.auto.link.frag">
&lt;xsl:param name="glossterm.auto.link" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, links from inline <tag>glossterm</tag>s to the corresponding 
<tag>glossentry</tag> elements in a <tag>glossary</tag> or <tag>glosslist</tag> 
will be automatically generated. This is useful when your glossterms are consistent 
and you don't want to add links manually.</para>

<para>The automatic link generation feature is not used on <tag>glossterm</tag> elements
that have a <tag class="attribute">linkend</tag> attribute.</para>

</refsection>
</refentry>

<refentry version="5.0" id="firstterm.only.link">
<refmeta>
<refentrytitle>firstterm.only.link</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>firstterm.only.link</refname>
<refpurpose>Does automatic glossterm linking only apply to firstterms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="firstterm.only.link.frag">
&lt;xsl:param name="firstterm.only.link" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, only <tag>firstterm</tag>s will be automatically linked
to the glossary. If glossary linking is not enabled, this parameter
has no effect.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossary.collection">
<refmeta>
<refentrytitle>glossary.collection</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.collection</refname>
<refpurpose>Name of the glossary collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossary.collection.frag">
&lt;xsl:param name="glossary.collection"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Glossaries maintained independently across a set of documents
are likely to become inconsistent unless considerable effort is
expended to keep them in sync. It makes much more sense, usually, to
store all of the glossary entries in a single place and simply
<quote>extract</quote> the ones you need in each document.</para>

<para>That's the purpose of the
<parameter>glossary.collection</parameter> parameter. To setup a global
glossary <quote>database</quote>, follow these steps:</para>

<refsection><info><title>Setting Up the Glossary Database</title></info>

<para>First, create a stand-alone glossary document that contains all of
the entries that you wish to reference. Make sure that each glossary
entry has an ID.</para>

<para>Here's an example glossary:</para>

<informalexample>
<programlisting>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE glossary
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;glossary&gt;
&lt;glossaryinfo&gt;
&lt;editor&gt;&lt;firstname&gt;Eric&lt;/firstname&gt;&lt;surname&gt;Raymond&lt;/surname&gt;&lt;/editor&gt;
&lt;title&gt;Jargon File 4.2.3 (abridged)&lt;/title&gt;
&lt;releaseinfo&gt;Just some test data&lt;/releaseinfo&gt;
&lt;/glossaryinfo&gt;

&lt;glossdiv&gt;&lt;title&gt;0&lt;/title&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;0&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;Numeric zero, as opposed to the letter `O' (the 15th letter of
the English alphabet). In their unmodified forms they look a lot
alike, and various kluges invented to make them visually distinct have
compounded the confusion. If your zero is center-dotted and letter-O
is not, or if letter-O looks almost rectangular but zero looks more
like an American football stood on end (or the reverse), you're
probably looking at a modern character display (though the dotted zero
seems to have originated as an option on IBM 3270 controllers). If
your zero is slashed but letter-O is not, you're probably looking at
an old-style ASCII graphic set descended from the default typewheel on
the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter,
curse this arrangement). (Interestingly, the slashed zero long
predates computers; Florian Cajori's monumental "A History of
Mathematical Notations" notes that it was used in the twelfth and
thirteenth centuries.) If letter-O has a slash across it and the zero
does not, your display is tuned for a very old convention used at IBM
and a few other early mainframe makers (Scandinavians curse &lt;emphasis&gt;this&lt;/emphasis&gt;
arrangement even more, because it means two of their letters collide).
Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis&gt;reversed&lt;/emphasis&gt;
slash. Old CDC computers rendered letter O as an unbroken oval and 0
as an oval broken at upper right and lower left. And yet another
convention common on early line printers left zero unornamented but
added a tail or hook to the letter-O so that it resembled an inverted
Q or cursive capital letter-O (this was endorsed by a draft ANSI
standard for how to draw ASCII characters, but the final standard
changed the distinguisher to a tick-mark in the upper-left corner).
Are we sufficiently confused yet?&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;1TBS&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para role="accidence"&gt;
&lt;phrase role="pronounce"&gt;&lt;/phrase&gt;
&lt;phrase role="partsofspeach"&gt;n&lt;/phrase&gt;
&lt;/para&gt;
&lt;para&gt;The "One True Brace Style"&lt;/para&gt;
&lt;glossseealso&gt;indent style&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;!-- ... --&gt;

&lt;/glossdiv&gt;

&lt;!-- ... --&gt;

&lt;/glossary&gt;</programlisting>
</informalexample>

</refsection>

<refsection><info><title>Marking Up Glossary Terms</title></info>

<para>That takes care of the glossary database, now you have to get the entries
into your document. Unlike bibliography entries, which can be empty, creating
<quote>placeholder</quote> glossary entries would be very tedious. So instead,
support for <parameter>glossary.collection</parameter> relies on implicit linking.</para>

<para>In your source document, simply use <tag>firstterm</tag> and
<tag>glossterm</tag> to identify the terms you wish to have included
in the glossary. The stylesheets assume that you will either set the
<tag class="attribute">baseform</tag> attribute correctly, or that the
content of the element exactly matches a term in your glossary.</para>

<para>If you're using a <parameter>glossary.collection</parameter>, don't
make explicit links on the terms in your document.</para>

<para>So, in your document, you might write things like this:</para>

<informalexample>
<programlisting>&lt;para&gt;This is dummy text, without any real meaning.
The point is simply to reference glossary terms like &lt;glossterm&gt;0&lt;/glossterm&gt;
and the &lt;firstterm baseform="1TBS"&gt;One True Brace Style (1TBS)&lt;/firstterm&gt;.
The &lt;glossterm&gt;1TBS&lt;/glossterm&gt;, as you can probably imagine, is a nearly
religious issue.&lt;/para&gt;</programlisting>
</informalexample>

<para>If you set the <parameter>firstterm.only.link</parameter> parameter,
only the terms marked with <tag>firstterm</tag> will be links.
Otherwise, all the terms will be linked.</para>

</refsection>

<refsection><info><title>Marking Up the Glossary</title></info>

<para>The glossary itself has to be identified for the stylesheets. For lack
of a better choice, the <tag class="attribute">role</tag> is used.
To identify the glossary as the target for automatic processing, set
the role to <quote><literal>auto</literal></quote>. The title of this
glossary (and any other information from the <tag>glossaryinfo</tag>
that's rendered by your stylesheet) will be displayed, but the entries will
come from the database.
</para>

<para>Unfortunately, the glossary can't be empty, so you must put in
at least one <tag>glossentry</tag>. The content of this entry
is irrelevant, it will not be rendered:</para>

<informalexample>
<programlisting>&lt;glossary role="auto"&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>

<para>What about glossary divisions? If your glossary database has glossary
divisions <emphasis>and</emphasis> your automatic glossary contains at least
one <tag>glossdiv</tag>, the automic glossary will have divisions.
If the <tag>glossdiv</tag> is missing from either location, no divisions
will be rendered.</para>

<para>Glossary entries (and divisions, if appropriate) in the glossary will
occur in precisely the order they occur in your database.</para>

</refsection>

<refsection><info><title>Formatting the Document</title></info>

<para>Finally, when you are ready to format your document, simply set the
<parameter>glossary.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global glossary.</para>

<para>A relative path in the parameter is interpreted in one
of two ways:</para>
<orderedlist numeration="loweralpha">
  <listitem>
    <para>If the parameter <literal>glossterm.auto.link</literal>
    is set to zero, then the path is relative to the file containing
    the empty <tag>glossary</tag> element in the document.</para>
  </listitem>
  <listitem>
    <para>If the parameter <literal>glossterm.auto.link</literal>
    is set to non-zero, then the path is relative to the file containing
    the first inline <tag>glossterm</tag> or
    <tag>firstterm</tag> in the document to be linked.</para>
  </listitem>
</orderedlist>
<para>Once the collection file is opened by the first instance described
above, it stays open for the current document
and the relative path is not reinterpreted again.</para>

<para>The stylesheets will format the glossary in your document as if
all of the entries implicilty referenced appeared there literally.</para>
</refsection>

<refsection><info><title>Limitations</title></info>

<para>Glossary cross-references <emphasis>within the glossary</emphasis> are
not supported. For example, this <emphasis>will not</emphasis> work:</para>

<informalexample>
<programlisting>&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>

<para>If you put glossary cross-references in your glossary that way,
you'll get the cryptic error: <computeroutput>Warning:
glossary.collection specified, but there are 0 automatic
glossaries</computeroutput>.</para>

<para>Instead, you must do two things:</para>

<orderedlist>
<listitem>
<para>Markup your glossary using <tag>glossseealso</tag>:</para>

<informalexample>
<programlisting>&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>
</listitem>

<listitem>
<para>Make sure there is at least one <tag>glossterm</tag> reference to
<glossterm>gloss-2</glossterm> <emphasis>in your document</emphasis>. The
easiest way to do that is probably within a <tag>remark</tag> in your
automatic glossary:</para>

<informalexample>
<programlisting>&lt;glossary role="auto"&gt;
&lt;remark&gt;Make sure there's a reference to &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/remark&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>
</listitem>
</orderedlist>
</refsection>

</refsection>
</refentry>

<refentry version="5.0" id="glossary.as.blocks">
<refmeta>
<refentrytitle>glossary.as.blocks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.as.blocks</refname>
<refpurpose>Present glossarys using blocks instead of lists?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossary.as.blocks.frag">
&lt;xsl:param name="glossary.as.blocks" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>glossary</tag>s will be formatted as
blocks.</para>

<para>If you have long <tag>glossterm</tag>s, proper list
markup in the FO case may produce unattractive lists. By setting this
parameter, you can force the stylesheets to produce block markup
instead of proper lists.</para>

<para>You can override this setting with a processing instruction as the
child of <tag>glossary</tag>: <tag class="xmlpi">dbfo
glossary-presentation="blocks"</tag> or <tag class="xmlpi">dbfo
glossary-presentation="list"</tag></para>

</refsection>
</refentry>

<refentry version="5.0" id="glosslist.as.blocks">
<refmeta>
<refentrytitle>glosslist.as.blocks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glosslist.as.blocks</refname>
<refpurpose>Use blocks for glosslists?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glosslist.as.blocks.frag">
&lt;xsl:param name="glosslist.as.blocks" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>See <parameter>glossary.as.blocks</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossentry.list.item.properties">
<refmeta>
<refentrytitle>glossentry.list.item.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossentry.list.item.properties</refname>
<refpurpose>To add properties to each glossentry in a list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossentry.list.item.properties.frag">&lt;xsl:attribute-set name="glossentry.list.item.properties"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the fo:list-item containing a
glossentry in a glossary when the <parameter>glossary.as.blocks</parameter> parameter
is zero.
Use this attribute-set to set
spacing between entries, for example.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossterm.block.properties">
<refmeta>
<refentrytitle>glossterm.block.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.block.properties</refname>
<refpurpose>To add properties to the block of a glossentry's glossterm.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.block.properties.frag">&lt;xsl:attribute-set name="glossterm.block.properties"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-together.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the block containing a
glossary term in a glossary when the <parameter>glossary.as.blocks</parameter> parameter
is non-zero.
Use this attribute-set to set the space above and below,
font properties,
and any indent for the glossary term.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossdef.block.properties">
<refmeta>
<refentrytitle>glossdef.block.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossdef.block.properties</refname>
<refpurpose>To add properties to the block of a glossary definition.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossdef.block.properties.frag">&lt;xsl:attribute-set name="glossdef.block.properties"&gt;
  &lt;xsl:attribute name="margin-{$direction.align.start}"&gt;.25in&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the block containing a
glossary definition in a glossary when
the <parameter>glossary.as.blocks</parameter> parameter
is non-zero.
Use this attribute-set to set the space above and below,
any font properties,
and any indent for the glossary definition.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossterm.list.properties">
<refmeta>
<refentrytitle>glossterm.list.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.list.properties</refname>
<refpurpose>To add properties to the glossterm in a list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.list.properties.frag">
&lt;xsl:attribute-set name="glossterm.list.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the block containing a
glossary term in a glossary when the <parameter>glossary.as.blocks</parameter> parameter
is zero.
Use this attribute-set to set
font properties, for example.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossdef.list.properties">
<refmeta>
<refentrytitle>glossdef.list.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossdef.list.properties</refname>
<refpurpose>To add properties to the glossary definition in a list.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossdef.list.properties.frag">
&lt;xsl:attribute-set name="glossdef.list.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>These properties are added to the block containing a
glossary definition in a glossary when
the <parameter>glossary.as.blocks</parameter> parameter
is zero.
Use this attribute-set to set font properties, for example.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossterm.width">
<refmeta>
<refentrytitle>glossterm.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.width</refname>
<refpurpose>Width of glossterm in list presentation mode</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.width.frag">
&lt;xsl:param name="glossterm.width"&gt;2in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the width reserved for glossary terms when
a list presentation is used.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossterm.separation">
<refmeta>
<refentrytitle>glossterm.separation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.separation</refname>
<refpurpose>Separation between glossary terms and descriptions in list mode</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossterm.separation.frag">
&lt;xsl:param name="glossterm.separation"&gt;0.25in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the miminum horizontal
separation between glossary terms and descriptions when
they are presented side-by-side using lists
when the <parameter>glossary.as.blocks</parameter>
is zero.</para>

</refsection>
</refentry>

<refentry version="5.0" id="glossentry.show.acronym">
<refmeta>
<refentrytitle>glossentry.show.acronym</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">no</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">primary</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossentry.show.acronym</refname>
<refpurpose>Display <tag>glossentry</tag> acronyms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossentry.show.acronym.frag">
&lt;xsl:param name="glossentry.show.acronym"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A setting of <quote>yes</quote> means they should be displayed;
<quote>no</quote> means they shouldn't. If <quote>primary</quote> is used,
then they are shown as the primary text for the entry.</para>

<note>
<para>This setting controls both <tag>acronym</tag> and
<tag>abbrev</tag> elements in the <tag>glossentry</tag>.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="glossary.sort">
<refmeta>
<refentrytitle>glossary.sort</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.sort</refname>
<refpurpose>Sort glossentry elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="glossary.sort.frag">
&lt;xsl:param name="glossary.sort" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, then the glossentry elements within a
glossary, glossdiv, or glosslist are sorted on the glossterm, using
the current lang setting.  If zero (the default), then
glossentry elements are not sorted and are presented
in document order.
</para>

</refsection>
</refentry>

</reference><reference id="misc" xml:base="../fo/param.xml"><title>Miscellaneous</title>
<refentry version="5.0" id="formal.procedures">
<refmeta>
<refentrytitle>formal.procedures</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.procedures</refname>
<refpurpose>Selects formal or informal procedures</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.procedures.frag">
&lt;xsl:param name="formal.procedures" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Formal procedures are numbered and always have a title.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="formal.title.placement">
<refmeta>
<refentrytitle>formal.title.placement</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.title.placement</refname>
<refpurpose>Specifies where formal object titles should occur</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.title.placement.frag">
&lt;xsl:param name="formal.title.placement"&gt;
figure before
example before
equation before
table before
procedure before
task before
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies where formal object titles should occur. For each formal object
type (<tag>figure</tag>,
<tag>example</tag>,
<tag>equation</tag>,
<tag>table</tag>, and <tag>procedure</tag>)
you can specify either the keyword
<quote><literal>before</literal></quote> or
<quote><literal>after</literal></quote>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="runinhead.default.title.end.punct">
<refmeta>
<refentrytitle>runinhead.default.title.end.punct</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.default.title.end.punct</refname>
<refpurpose>Default punctuation character on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="runinhead.default.title.end.punct.frag">&lt;xsl:param name="runinhead.default.title.end.punct"&gt;.&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, For a <tag>formalpara</tag>, use the specified
string as the separator between the title and following text. The period is the default value.</para>

</refsection>
</refentry>

<refentry version="5.0" id="runinhead.title.end.punct">
<refmeta>
<refentrytitle>runinhead.title.end.punct</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.title.end.punct</refname>
<refpurpose>Characters that count as punctuation on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="runinhead.title.end.punct.frag">
&lt;xsl:param name="runinhead.title.end.punct"&gt;.!?:&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specify which characters are to be counted as punctuation. These
characters are checked for a match with the last character of the
title. If no match is found, the
<parameter>runinhead.default.title.end.punct</parameter> contents are
inserted. This is to avoid duplicated punctuation in the output.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="show.comments">
<refmeta>
<refentrytitle>show.comments</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>show.comments</refname>
<refpurpose>Display <tag>remark</tag> elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="show.comments.frag">
&lt;xsl:param name="show.comments" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, comments will be displayed, otherwise they
are suppressed.  Comments here refers to the <tag>remark</tag> element
(which was called <literal>comment</literal> prior to DocBook
4.0), not XML comments (&lt;-- like this --&gt;) which are
unavailable.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="punct.honorific">
<refmeta>
<refentrytitle>punct.honorific</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>punct.honorific</refname>
<refpurpose>Punctuation after an honorific in a personal name.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="punct.honorific.frag">
&lt;xsl:param name="punct.honorific"&gt;.&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the punctuation that should be added after an
honorific in a personal name.</para>

</refsection>
</refentry>

<refentry version="5.0" id="segmentedlist.as.table">
<refmeta>
<refentrytitle>segmentedlist.as.table</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>segmentedlist.as.table</refname>
<refpurpose>Format segmented lists as tables?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="segmentedlist.as.table.frag">
&lt;xsl:param name="segmentedlist.as.table" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>segmentedlist</tag>s will be formatted as
tables.</para>

</refsection>
</refentry>

<refentry version="5.0" id="variablelist.as.blocks">
<refmeta>
<refentrytitle>variablelist.as.blocks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.as.blocks</refname>
<refpurpose>Format <tag>variablelist</tag>s lists as blocks?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="variablelist.as.blocks.frag">
&lt;xsl:param name="variablelist.as.blocks" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, <tag>variablelist</tag>s will be formatted as
blocks.</para>

<para>If you have long terms, proper list markup in the FO case may produce
unattractive lists. By setting this parameter, you can force the stylesheets
to produce block markup instead of proper lists.</para>

<para>You can override this setting with a processing instruction as the
child of <tag>variablelist</tag>: <tag class="xmlpi">dbfo
list-presentation="blocks"</tag> or <tag class="xmlpi">dbfo
list-presentation="list"</tag>.</para>

<para>When using <literal>list-presentation="list"</literal>,
you can also control the amount of space used for the <tag>term</tag>s with 
the <tag class="xmlpi">dbfo term-width=".25in"</tag> processing instruction,
the <tag class="attribute">termlength</tag> attribute on <tag>variablelist</tag>,
or allow the stylesheets to attempt to calculate the amount of space to leave based on the 
number of letters in the longest term.  
</para>

<programlisting>  &lt;variablelist&gt;
        &lt;?dbfo list-presentation="list"?&gt;
        &lt;?dbfo term-width="1.5in"?&gt;
        &lt;?dbhtml list-presentation="table"?&gt;
        &lt;?dbhtml term-width="1.5in"?&gt;
        &lt;varlistentry&gt;
          &lt;term&gt;list&lt;/term&gt;
          &lt;listitem&gt;
                &lt;para&gt;
                  Formatted as a list even if variablelist.as.blocks is set to 1.
                &lt;/para&gt;
          &lt;/listitem&gt;
        &lt;/varlistentry&gt;
  &lt;/variablelist&gt;</programlisting>


</refsection>

</refentry>

<refentry version="5.0" id="blockquote.properties">
<refmeta>
  <refentrytitle>blockquote.properties</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>blockquote.properties</refname>
<refpurpose>To set the style for block quotations.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="blockquote.properties.frag">
&lt;xsl:attribute-set name="blockquote.properties"&gt;
&lt;xsl:attribute name="margin-{$direction.align.start}"&gt;0.5in&lt;/xsl:attribute&gt;
&lt;xsl:attribute name="margin-{$direction.align.end}"&gt;0.5in&lt;/xsl:attribute&gt;
&lt;xsl:attribute name="space-after.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
&lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
&lt;xsl:attribute name="space-after.maximum"&gt;2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>blockquote.properties</parameter> attribute set specifies
the formating properties of block quotations.</para>

</refsection>
</refentry>

<refentry version="5.0" id="ulink.show">
<refmeta>
<refentrytitle>ulink.show</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.show</refname>
<refpurpose>Display URLs after <tag>ulink</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ulink.show.frag">
&lt;xsl:param name="ulink.show" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the URL of each <tag>ulink</tag> will
appear after the text of the link. If the text of the link and the URL
are identical, the URL is suppressed. </para>

<para>See also <parameter>ulink.footnotes</parameter>.</para>

<note><para>DocBook 5 does not have an <tag>ulink</tag> element. When processing 
DocBoook 5 documents, <parameter>ulink.show</parameter> applies to all inline 
elements that are marked up with <tag class="attribute">xlink:href</tag> attributes 
that point to external resources.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="ulink.footnotes">
<refmeta>
<refentrytitle>ulink.footnotes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.footnotes</refname>
<refpurpose>Generate footnotes for <tag>ulink</tag>s?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ulink.footnotes.frag">
&lt;xsl:param name="ulink.footnotes" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, and if <parameter>ulink.show</parameter> also is non-zero,
the URL of each <tag>ulink</tag> will appear as a footnote.</para>

<note><para>DocBook 5 does not have an <tag>ulink</tag> element. When processing 
DocBoook 5 documents, <parameter>ulink.footnotes</parameter> applies to all inline 
elements that are marked up with <tag class="attribute">xlink:href</tag> attributes 
that point to external resources.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="ulink.hyphenate">
<refmeta>
<refentrytitle>ulink.hyphenate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.hyphenate</refname>
<refpurpose>Allow URLs to be automatically hyphenated</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ulink.hyphenate.frag">
&lt;xsl:param name="ulink.hyphenate"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If not empty, the specified character (or more generally,
content) is added to URLs after every character included in the string
in the <parameter>ulink.hyphenate.chars</parameter> parameter (default
is <quote>/</quote>) to enable hyphenation of ulinks. If the character
in this parameter is a Unicode soft hyphen (0x00AD) or Unicode
zero-width space (0x200B), some FO processors will be able to
reasonably hyphenate long URLs.</para>

<para>Note that this hyphenation process is only applied when the
ulink element is empty and the url attribute is reused as the link
text.  It is not applied if the ulink has literal text content. The
same applies in in DocBook 5, where ulink was replaced with link with
an xlink:href attribute.</para>

</refsection>
</refentry>

<refentry version="5.0" id="ulink.hyphenate.chars">
<refmeta>
<refentrytitle>ulink.hyphenate.chars</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.hyphenate.chars</refname>
<refpurpose>List of characters to allow ulink URLs to be automatically
hyphenated on</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ulink.hyphenate.chars.frag">
&lt;xsl:param name="ulink.hyphenate.chars"&gt;/&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the <parameter>ulink.hyphenate</parameter> parameter is not
empty, then hyphenation of ulinks is turned on, and any character
contained in this parameter is treated as an allowable hyphenation
point. This and <parameter>ulink.hyphenate</parameter> work together,
one is pointless without the other being set to a non-empty value</para>

<para>The default value is <quote>/</quote>, but the parameter could
be customized to contain other URL characters, as for example:</para>
<programlisting>
&lt;xsl:param name="ulink.hyphenate.chars"&gt;:/@&amp;?.#&lt;/xsl:param&gt;
</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="shade.verbatim">
<refmeta>
<refentrytitle>shade.verbatim</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>shade.verbatim</refname>
<refpurpose>Should verbatim environments be shaded?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="shade.verbatim.frag">&lt;xsl:param name="shade.verbatim" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In the FO stylesheet, if this parameter is non-zero then the
<property>shade.verbatim.style</property> properties will be applied
to verbatim environments.</para>

<para>In the HTML stylesheet, this parameter is now deprecated. Use
CSS instead.</para>

</refsection>
</refentry>

<refentry version="5.0" id="shade.verbatim.style">
<refmeta>
<refentrytitle>shade.verbatim.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>shade.verbatim.style</refname>
<refpurpose>Properties that specify the style of shaded verbatim listings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="shade.verbatim.style.frag">

&lt;xsl:attribute-set name="shade.verbatim.style"&gt;
  &lt;xsl:attribute name="background-color"&gt;#E0E0E0&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties that specify the style of shaded verbatim listings. The
parameters specified (the border and background color) are added to
the styling of the xsl-fo output. A border might be specified as "thin
black solid" for example. See <link xlink:href="http://www.w3.org/TR/2004/WD-xsl11-20041216/#border">xsl-fo</link></para>

</refsection>
</refentry>

<refentry version="5.0" id="hyphenate.verbatim">
<refmeta>
<refentrytitle>hyphenate.verbatim</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>hyphenate.verbatim</refname>
<refpurpose>Should verbatim environments be hyphenated on space characters?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="hyphenate.verbatim.frag">&lt;xsl:param name="hyphenate.verbatim" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the lines of program listing are too long to fit into one
line it is quite common to split them at space and indicite by hook
arrow that code continues on the next line. You can turn on this
behaviour for <tag>programlisting</tag>,
<tag>screen</tag> and <tag>synopsis</tag> elements by
using this parameter.</para>

<para>Note that you must also enable line wrapping for verbatim environments and
select appropriate hyphenation character (e.g. hook arrow). This can
be done using <parameter>monospace.verbatim.properties</parameter>
attribute set:</para>

<programlisting>&lt;xsl:attribute-set name="monospace.verbatim.properties" 
                   use-attribute-sets="verbatim.properties monospace.properties"&gt;
  &lt;xsl:attribute name="wrap-option"&gt;wrap&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenation-character"&gt;&amp;#x25BA;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>

<para>For a list of arrows available in Unicode see <uri xlink:href="http://www.unicode.org/charts/PDF/U2190.pdf">http://www.unicode.org/charts/PDF/U2190.pdf</uri> and <uri xlink:href="http://www.unicode.org/charts/PDF/U2900.pdf">http://www.unicode.org/charts/PDF/U2900.pdf</uri> and make sure that
selected character is available in the font you are using for verbatim
environments.</para>

</refsection>
</refentry>

<refentry version="5.0" id="hyphenate.verbatim.characters">
<refmeta>
<refentrytitle>hyphenate.verbatim.characters</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>hyphenate.verbatim.characters</refname>
<refpurpose>List of characters after which a line break can occur in listings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="hyphenate.verbatim.characters.frag">
&lt;xsl:param name="hyphenate.verbatim.characters"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If you enable <parameter>hyphenate.verbatim</parameter> line
breaks are allowed only on space characters. If this is not enough for
your document, you can specify list of additional characters after
which line break is allowed in this parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.svg">
<refmeta>
<refentrytitle>use.svg</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.svg</refname>
<refpurpose>Allow SVG in the result tree?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.svg.frag">
&lt;xsl:param name="use.svg" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, SVG will be considered an acceptable image format. SVG
is passed through to the result tree, so correct rendering of the resulting
diagram depends on the formatter (FO processor or web browser) that is used
to process the output from the stylesheet.</para>

</refsection>
</refentry>

<refentry version="5.0" id="use.role.as.xrefstyle">
<refmeta>
<refentrytitle>use.role.as.xrefstyle</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.as.xrefstyle</refname>
<refpurpose>Use <tag class="attribute">role</tag> attribute for
<tag class="attribute">xrefstyle</tag> on <tag>xref</tag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.role.as.xrefstyle.frag">
&lt;xsl:param name="use.role.as.xrefstyle" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In DocBook documents that conform to a schema older than V4.3, this parameter allows 
<tag class="attribute">role</tag> to serve the purpose of specifying the cross reference style.</para>

<para>If non-zero, the <tag class="attribute">role</tag> attribute on
<tag>xref</tag> will be used to select the cross reference style.
In DocBook V4.3, the <tag class="attribute">xrefstyle</tag> attribute was added for this purpose.
If the <tag class="attribute">xrefstyle</tag> attribute is present, 
<tag class="attribute">role</tag> will be ignored, regardless of the setting
of this parameter.</para>

</refsection>

<refsection><info><title>Example</title></info>

<para>The following small stylesheet shows how to configure the
stylesheets to make use of the cross reference style:</para>

<programlisting>&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"&gt;

&lt;xsl:import href="../xsl/html/docbook.xsl"/&gt;

&lt;xsl:output method="html"/&gt;

&lt;xsl:param name="local.l10n.xml" select="document('')"/&gt;
&lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"&gt;
  &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"&gt;
   &lt;l:context name="xref"&gt;
      &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/&gt;
      &lt;l:template name="chapter" text="Chapter %n"/&gt;
    &lt;/l:context&gt;
  &lt;/l:l10n&gt;
&lt;/l:i18n&gt;

&lt;/xsl:stylesheet&gt;</programlisting>

<para>With this stylesheet, the cross references in the following document:</para>

<programlisting>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"&gt;
&lt;book id="book"&gt;&lt;title&gt;Book&lt;/title&gt;

&lt;preface&gt;
&lt;title&gt;Preface&lt;/title&gt;

&lt;para&gt;Normal: &lt;xref linkend="ch1"/&gt;.&lt;/para&gt;
&lt;para&gt;Title: &lt;xref xrefstyle="title" linkend="ch1"/&gt;.&lt;/para&gt;

&lt;/preface&gt;

&lt;chapter id="ch1"&gt;
&lt;title&gt;First Chapter&lt;/title&gt;

&lt;para&gt;Irrelevant.&lt;/para&gt;

&lt;/chapter&gt;
&lt;/book&gt;</programlisting>

<para>will appear as:</para>

<informalexample>
<para>Normal: Chapter 1.</para>
<para>Title: Chapter 1, <emphasis>First Chapter</emphasis>.</para>
</informalexample>
</refsection>

</refentry>

<refentry version="5.0" id="menuchoice.separator">
<refmeta>
<refentrytitle>menuchoice.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>menuchoice.separator</refname>
<refpurpose>Separator between items of a <tag>menuchoice</tag>
other than <tag>guimenuitem</tag> and
<tag>guisubmenu</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="menuchoice.separator.frag">
&lt;xsl:param name="menuchoice.separator"&gt;+&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator used to connect items of a <tag>menuchoice</tag> other
than <tag>guimenuitem</tag> and <tag>guisubmenu</tag>. The latter
elements are linked with <parameter>menuchoice.menu.separator</parameter>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="menuchoice.menu.separator">
<refmeta>
<refentrytitle>menuchoice.menu.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>menuchoice.menu.separator</refname>
<refpurpose>Separator between items of a <tag>menuchoice</tag>
with <tag>guimenuitem</tag> or
<tag>guisubmenu</tag></refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="menuchoice.menu.separator.frag">
&lt;xsl:param name="menuchoice.menu.separator"&gt; &#8594; &lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator used to connect items of a <tag>menuchoice</tag> with
<tag>guimenuitem</tag> or <tag>guisubmenu</tag>. Other elements
are linked with <parameter>menuchoice.separator</parameter>.
</para>
<para>The default value is &amp;#x2192;, which is the
&amp;rarr; (right arrow) character entity.  
The current FOP (0.20.5) requires setting the font-family
explicitly.
</para>
<para>The default value also includes spaces around the arrow,
which will allow a line to break.  Replace the spaces with
&amp;#xA0; (nonbreaking space) if you don't want those
spaces to break.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.float.class">
<refmeta>
<refentrytitle>default.float.class</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.float.class</refname>
<refpurpose>Specifies the default float class</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.float.class.frag">
&lt;xsl:param name="default.float.class"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($stylesheet.result.type,'html')"&gt;left&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;before&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the direction in which a float should be placed. for
xsl-fo this is before, for html it is left. For Western texts, the
before direction is the top of the page.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.number.format">
<refmeta>
<refentrytitle>footnote.number.format</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.number.format.frag">
&lt;xsl:param name="footnote.number.format"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A).</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.footnote.number.format">
<refmeta>
<refentrytitle>table.footnote.number.format</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">1<alt>1,2,3...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A<alt>A,B,C...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">a<alt>a,b,c...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">i<alt>i,ii,iii...</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">I<alt>I,II,III...</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers in tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.footnote.number.format.frag">
&lt;xsl:param name="table.footnote.number.format"&gt;a&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>table.footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A) in tables.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.number.symbols">
<refmeta>
<refentrytitle>footnote.number.symbols</refentrytitle>
<refmiscinfo class="other" otherclass="datatype"/>
</refmeta>
<refnamediv>
<refname>footnote.number.symbols</refname>
<refpurpose>Special characters to use as footnote markers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.number.symbols.frag">
&lt;xsl:param name="footnote.number.symbols"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>footnote.number.symbols</parameter> is not the empty string,
footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>&#8224;</quote>, <quote>&#8225;</quote>,
<quote>&#9674;</quote>, and <quote>&#10016;</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter>footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.footnote.number.symbols">
<refmeta>
<refentrytitle>table.footnote.number.symbols</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.number.symbols</refname>
<refpurpose>Special characters to use a footnote markers in tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.footnote.number.symbols.frag">
&lt;xsl:param name="table.footnote.number.symbols"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If <parameter>table.footnote.number.symbols</parameter> is not the empty string,
table footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>&#8224;</quote>, <quote>&#8225;</quote>,
<quote>&#9674;</quote>, and <quote>&#10016;</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter>table.footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.properties">
<refmeta>
<refentrytitle>footnote.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>footnote.properties</refname>
<refpurpose>Properties applied to each footnote body
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.properties.frag">
&lt;xsl:attribute-set name="footnote.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;&lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;&lt;xsl:value-of select="$footnote.font.size"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;normal&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-style"&gt;normal&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;&lt;xsl:value-of select="$alignment"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="start-indent"&gt;0pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="end-indent"&gt;0pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-indent"&gt;0pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;&lt;xsl:value-of select="$hyphenate"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="wrap-option"&gt;wrap&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="linefeed-treatment"&gt;treat-as-space&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to the footnote-block 
for each footnote.
It can be used to set the
font-size, font-family, and other inheritable properties that will be
applied to all footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="table.footnote.properties">
<refmeta>
<refentrytitle>table.footnote.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.properties</refname>
<refpurpose>Properties applied to each table footnote body
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.footnote.properties.frag">
&lt;xsl:attribute-set name="table.footnote.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;&lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;&lt;xsl:value-of select="$footnote.font.size"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;normal&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-style"&gt;normal&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before"&gt;2pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;&lt;xsl:value-of select="$alignment"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to the footnote-block 
for each table footnote.
It can be used to set the
font-size, font-family, and other inheritable properties that will be
applied to all table footnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.mark.properties">
<refmeta>
<refentrytitle>footnote.mark.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>footnote.mark.properties</refname>
<refpurpose>Properties applied to each footnote mark
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.mark.properties.frag">
&lt;xsl:attribute-set name="footnote.mark.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;&lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;75%&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;normal&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-style"&gt;normal&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to the footnote mark used
for each footnote.
It should contain only inline properties.
</para>

<para>The property to make the mark a superscript is contained in the
footnote template itself, because the current version of FOP reports
an error if baseline-shift is used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.sep.leader.properties">
<refmeta>
<refentrytitle>footnote.sep.leader.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footnote.sep.leader.properties</refname>
<refpurpose>Properties associated with footnote separators</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.sep.leader.properties.frag">
&lt;xsl:attribute-set name="footnote.sep.leader.properties"&gt;
  &lt;xsl:attribute name="color"&gt;black&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="leader-pattern"&gt;rule&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="leader-length"&gt;1in&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for the rule line that separates the
footnotes from the body text.
These are properties applied to the fo:leader used as
the separator.
</para>
<para>If you want to do more than just set properties on
the leader element, then you can customize the template
named <literal>footnote.separator</literal> in 
<filename>fo/pagesetup.xsl</filename>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="xref.with.number.and.title">
<refmeta>
<refentrytitle>xref.with.number.and.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.with.number.and.title</refname>
<refpurpose>Use number and title in cross references</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="xref.with.number.and.title.frag">
&lt;xsl:param name="xref.with.number.and.title" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A cross reference may include the number (for example, the number of
an example or figure) and the <tag>title</tag> which is a required child of some
targets. This parameter inserts both the relevant number as well as
the title into the link. </para>

</refsection>
</refentry>

<refentry version="5.0" id="superscript.properties">
<refmeta>
<refentrytitle>superscript.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>superscript.properties</refname>
<refpurpose>Properties associated with superscripts</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="superscript.properties.frag">
&lt;xsl:attribute-set name="superscript.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;75%&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies styling properties for superscripts.</para>

</refsection>
</refentry>

<refentry version="5.0" id="subscript.properties">
<refmeta>
<refentrytitle>subscript.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>subscript.properties</refname>
<refpurpose>Properties associated with subscripts</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="subscript.properties.frag">
&lt;xsl:attribute-set name="subscript.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;75%&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies styling properties for subscripts.</para>

</refsection>
</refentry>

<refentry version="5.0" id="pgwide.properties">
<refmeta>
<refentrytitle>pgwide.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>pgwide.properties</refname>
<refpurpose>Properties to make a figure or table page wide.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="pgwide.properties.frag">
&lt;xsl:attribute-set name="pgwide.properties"&gt;
  &lt;xsl:attribute name="start-indent"&gt;0pt&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is used to set the properties
that make a figure or table "page wide" in fo output.
It comes into effect when an attribute <literal>pgwide="1"</literal>
is used.
</para>

<para>
By default, it sets <parameter>start-indent</parameter>
to <literal>0pt</literal>.
In a stylesheet that sets the parameter
<parameter>body.start.indent</parameter>
to a non-zero value in order to indent body text,
this attribute set can be used to outdent pgwide
figures to the start margin.
</para>

<para>If a document uses a multi-column page layout,
then this attribute set could try setting <parameter>span</parameter>
to a value of <literal>all</literal>.  However, this may
not work with some processors because a span property must be on an
fo:block that is a direct child of fo:flow.  It may work in
some processors anyway.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="highlight.source">
<refmeta>
<refentrytitle>highlight.source</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.source</refname>
<refpurpose>Should the content of <tag>programlisting</tag>
be syntactically highlighted?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.source.frag">
&lt;xsl:param name="highlight.source" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When this parameter is non-zero, the stylesheets will try to do syntax highlighting of the 
content of <tag>programlisting</tag> elements. You specify the language for each programlisting 
by using the <tag class="attribute">language</tag> attribute. The <parameter>highlight.default.language</parameter> 
parameter can be used to specify the language for programlistings without a <tag class="attribute">language</tag> 
attribute. Syntax highlighting also works for <tag>screen</tag> and <tag>synopsis</tag> elements.</para>

<para>The actual highlighting work is done by the XSLTHL extension module. This is an external Java library that has to be 
downloaded separately (see below).</para>

<itemizedlist>
<para>In order to use this extension, you must</para> 

<listitem><para>add <filename>xslthl-2.x.x.jar</filename> to your Java classpath. The latest version is available
from <link xlink:href="http://sourceforge.net/projects/xslthl">the XSLT syntax highlighting project</link> 
at SourceForge.</para>
</listitem>
<listitem>
<para>use a customization layer in which you import one of the following stylesheet modules: 
<itemizedlist>
  <listitem>
    <para><filename>html/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>xhtml/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>xhtml-1_1/highlight.xsl</filename>
    </para>
  </listitem>
<listitem>
    <para><filename>fo/highlight.xsl</filename>
    </para>
</listitem>
</itemizedlist>
</para>
</listitem>
<listitem><para>let either the <literal>xslthl.config</literal> Java system property or the
<parameter>highlight.xslthl.config</parameter> parameter point to the configuration file for syntax 
highlighting (using URL syntax). DocBook XSL comes with a ready-to-use configuration file, 
<filename>highlighting/xslthl-config.xml</filename>.</para>
</listitem>
</itemizedlist>

<para>The extension works with Saxon 6.5.x and Xalan-J. (Saxon 8.5 or later is also supported, but since it is 
an XSLT 2.0 processor it is not guaranteed to work with DocBook XSL in all circumstances.)</para>

<para>The following is an example of a Saxon 6 command adapted for syntax highlighting, to be used on Windows:</para>

<informalexample>
<para><command>java -cp c:/Java/saxon.jar;c:/Java/xslthl-2.0.1.jar 
-Dxslthl.config=file:///c:/docbook-xsl/highlighting/xslthl-config.xml com.icl.saxon.StyleSheet 
-o test.html test.xml myhtml.xsl</command></para>
</informalexample>

</refsection>
</refentry>

<refentry version="5.0" id="highlight.xslthl.config">
<refmeta>
<refentrytitle>highlight.xslthl.config</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.xslthl.config</refname>
<refpurpose>Location of XSLTHL configuration file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.xslthl.config.frag">
&lt;xsl:param name="highlight.xslthl.config"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This location has precedence over the corresponding Java property.</para>

<para>Please note that usually you have to specify location as URL not
just as a simple path on the local
filesystem. E.g. <filename>file:///home/user/xslthl/my-xslthl-config.xml</filename>.</para>



</refsection>
</refentry>

<refentry version="5.0" id="highlight.default.language">
<refmeta>
<refentrytitle>highlight.default.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>highlight.default.language</refname>
<refpurpose>Default language of programlisting</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="highlight.default.language.frag">
&lt;xsl:param name="highlight.default.language"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This language is used when there is no language attribute on programlisting.</para>

</refsection>
</refentry>

<refentry version="5.0" id="email.delimiters.enabled">
<refmeta>
<refentrytitle>email.delimiters.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>email.delimiters.enabled</refname>
<refpurpose>Generate delimiters around email addresses?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="email.delimiters.enabled.frag">
&lt;xsl:param name="email.delimiters.enabled" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, delimiters

<footnote><para>For delimiters, the
stylesheets are currently hard-coded to output angle
brackets.</para></footnote> 

are generated around e-mail addresses
(the output of the <tag>email</tag> element).</para>

</refsection>
</refentry>

<refentry version="5.0" id="email.mailto.enabled">
<refmeta>
<refentrytitle>email.mailto.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>email.mailto.enabled</refname>
<refpurpose>Generate mailto: links for email addresses?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="email.mailto.enabled.frag">
&lt;xsl:param name="email.mailto.enabled" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero the generated output for the <tag>email</tag> element
will be a clickable mailto: link that brings up the default mail client
on the system.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.container.element">
<refmeta>
<refentrytitle>section.container.element</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">block</refmiscinfo>
<refmiscinfo class="other" otherclass="value">wrapper</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.container.element</refname>
<refpurpose>Select XSL-FO element name to contain sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.container.element.frag">
&lt;xsl:param name="section.container.element"&gt;block&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the element name for outer container of
each section. The choices are <literal>block</literal> (default)
or <literal>wrapper</literal>.
The <literal>fo:</literal> namespace prefix is added
by the stylesheet to form the full element name.
</para>

<para>This element receives the section <literal>id</literal>
attribute and the appropriate section level attribute-set.
</para>

<para>Changing this parameter to <literal>wrapper</literal>
is only necessary when producing multi-column output
that contains page-wide spans.  Using <literal>fo:wrapper</literal>
avoids the nesting of <literal>fo:block</literal>
elements that prevents spans from working (the standard says
a span must be on a block that is a direct child of 
<literal>fo:flow</literal>).
</para>

<para>If set to <literal>wrapper</literal>, the
section attribute-sets only support properties
that are inheritable.  That's because there is no
block to apply them to.  Properties such as
font-family are inheritable, but properties such as
border are not.
</para>

<para>Only some XSL-FO processors need to use this parameter.
The Antenna House processor, for example, will handle 
spans in nested blocks without changing the element name.
The RenderX XEP product and FOP follow the XSL-FO standard 
and need to use <literal>wrapper</literal>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="monospace.verbatim.font.width">
<refmeta>
<refentrytitle>monospace.verbatim.font.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>monospace.verbatim.font.width</refname>
<refpurpose>Width of a single monospace font character</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="monospace.verbatim.font.width.frag">
&lt;xsl:param name="monospace.verbatim.font.width"&gt;0.60em&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies with em units the width of a single character
of the monospace font. The default value is <literal>0.6em</literal>.</para>

<para>This parameter is only used when a <tag>screen</tag>
or <tag>programlisting</tag> element has a 
<tag class="attribute">width</tag> attribute, which is
expressed as a plain integer to indicate the maximum character count
of each line.
To convert this character count to an actual maximum width
measurement, the width of the font characters must be provided.
Different monospace fonts have different character width,
so this parameter should be adjusted to fit the 
monospace font being used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="exsl.node.set.available">
<refmeta>
<refentrytitle>exsl.node.set.available</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>exsl.node.set.available</refname>
<refpurpose>Is the test function-available('exsl:node-set') true?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="exsl.node.set.available.frag">&lt;xsl:param name="exsl.node.set.available"&gt; 
  &lt;xsl:choose&gt;
    &lt;xsl:when exsl:foo="" test="function-available('exsl:node-set') or                        contains(system-property('xsl:vendor'),                          'Apache Software Foundation')"&gt;1&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;0&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero,
then the exsl:node-set() function is available to be used in
the stylesheet.
If zero, then the function is not available.
This param automatically detects the presence of
the function and does not normally need to be set manually.</para>

<para>This param was created to handle a long-standing
bug in the Xalan processor that fails to detect the
function even though it is available.</para>

</refsection>
</refentry>

<refentry version="5.0" id="bookmarks.collapse">
<refmeta>
<refentrytitle>bookmarks.collapse</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo> 
</refmeta>
<refnamediv>
<refname>bookmarks.collapse</refname>
<refpurpose>Specifies the initial state of bookmarks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="bookmarks.collapse.frag">
&lt;xsl:param name="bookmarks.collapse" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the bookmark tree is collapsed so that only the 
top-level bookmarks are displayed initially. Otherwise, the whole tree 
of bookmarks is displayed.</para>

<para>This parameter currently works with FOP 0.93 or later.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.consistent.ids">
<refmeta>
<refentrytitle>generate.consistent.ids</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.consistent.ids</refname>
<refpurpose>Generate consistent id values if document is unchanged</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="generate.consistent.ids.frag">
&lt;xsl:param name="generate.consistent.ids" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When the stylesheet assigns an id value to an output element,
the generate-id() function may be used.  That function may not
produce consistent values between runs.  Version control
systems may misidentify the changing id values as changes
to the document.</para>

<para>If you set this parameter's value to 1, then the
template named <literal>object.id</literal> will replace
the use of the function generate-id() with
<literal>&lt;xsl:number level="multiple" count="*"/&gt;</literal>.
This counts preceding elements to generate a unique number for
the id value.</para>

<caution>
<para>This param does not associate permanent unique id values
with particular elements.
The id values are consistent only as long as the document
structure does not change.
If the document structure changes, then the counting
of elements changes, and all id values after
the first such change may be different, even when there is
no change to the element itself or its output.
</para>
</caution>

<para>The default value of this parameter is zero, so generate-id() is used
by default.</para>

</refsection>
</refentry>

<refentry version="5.0" id="base.dir">
<refmeta>
<refentrytitle>base.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>base.dir</refname>
<refpurpose>The base directory of chunks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="base.dir.frag">
&lt;xsl:param name="base.dir"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If specified, the <parameter>base.dir</parameter> parameter identifies
the output directory for chunks. (If not specified, the output directory
is system dependent.)</para>

<para>Starting with version 1.77 of the stylesheets, 
the param's value will have a trailing slash added if it does
not already have one.</para>

<caution><para>Do not use <parameter>base.dir</parameter>
to add a filename prefix string to chunked  files. 
Instead, use the <parameter>chunked.filename.prefix</parameter>
parameter.</para></caution>

</refsection>
</refentry>

<refentry version="5.0" id="chunk.quietly">
<refmeta>
<refentrytitle>chunk.quietly</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.quietly</refname>
<refpurpose>Omit the chunked filename messages.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="chunk.quietly.frag">
&lt;xsl:param name="chunk.quietly" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), the XSL processor emits a message naming
each separate chunk filename as it is being output.
If nonzero, then the messages are suppressed.
</para>

</refsection>
</refentry>

</reference><reference id="graphics" xml:base="../fo/param.xml"><title>Graphics</title>
<refentry version="5.0" id="graphic.default.extension">
<refmeta>
<refentrytitle>graphic.default.extension</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphic.default.extension</refname>
<refpurpose>Default extension for graphic filenames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="graphic.default.extension.frag">&lt;xsl:param name="graphic.default.extension"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If a <tag>graphic</tag> or <tag>mediaobject</tag>
includes a reference to a filename that does not include an extension,
and the <tag class="attribute">format</tag> attribute is
<emphasis>unspecified</emphasis>, the default extension will be used.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="default.image.width">
<refmeta>
<refentrytitle>default.image.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.image.width</refname>
<refpurpose>The default width of images</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.image.width.frag">
&lt;xsl:param name="default.image.width"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If specified, this value will be used for the
<tag class="attribute">width</tag> attribute on images that do not specify any 
<emphasis xlink:title="DocBook 5: The Definitive Guide" xlink:href="http://docbook.org/tdg5/en/html/imagedata.html#viewport.area">viewport dimensions</emphasis>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="preferred.mediaobject.role">
<refmeta>
<refentrytitle>preferred.mediaobject.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>preferred.mediaobject.role</refname>
<refpurpose>Select which mediaobject to use based on
this value of an object's <tag class="attribute">role</tag> attribute.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="preferred.mediaobject.role.frag">
&lt;xsl:param name="preferred.mediaobject.role"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A mediaobject may contain several objects such as imageobjects.
If the parameter <parameter>use.role.for.mediaobject</parameter> is
non-zero, then the <literal>role</literal> attribute on
<tag>imageobject</tag>s and other objects within a
<tag>mediaobject</tag> container will be used to select which object
will be used.  If one of the objects has a role value that matches the
<parameter>preferred.mediaobject.role</parameter> parameter, then it
has first priority for selection.  If more than one has such a role
value, the first one is used.
</para>
<para>
See the <parameter>use.role.for.mediaobject</parameter> parameter
for the sequence of selection.</para>
</refsection>
</refentry>

<refentry version="5.0" id="use.role.for.mediaobject">
<refmeta>
<refentrytitle>use.role.for.mediaobject</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.for.mediaobject</refname>
<refpurpose>Use <tag class="attribute">role</tag> attribute 
value for selecting which of several objects within a mediaobject to use.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="use.role.for.mediaobject.frag">
&lt;xsl:param name="use.role.for.mediaobject" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the <tag class="attribute">role</tag> attribute on
<tag>imageobject</tag>s or other objects within a <tag>mediaobject</tag> container will be used to select which object will be
used.
</para>
<para>
The order of selection when then parameter is non-zero is:
</para>
<orderedlist>
<listitem>
    <para>If the stylesheet parameter <parameter>preferred.mediaobject.role</parameter> has a value, then the object whose role equals that value is selected.</para>
</listitem>
<listitem>
<para>Else if an object's role attribute has a value of
<literal>html</literal> for HTML processing or
<literal>fo</literal> for FO output, then the first
of such objects is selected.
</para>
</listitem>
<listitem>
<para>Else the first suitable object is selected.</para>
</listitem>
</orderedlist>
<para>
If the value of 
<parameter>use.role.for.mediaobject</parameter>
is zero, then role attributes are not considered
and the first suitable object
with or without a role value is used.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="ignore.image.scaling">
<refmeta>
<refentrytitle>ignore.image.scaling</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ignore.image.scaling</refname>
<refpurpose>Tell the stylesheets to ignore the author's image scaling attributes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ignore.image.scaling.frag">
&lt;xsl:param name="ignore.image.scaling" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the scaling attributes on graphics and media objects are
ignored.</para>

</refsection>
</refentry>

<refentry version="5.0" id="img.src.path">
<refmeta>
<refentrytitle>img.src.path</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>img.src.path</refname>
<refpurpose>Path to HTML/FO image files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="img.src.path.frag">&lt;xsl:param name="img.src.path"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Add a path prefix to the value of the <tag class="attribute">fileref</tag> 
attribute of <tag>graphic</tag>, <tag>inlinegraphic</tag>, and <tag>imagedata</tag> elements. The resulting 
compound path is used in the output as the value of the <tag class="attribute">src</tag> 
attribute of <tag class="element">img</tag> (HTML) or <tag class="element">external-graphic</tag> (FO).
</para>

<para>
The path given by <literal>img.src.path</literal> could be relative to the directory where the HTML/FO
files are created, or it could be an absolute URI.
The default value is empty.
Be sure to include a trailing slash if needed.
</para>

<para>This prefix is not applied to any filerefs that start
with "/" or contain "//:".
</para>

</refsection>
</refentry>

<refentry version="5.0" id="keep.relative.image.uris">
<refmeta>
<refentrytitle>keep.relative.image.uris</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keep.relative.image.uris</refname>
<refpurpose>Should image URIs be resolved against xml:base?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="keep.relative.image.uris.frag">

&lt;xsl:param name="keep.relative.image.uris" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, relative URIs (in, for example
<literal>fileref</literal> attributes) will be used in the generated
output. Otherwise, the URIs will be made absolute with respect to the
base URI.</para>

<para>Note that the stylesheets calculate (and use) the absolute form
for some purposes, this only applies to the resulting output.</para>

</refsection>
</refentry>

</reference><reference id="general" xml:base="../fo/param.xml"><title>Pagination and General Styles</title>
<partintro id="margins_partintro">
<section id="margins_intro"><title>Understanding XSL FO Margins</title>

<para>To make sense of the parameters in this section, it's useful to
consider <xref linkend="fig.pagemodel"/>.</para>

<figure id="fig.pagemodel">
  <title>Page Model</title>
  <mediaobject id="fo-pageregions-image">
    <imageobject role="html">
      <imagedata fileref="page.png"/>
    </imageobject>
    <imageobject role="fo">
      <imagedata fileref="fo/page.png"/>
    </imageobject>
    <textobject><phrase>Figure showing page margins</phrase></textobject>
    <textobject>
      <para>This figure shows the physical page with the various FO page regions
      identified.</para>
    </textobject>
  </mediaobject>
</figure>

<para>First, let's consider the regions on the page.</para>

<para>The white region is the physical page. Its dimensions are determined by
the <parameter>page.height</parameter> and <parameter>page.width</parameter>
parameters.</para>

<para>The yellow region is the region-body. The size and placement of
the region body is constrained by the dimensions labelled in the
figure.</para>

<para>The pink region at the top of the page is the region-before. The
darker area inside the region-before is the header text. In XSL, the default
display alignment for a region is <literal>before</literal>, but the
DocBook stylesheets still explicitly make it <literal>before</literal>. That's
why the darker area is at the top.</para>

<para>The pink region at the bottom of the page is the region-after.
The darker area is the footer text. In XSL, the default display
alignment for a region is <literal>before</literal>,
but the DocBook stylesheets explicitly make it
<literal>after</literal>. That's why the darker area is at the bottom.</para>

<para>The dimensions in the figure are:</para>

<orderedlist numeration="upperalpha">
<listitem><para>The page-master margin-top.
</para></listitem>
<listitem><para>The region-before extent.
</para></listitem>
<listitem><para>The region-body margin-top.
</para></listitem>
<listitem><para>The region-after extent.
</para></listitem>
<listitem><para>The page-master margin-bottom.
</para></listitem>
<listitem><para>The region-body margin-bottom.
</para></listitem>
<listitem><para>The sum of the page-master margin-left and the
region-body margin-left. In DocBook, the region-body margin-left is
zero by default, so this is simply the page-master margin-left.
</para></listitem>
<listitem><para>The sum of the page-master margin-right and the
region-body margin-right. In DocBook, the region-body margin-right is
zero by default, so this is simply the page-master margin-right.
</para></listitem>
</orderedlist>

</section>
</partintro>

<refentry version="5.0" id="page.height">
<refmeta>
<refentrytitle>page.height</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.height</refname>
<refpurpose>The height of the physical page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.height.frag">&lt;xsl:param name="page.height"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$page.orientation = 'portrait'"&gt;
      &lt;xsl:value-of select="$page.height.portrait"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$page.width.portrait"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The page height is generally calculated from the
<parameter>paper.type</parameter> and
<parameter>page.orientation</parameter> parameters.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.height.portrait">
<refmeta>
<refentrytitle>page.height.portrait</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.height.portrait</refname>
<refpurpose>Specify the physical size of the long edge of the page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.height.portrait.frag">&lt;xsl:param name="page.height.portrait"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$paper.type = 'A4landscape'"&gt;210mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USletter'"&gt;11in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlandscape'"&gt;8.5in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlegal'"&gt;14in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlegallandscape'"&gt;8.5in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = '4A0'"&gt;2378mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = '2A0'"&gt;1682mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A0'"&gt;1189mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A1'"&gt;841mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A2'"&gt;594mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A3'"&gt;420mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A4'"&gt;297mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A5'"&gt;210mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A6'"&gt;148mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A7'"&gt;105mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A8'"&gt;74mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A9'"&gt;52mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A10'"&gt;37mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B0'"&gt;1414mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B1'"&gt;1000mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B2'"&gt;707mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B3'"&gt;500mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B4'"&gt;353mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B5'"&gt;250mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B6'"&gt;176mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B7'"&gt;125mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B8'"&gt;88mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B9'"&gt;62mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B10'"&gt;44mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C0'"&gt;1297mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C1'"&gt;917mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C2'"&gt;648mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C3'"&gt;458mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C4'"&gt;324mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C5'"&gt;229mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C6'"&gt;162mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C7'"&gt;114mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C8'"&gt;81mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C9'"&gt;57mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C10'"&gt;40mm&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;11in&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The portrait page height is the length of the long
edge of the physical page.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.margin.bottom">
<refmeta>
<refentrytitle>page.margin.bottom</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.margin.bottom</refname>
<refpurpose>The bottom margin of the page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.margin.bottom.frag">
&lt;xsl:param name="page.margin.bottom"&gt;0.5in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The bottom page margin is the distance from the bottom of the region-after
to the physical bottom of the page.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.margin.inner">
<refmeta>
<refentrytitle>page.margin.inner</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.margin.inner</refname>
<refpurpose>The inner page margin</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.margin.inner.frag">&lt;xsl:param name="page.margin.inner"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$double.sided != 0"&gt;1.25in&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;1in&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The inner page margin is the distance from bound edge of the
page to the first column of text. </para>

<para>The inner page margin is the distance from bound edge of the
page to the outer edge of the first column of text.</para>

<para>In left-to-right text direction,
this is the left margin of recto (front side) pages.
For single-sided output, it is the left margin
of all pages.</para>

<para>In right-to-left text direction,
this is the right margin of recto pages.
For single-sided output, this is the
right margin of all pages.</para>

<note>
<para>Current versions (at least as of version 4.13)
of the XEP XSL-FO processor do not
correctly handle these margin settings for documents
with right-to-left text direction.
The workaround in that situation is to reverse
the values for <parameter>page.margin.inner</parameter>
and <parameter>page.margin.outer</parameter>, until
this bug is fixed by RenderX.  It does not affect documents
with left-to-right text direction.</para>
</note>

<para>See also <parameter>writing.mode</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.margin.outer">
<refmeta>
<refentrytitle>page.margin.outer</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.margin.outer</refname>
<refpurpose>The outer page margin</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.margin.outer.frag">&lt;xsl:param name="page.margin.outer"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$double.sided != 0"&gt;0.75in&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;1in&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The outer page margin is the distance from non-bound edge of the
page to the outer edge of the last column of text.</para>

<para>In left-to-right text direction,
this is the right margin of recto (front side) pages.
For single-sided output, it is the right margin
of all pages.</para>

<para>In right-to-left text direction,
this is the left margin of recto pages.
For single-sided output, this is the
left margin of all pages.</para>

<note>
<para>Current versions (at least as of version 4.13)
of the XEP XSL-FO processor do not
correctly handle these margin settings for documents
with right-to-left text direction.
The workaround in that situation is to reverse
the values for <parameter>page.margin.inner</parameter>
and <parameter>page.margin.outer</parameter>, until
this bug is fixed by RenderX.  It does not affect documents
with left-to-right text direction.</para>
</note>

<para>See also <parameter>writing.mode</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.margin.top">
<refmeta>
<refentrytitle>page.margin.top</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.margin.top</refname>
<refpurpose>The top margin of the page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.margin.top.frag">
&lt;xsl:param name="page.margin.top"&gt;0.5in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The top page margin is the distance from the physical top of the
page to the top of the region-before.</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.orientation">
<refmeta>
<refentrytitle>page.orientation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">portrait</refmiscinfo>
<refmiscinfo class="other" otherclass="value">landscape</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.orientation</refname>
<refpurpose>Select the page orientation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.orientation.frag">
&lt;xsl:param name="page.orientation"&gt;portrait&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para> Select one from portrait or landscape.
In portrait orientation, the short edge is horizontal; in
landscape orientation, it is vertical.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.width">
<refmeta>
<refentrytitle>page.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.width</refname>
<refpurpose>The width of the physical page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.width.frag">&lt;xsl:param name="page.width"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$page.orientation = 'portrait'"&gt;
      &lt;xsl:value-of select="$page.width.portrait"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$page.height.portrait"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The page width is generally calculated from the
<parameter>paper.type</parameter> and 
<parameter>page.orientation</parameter> parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="page.width.portrait">
<refmeta>
<refentrytitle>page.width.portrait</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>page.width.portrait</refname>
<refpurpose>Specify the physical size of the short edge of the page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="page.width.portrait.frag">&lt;xsl:param name="page.width.portrait"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$paper.type = 'USletter'"&gt;8.5in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlandscape'"&gt;11in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlegal'"&gt;8.5in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'USlegallandscape'"&gt;14in&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = '4A0'"&gt;1682mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = '2A0'"&gt;1189mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A0'"&gt;841mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A1'"&gt;594mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A2'"&gt;420mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A3'"&gt;297mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A4'"&gt;210mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A5'"&gt;148mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A6'"&gt;105mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A7'"&gt;74mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A8'"&gt;52mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A9'"&gt;37mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'A10'"&gt;26mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B0'"&gt;1000mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B1'"&gt;707mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B2'"&gt;500mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B3'"&gt;353mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B4'"&gt;250mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B5'"&gt;176mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B6'"&gt;125mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B7'"&gt;88mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B8'"&gt;62mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B9'"&gt;44mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'B10'"&gt;31mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C0'"&gt;917mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C1'"&gt;648mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C2'"&gt;458mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C3'"&gt;324mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C4'"&gt;229mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C5'"&gt;162mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C6'"&gt;114mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C7'"&gt;81mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C8'"&gt;57mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C9'"&gt;40mm&lt;/xsl:when&gt;
    &lt;xsl:when test="$paper.type = 'C10'"&gt;28mm&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;8.5in&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The portrait page width is the length of the short
edge of the physical page.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="paper.type">
<refmeta>
<refentrytitle>paper.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">USletter<alt>8.5x11in</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">USlandscape<alt>11x8.5in</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">USlegal<alt>8.5inx14in</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">USlegallandscape<alt>14inx8.5in</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">4A0<alt>2378x1682mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">2A0<alt>1682x1189mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A0<alt>1189x841mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A1<alt>841x594mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A2<alt>594x420mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A3<alt>420x297mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A4<alt>297x210mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A5<alt>210x148mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A6<alt>148x105mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A7<alt>105x74mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A8<alt>74x52mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A9<alt>52x37mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">A10<alt>37x26mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B0<alt>1414x1000mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B1<alt>1000x707mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B2<alt>707x500mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B3<alt>500x353mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B4<alt>353x250mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B5<alt>250x176mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B6<alt>176x125mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B7<alt>125x88mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B8<alt>88x62mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B9<alt>62x44mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">B10<alt>44x31mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C0<alt>1297x917mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C1<alt>917x648mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C2<alt>648x458mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C3<alt>458x324mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C4<alt>324x229mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C5<alt>229x162mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C6<alt>162x114mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C7<alt>114x81mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C8<alt>81x57mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C9<alt>57x40mm</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">C10<alt>40x28mm</alt></refmiscinfo>
</refmeta>
<refnamediv>
<refname>paper.type</refname>
<refpurpose>Select the paper type</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="paper.type.frag">
&lt;xsl:param name="paper.type"&gt;USletter&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The paper type is a convenient way to specify the paper size.
The list of known paper sizes includes USletter and most of the A,
B, and C sizes. See <parameter>page.width.portrait</parameter>, for example.


</para>

</refsection>
</refentry>

<refentry version="5.0" id="double.sided">
<refmeta>
<refentrytitle>double.sided</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>double.sided</refname>
<refpurpose>Is the document to be printed double sided?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="double.sided.frag">
&lt;xsl:param name="double.sided" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter is useful when printing a document
on both sides of the paper.</para>

<para>if set to non-zero, documents are formatted using different page-masters
for odd and even pages.  These can differ by using a slightly wider margin
on the binding edge of the page, and alternating left-right
positions of header or footer elements.
</para>

<para>If set to zero (the default), then only the 'odd' page masters
are used for both even and odd numbered pages.</para>

<para>See also <parameter>force.blank.pages</parameter>,
<parameter>page.margin.inner</parameter> and
<parameter>page.margin.outer</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="force.blank.pages">
<refmeta>
<refentrytitle>force.blank.pages</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>force.blank.pages</refname>
<refpurpose>Generate blank page to end on even page number</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="force.blank.pages.frag">
&lt;xsl:param name="force.blank.pages" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero (the default), then each page sequence will be forced to
end on an even-numbered page, by inserting a blank page
if necessary. This will force the next page sequence to start
on an odd-numbered page, which is a standard convention
for printed and bound books.</para>

<para>If zero, then such blank pages will not be inserted.
Chapters will start on the next available page,
regardless of whether it is an even or odd number.
This is useful when publishing online where blank
pages are not needed.
</para>

<para>This param is independent of the 
<parameter>double.sided</parameter> parameter, which
just triggers the use of even and odd page sequence 
masters that differ in their header and footer placement.
So you can combine the two params for alternating
headers/footers and no blank pages.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="body.margin.bottom">
<refmeta>
<refentrytitle>body.margin.bottom</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.margin.bottom</refname>
<refpurpose>The bottom margin of the body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.margin.bottom.frag">
&lt;xsl:param name="body.margin.bottom"&gt;0.5in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The body bottom margin is the distance from the last line of text
in the page body to the bottom of the region-after.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="body.margin.top">
<refmeta>
<refentrytitle>body.margin.top</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.margin.top</refname>
<refpurpose>To specify the size of the top margin of a page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.margin.top.frag">
&lt;xsl:param name="body.margin.top"&gt;0.5in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The body top margin is the distance from the top of the
region-before to the first line of text in the page body.</para>

</refsection>
</refentry>

<refentry version="5.0" id="body.margin.inner">
<refmeta>
<refentrytitle>body.margin.inner</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.margin.inner</refname>
<refpurpose>Specify the size of the inner margin of the body region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.margin.inner.frag">
&lt;xsl:param name="body.margin.inner"&gt;0in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The inner body margin is the extra inner side 
(binding side) margin taken from the body
region in addition to the inner page margin.
It makes room for a side region for text content whose width is 
specified by the <parameter>region.inner.extent</parameter>
parameter.</para>

<para>For double-sided output,
this side region 
is <literal>fo:region-start</literal> on a odd-numbered page,
and <literal>fo:region-end</literal> on an even-numbered page.</para>

<para>For single-sided output,
this side region
is <literal>fo:region-start</literal> for all pages.</para>

<para>This correspondence applies to all languages,
both left-to-right and right-to-left writing modes.</para>

<para>The default value is zero.</para>

<para>See also
<parameter>region.inner.extent</parameter>,
<parameter>region.outer.extent</parameter>,
<parameter>body.margin.outer</parameter>,
<parameter>side.region.precedence</parameter>.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="body.margin.outer">
<refmeta>
<refentrytitle>body.margin.outer</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.margin.outer</refname>
<refpurpose>Specify the size of the outer margin of the body region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.margin.outer.frag">
&lt;xsl:param name="body.margin.outer"&gt;0in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The outer body margin is the extra outer side 
(opposite the binding side) margin taken
from the body
region in addition to the outer page margin.
It makes room for a side region for text content whose width is 
specified by the <parameter>region.outer.extent</parameter>
parameter.</para>

<para>For double-sided output,
this side region 
is <literal>fo:region-end</literal> on a odd-numbered page,
and <literal>fo:region-start</literal> on an even-numbered page.</para>

<para>For single-sided output,
this side region
is <literal>fo:region-end</literal> for all pages.</para>

<para>This correspondence applies to all languages,
both left-to-right and right-to-left writing modes.</para>

<para>The default value is zero.</para>

<para>See also
<parameter>region.inner.extent</parameter>,
<parameter>region.outer.extent</parameter>,
<parameter>body.margin.inner</parameter>,
<parameter>side.region.precedence</parameter>.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="body.start.indent">
<refmeta>
<refentrytitle>body.start.indent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.start.indent</refname>
<refpurpose>The start-indent for the body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.start.indent.frag">
&lt;xsl:param name="body.start.indent"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$fop.extensions != 0"&gt;0pt&lt;/xsl:when&gt;
    &lt;xsl:when test="$passivetex.extensions != 0"&gt;0pt&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;4pc&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter provides
the means of indenting the body text relative to
section titles.
For left-to-right text direction, it indents the left side.
For right-to-left text direction, it indents the right side.
It is used in place of the 
<parameter>title.margin.left</parameter> for
all XSL-FO processors except FOP 0.25.
It enables support for side floats to appear
in the indented margin area.
</para>
<para>This start-indent property is added to the fo:flow
for certain page sequences.  Which page-sequences it is 
applied to is determined by the template named
<literal>set.flow.properties</literal>.
By default, that template adds it to the flow
for page-sequences using the <quote>body</quote>
master-reference, as well as appendixes and prefaces.
</para>
<para>If this parameter is used, section titles should have
a start-indent value of 0pt if they are to be
outdented relative to the body text.
</para>

<para>If you are using FOP, then set this parameter to a zero
width value and set the <parameter>title.margin.left</parameter>
parameter to the negative value of the desired indent.
</para>

<para>See also <parameter>body.end.indent</parameter> and
<parameter>title.margin.left</parameter>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="body.end.indent">
<refmeta>
<refentrytitle>body.end.indent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.end.indent</refname>
<refpurpose>The end-indent for the body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.end.indent.frag">
&lt;xsl:param name="body.end.indent"&gt;0pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This end-indent property is added to the fo:flow
for certain page sequences.  Which page-sequences it is 
applied to is determined by the template named
<literal>set.flow.properties</literal>.
By default, that template adds it to the flow
for page-sequences using the <quote>body</quote>
master-reference, as well as appendixes and prefaces.
</para>

<para>See also <parameter>body.start.indent</parameter>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="alignment">
<refmeta>
<refentrytitle>alignment</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
  <refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">left</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">start</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">right</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">end</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">center</refmiscinfo>
  <refmiscinfo class="other" otherclass="value">justify</refmiscinfo>
</refmeta>
<refnamediv>
<refname>alignment</refname>
<refpurpose>Specify the default text alignment</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="alignment.frag">&lt;xsl:param name="alignment"&gt;justify&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The default text alignment is used for most body text.
Allowed values are 
<literal>left</literal>,
<literal>right</literal>,
<literal>start</literal>,
<literal>end</literal>,
<literal>center</literal>,
<literal>justify</literal>.
The default value is <literal>justify</literal>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="hyphenate">
<refmeta>
<refentrytitle>hyphenate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">closed</refmiscinfo>
<refmiscinfo class="other" otherclass="value">true</refmiscinfo>
<refmiscinfo class="other" otherclass="value">false</refmiscinfo>
</refmeta>
<refnamediv>
<refname>hyphenate</refname>
<refpurpose>Specify hyphenation behavior</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="hyphenate.frag">&lt;xsl:param name="hyphenate"&gt;true&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If true, words may be hyphenated. Otherwise, they may not.</para>
<para>See also <parameter>ulink.hyphenate.chars</parameter> </para>

</refsection>
</refentry>

<refentry version="5.0" id="line-height">
<refmeta>
<refentrytitle>line-height</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>line-height</refname>
<refpurpose>Specify the line-height property</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="line-height.frag">
&lt;xsl:param name="line-height"&gt;normal&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the line-height property.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.back">
<refmeta>
<refentrytitle>column.count.back</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.back</refname>
<refpurpose>Number of columns on back matter pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.back.frag">
&lt;xsl:param name="column.count.back" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on back matter (appendix, glossary, etc.) pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.body">
<refmeta>
<refentrytitle>column.count.body</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.body</refname>
<refpurpose>Number of columns on body pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.body.frag">
&lt;xsl:param name="column.count.body" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on body pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.front">
<refmeta>
<refentrytitle>column.count.front</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.front</refname>
<refpurpose>Number of columns on front matter pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.front.frag">
&lt;xsl:param name="column.count.front" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on front matter (dedication, preface, etc.) pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.index">
<refmeta>
<refentrytitle>column.count.index</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.index</refname>
<refpurpose>Number of columns on index pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.index.frag">
&lt;xsl:param name="column.count.index"&gt;2&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on index pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.lot">
<refmeta>
<refentrytitle>column.count.lot</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.lot</refname>
<refpurpose>Number of columns on a 'List-of-Titles' page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.lot.frag">
&lt;xsl:param name="column.count.lot" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on a page sequence containing the Table of Contents,
List of Figures, etc.</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.count.titlepage">
<refmeta>
<refentrytitle>column.count.titlepage</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.count.titlepage</refname>
<refpurpose>Number of columns on a title page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.count.titlepage.frag">
&lt;xsl:param name="column.count.titlepage" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Number of columns on a title page</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.back">
<refmeta>
<refentrytitle>column.gap.back</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.back</refname>
<refpurpose>Gap between columns in back matter</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.back.frag">
&lt;xsl:param name="column.gap.back"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns in back matter (if
<parameter>column.count.back</parameter> is greater than one).</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.body">
<refmeta>
<refentrytitle>column.gap.body</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.body</refname>
<refpurpose>Gap between columns in the body</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.body.frag">
&lt;xsl:param name="column.gap.body"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns in body matter (if
<parameter>column.count.body</parameter> is greater than one).</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.front">
<refmeta>
<refentrytitle>column.gap.front</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.front</refname>
<refpurpose>Gap between columns in the front matter</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.front.frag">
&lt;xsl:param name="column.gap.front"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns in front matter (if
<parameter>column.count.front</parameter> is greater than one).</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.index">
<refmeta>
<refentrytitle>column.gap.index</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.index</refname>
<refpurpose>Gap between columns in the index</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.index.frag">
&lt;xsl:param name="column.gap.index"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns in indexes (if
<parameter>column.count.index</parameter> is greater than one).</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.lot">
<refmeta>
<refentrytitle>column.gap.lot</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.lot</refname>
<refpurpose>Gap between columns on a 'List-of-Titles' page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.lot.frag">
&lt;xsl:param name="column.gap.lot"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns on 'List-of-Titles' pages (if
<parameter>column.count.lot</parameter> is greater than one).</para>

</refsection>
</refentry>

<refentry version="5.0" id="column.gap.titlepage">
<refmeta>
<refentrytitle>column.gap.titlepage</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>column.gap.titlepage</refname>
<refpurpose>Gap between columns on title pages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="column.gap.titlepage.frag">
&lt;xsl:param name="column.gap.titlepage"&gt;12pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the gap between columns on title pages (if
<parameter>column.count.titlepage</parameter> is greater than one).</para>


</refsection>
</refentry>

<refentry version="5.0" id="region.after.extent">
<refmeta>
<refentrytitle>region.after.extent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.after.extent</refname>
<refpurpose>Specifies the height of the footer.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.after.extent.frag">
&lt;xsl:param name="region.after.extent"&gt;0.4in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The region after extent is the height of the area where footers
are printed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="region.before.extent">
<refmeta>
<refentrytitle>region.before.extent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.before.extent</refname>
<refpurpose>Specifies the height of the header</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.before.extent.frag">
&lt;xsl:param name="region.before.extent"&gt;0.4in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The region before extent is the height of the area where headers
are printed.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="region.inner.extent">
<refmeta>
<refentrytitle>region.inner.extent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.inner.extent</refname>
<refpurpose>Specifies the width of the inner side region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.inner.extent.frag">
&lt;xsl:param name="region.inner.extent"&gt;0in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The region inner extent is the width of the optional
text area next to the inner side (binding side) of the
body region.  </para>

<para>For double-sided output, this side region 
is <literal>fo:region-start</literal> on a odd-numbered page,
and <literal>fo:region-end</literal> on an even-numbered page.</para>

<para>For single-sided output, this side region
is <literal>fo:region-start</literal> for all pages.</para>

<para>This correspondence applies to all languages,
both left-to-right and right-to-left writing modes.</para>

<para>The default value of this parameter is zero.  If you enlarge this extent,
be sure to also enlarge the <parameter>body.margin.inner</parameter>
parameter to make room for its content, otherwise any text in
the side region may overlap with the body text.</para>

<para>See also
<parameter>region.outer.extent</parameter>,
<parameter>body.margin.inner</parameter>,
<parameter>body.margin.outer</parameter>,
<parameter>side.region.precedence</parameter>.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="region.outer.extent">
<refmeta>
<refentrytitle>region.outer.extent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.outer.extent</refname>
<refpurpose>Specifies the width of the outer side region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.outer.extent.frag">
&lt;xsl:param name="region.outer.extent"&gt;0in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The region outer extent is the width of the optional
text area next to the outer side (opposite the binding side) of the
body region.  </para>

<para>For double-sided output, this side region 
is <literal>fo:region-end</literal> on a odd-numbered page,
and <literal>fo:region-start</literal> on an even-numbered page.</para>

<para>For single-sided output, this side region
is <literal>fo:region-end</literal> for all pages.</para>

<para>This correspondence applies to all languages,
both left-to-right and right-to-left writing modes.</para>

<para>The default value of this parameter is zero.  If you enlarge this extent,
be sure to also enlarge the <parameter>body.margin.outer</parameter>
parameter to make room for its content, otherwise any text in
the side region may overlap with the body text.</para>

<para>See also
<parameter>region.inner.extent</parameter>,
<parameter>body.margin.inner</parameter>,
<parameter>body.margin.outer</parameter>,
<parameter>side.region.precedence</parameter>.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="default.units">
<refmeta>
<refentrytitle>default.units</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">cm</refmiscinfo>
<refmiscinfo class="other" otherclass="value">mm</refmiscinfo>
<refmiscinfo class="other" otherclass="value">in</refmiscinfo>
<refmiscinfo class="other" otherclass="value">pt</refmiscinfo>
<refmiscinfo class="other" otherclass="value">pc</refmiscinfo>
<refmiscinfo class="other" otherclass="value">px</refmiscinfo>
<refmiscinfo class="other" otherclass="value">em</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.units</refname>
<refpurpose>Default units for an unqualified dimension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="default.units.frag">
&lt;xsl:param name="default.units"&gt;pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If an unqualified dimension is encountered (for example, in a
graphic width), the <parameter>default.units</parameter> will be used for the
units. Unqualified dimensions are not allowed in XSL Formatting Objects.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="normal.para.spacing">
<refmeta>
<refentrytitle>normal.para.spacing</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>normal.para.spacing</refname>
<refpurpose>What space do you want between normal paragraphs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="normal.para.spacing.frag">&lt;xsl:attribute-set name="normal.para.spacing"&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify the spacing required between normal paragraphs as well as
the following block-level elements:
</para>
<literallayout>ackno
acknowledgements
cmdsynopsis
glosslist
sidebar
simpara
simplelist
</literallayout>
<para>To customize the spacing, you need to reset all three attributes.</para>

<para>To specify properties on just <tag>para</tag> elements without
affecting these other elements,
use the
<link linkend="para.properties">para.properties</link>
attribute-set. </para>
</refsection>
</refentry>

<refentry version="5.0" id="para.properties">
<refmeta>
<refentrytitle>para.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>para.properties</refname>
<refpurpose>Properties to apply to para elements</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="para.properties.frag">&lt;xsl:attribute-set name="para.properties" use-attribute-sets="normal.para.spacing"&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify properties to apply to the fo:block of a para element,
such as <literal>text-indent</literal>.
Although the default attribute-set is empty, it uses the attribute-set
named <literal>normal.para.spacing</literal> to add vertical space before
each para. The <literal>para.properties</literal> attribute-set can override those 
spacing properties for para only.</para>
<para>See also
<link linkend="normal.para.spacing">normal.para.spacing</link>.
</para>
</refsection>
</refentry>

<refentry version="5.0" id="body.font.master">
<refmeta>
<refentrytitle>body.font.master</refentrytitle>
  <refmiscinfo class="other" otherclass="datatype">number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.font.master</refname>
<refpurpose>Specifies the default point size for body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.font.master.frag">
&lt;xsl:param name="body.font.master"&gt;10&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The body font size is specified in two parameters
(<parameter>body.font.master</parameter> and <parameter>body.font.size</parameter>)
so that math can be performed on the font size by XSLT.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="body.font.size">
<refmeta>
<refentrytitle>body.font.size</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.font.size</refname>
<refpurpose>Specifies the default font size for body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.font.size.frag">
&lt;xsl:param name="body.font.size"&gt;
 &lt;xsl:value-of select="$body.font.master"&gt;&lt;/xsl:value-of&gt;&lt;xsl:text&gt;pt&lt;/xsl:text&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The body font size is specified in two parameters
(<parameter>body.font.master</parameter> and <parameter>body.font.size</parameter>)
so that math can be performed on the font size by XSLT.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="footnote.font.size">
<refmeta>
<refentrytitle>footnote.font.size</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footnote.font.size</refname>
<refpurpose>The font size for footnotes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footnote.font.size.frag">&lt;xsl:param name="footnote.font.size"&gt;
 &lt;xsl:value-of select="$body.font.master * 0.8"&gt;&lt;/xsl:value-of&gt;&lt;xsl:text&gt;pt&lt;/xsl:text&gt;
&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The footnote font size is used for...footnotes!
</para>

</refsection>
</refentry>

<refentry version="5.0" id="title.margin.left">
<refmeta>
<refentrytitle>title.margin.left</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>title.margin.left</refname>
<refpurpose>Adjust the left margin for titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="title.margin.left.frag">
&lt;xsl:param name="title.margin.left"&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$fop.extensions != 0"&gt;-4pc&lt;/xsl:when&gt;
    &lt;xsl:when test="$passivetex.extensions != 0"&gt;0pt&lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;0pt&lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter provides
the means of adjusting the left margin for titles
when the XSL-FO processor being used is
an old version of FOP (0.25 and earlier).
It is only useful when the <parameter>fop.extensions</parameter>
is nonzero.</para>

<para>The left margin of the body region
is calculated to include this space,
and titles are outdented to the left outside
the body region by this amount,
effectively leaving titles at the intended left margin
and the body text indented.
Currently this method is only used for old FOP because
it cannot properly use the <parameter>body.start.indent</parameter>
parameter.
</para>
<para>
The default value when the <parameter>fop.extensions</parameter>
parameter is nonzero is -4pc, which means the
body text is indented 4 picas relative to
the titles.
The default value when the <parameter>fop.extensions</parameter>
parameter equals zero is 0pt, and
the body indent should instead be specified
using the <parameter>body.start.indent</parameter>
parameter.
</para>
<para>
If you set the value to zero, be sure to still include
a unit indicator such as <literal>0pt</literal>, or
the FO processor will report errors.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="draft.mode">
<refmeta>
<refentrytitle>draft.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">no</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">yes</refmiscinfo>
<refmiscinfo class="other" otherclass="value">maybe</refmiscinfo>
</refmeta>
<refnamediv>
<refname>draft.mode</refname>
<refpurpose>Select draft mode</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="draft.mode.frag">
&lt;xsl:param name="draft.mode"&gt;no&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects draft mode. If <parameter>draft.mode</parameter> is
<quote><literal>yes</literal></quote>, the entire document will be treated
as a draft. If it is <quote><literal>no</literal></quote>, the entire document
will be treated as a final copy. If it is <quote><literal>maybe</literal></quote>,
individual sections will be treated as draft or final independently, depending
on how their <literal>status</literal> attribute is set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="draft.watermark.image">
<refmeta>
<refentrytitle>draft.watermark.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>draft.watermark.image</refname>
<refpurpose>The URI of the image to be used for draft watermarks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="draft.watermark.image.frag">
&lt;xsl:param name="draft.watermark.image"&gt;images/draft.png&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The image to be used for draft watermarks.</para>

</refsection>
</refentry>

<refentry version="5.0" id="headers.on.blank.pages">
<refmeta>
<refentrytitle>headers.on.blank.pages</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>headers.on.blank.pages</refname>
<refpurpose>Put headers on blank pages?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="headers.on.blank.pages.frag">
&lt;xsl:param name="headers.on.blank.pages" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, headers will be placed on blank pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footers.on.blank.pages">
<refmeta>
<refentrytitle>footers.on.blank.pages</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footers.on.blank.pages</refname>
<refpurpose>Put footers on blank pages?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footers.on.blank.pages.frag">
&lt;xsl:param name="footers.on.blank.pages" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, footers will be placed on blank pages.</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.rule">
<refmeta>
<refentrytitle>header.rule</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.rule</refname>
<refpurpose>Rule under headers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="header.rule.frag">
&lt;xsl:param name="header.rule" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a rule will be drawn below the page headers.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.rule">
<refmeta>
<refentrytitle>footer.rule</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.rule</refname>
<refpurpose>Rule over footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footer.rule.frag">
&lt;xsl:param name="footer.rule" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, a rule will be drawn above the page footers.</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.column.widths">
<refmeta>
<refentrytitle>header.column.widths</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.column.widths</refname>
<refpurpose>Specify relative widths of header areas</refpurpose>
</refnamediv>

<refsynopsisdiv><programlisting id="header.column.widths.frag">
&lt;xsl:param name="header.column.widths"&gt;1 1 1&lt;/xsl:param&gt;
</programlisting></refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Page headers in print output use a three column table
to position text at the left, center, and right side of
the header on the page.
This parameter lets you specify the relative sizes of the
three columns.  The default value is
"1 1 1".</para>

<para>The parameter value must be three numbers, separated
by white space. The first number represents the relative
width of the inside header for
double-sided output.  The second number is the relative
width of the center header.  The third number is the
relative width of the outside header for
double-sided output.
</para>
<para>For single-sided output, the first number is the
relative width of left header for left-to-right
text direction, or the right header for right-to-left
text direction.  
The third number is the
relative width of right header for left-to-right
text direction, or the left header for right-to-left
text direction.</para>

<para>The numbers are used to specify the column widths
for the table that makes up the header area.
In the FO output, this looks like:
</para>

<programlisting>
&lt;fo:table-column column-number="1" 
    column-width="proportional-column-width(1)"/&gt;
</programlisting>

<para>
The <literal>proportional-column-width()</literal>
function computes a column width by dividing its
argument by the total of the arguments for all the columns, and
then multiplying the result by the width of the whole table
(assuming all the column specs use the function).
Its argument can be any positive integer or floating point number.
Zero is an acceptable value, although some FO processors
may warn about it, in which case using a very small number might
be more satisfactory.
</para>

<para>For example, the value "1 2 1" means the center
header should have twice the width of the other areas.
A value of "0 0 1" means the entire header area
is reserved for the right (or outside) header text.
Note that to keep the center area centered on
the page, the left and right values must be
the same. A specification like "1 2 3" means the
center area is no longer centered on the page
since the right area is three times the width of the left area.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.column.widths">
<refmeta>
<refentrytitle>footer.column.widths</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.column.widths</refname>
<refpurpose>Specify relative widths of footer areas</refpurpose>
</refnamediv>

<refsynopsisdiv><programlisting id="footer.column.widths.frag">
&lt;xsl:param name="footer.column.widths"&gt;1 1 1&lt;/xsl:param&gt;
</programlisting></refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Page footers in print output use a three column table
to position text at the left, center, and right side of
the footer on the page.
This parameter lets you specify the relative sizes of the
three columns.  The default value is
"1 1 1".</para>

<para>The parameter value must be three numbers, separated
by white space. The first number represents the relative
width of the inside footer for
double-sided output.  The second number is the relative
width of the center footer.  The third number is the
relative width of the outside footer for
double-sided output.
</para>
<para>For single-sided output, the first number is the
relative width of left footer for left-to-right
text direction, or the right footer for right-to-left
text direction.  
The third number is the
relative width of right footer for left-to-right
text direction, or the left footer for right-to-left
text direction.</para>

<para>The numbers are used to specify the column widths
for the table that makes up the footer area.
In the FO output, this looks like:
</para>

<programlisting>
&lt;fo:table-column column-number="1" 
    column-width="proportional-column-width(1)"/&gt;
</programlisting>

<para>
The <literal>proportional-column-width()</literal>
function computes a column width by dividing its
argument by the total of the arguments for all the columns, and
then multiplying the result by the width of the whole table
(assuming all the column specs use the function).
Its argument can be any positive integer or floating point number.
Zero is an acceptable value, although some FO processors
may warn about it, in which case using a very small number might
be more satisfactory.
</para>

<para>For example, the value "1 2 1" means the center
footer should have twice the width of the other areas.
A value of "0 0 1" means the entire footer area
is reserved for the right (or outside) footer text.
Note that to keep the center area centered on
the page, the left and right values must be
the same. A specification like "1 2 3" means the
center area is no longer centered on the page
since the right area is three times the width of the left area.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.table.properties">
<refmeta>
<refentrytitle>header.table.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.table.properties</refname>
<refpurpose>Apply properties to the header layout table</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="header.table.properties.frag">
&lt;xsl:attribute-set name="header.table.properties"&gt;
  &lt;xsl:attribute name="table-layout"&gt;fixed&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="width"&gt;100%&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties applied to the table that lays out the page header.</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.table.height">
<refmeta>
<refentrytitle>header.table.height</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.table.height</refname>
<refpurpose>Specify the minimum height of the table containing the running page headers</refpurpose>
</refnamediv>

<refsynopsisdiv><programlisting id="header.table.height.frag">
&lt;xsl:param name="header.table.height"&gt;14pt&lt;/xsl:param&gt;
</programlisting></refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Page headers in print output use a three column table
to position text at the left, center, and right side of
the header on the page.
This parameter lets you specify the minimum height 
of the single row in the table.  
Since this specifies only the minimum height,
the table should automatically grow to fit taller content.
The default value is "14pt".</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.table.properties">
<refmeta>
<refentrytitle>footer.table.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.table.properties</refname>
<refpurpose>Apply properties to the footer layout table</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footer.table.properties.frag">
&lt;xsl:attribute-set name="footer.table.properties"&gt;
  &lt;xsl:attribute name="table-layout"&gt;fixed&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="width"&gt;100%&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties applied to the table that lays out the page footer.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.table.height">
<refmeta>
<refentrytitle>footer.table.height</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.table.height</refname>
<refpurpose>Specify the minimum height of the table containing the running page footers</refpurpose>
</refnamediv>

<refsynopsisdiv><programlisting id="footer.table.height.frag">
&lt;xsl:param name="footer.table.height"&gt;14pt&lt;/xsl:param&gt;
</programlisting></refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Page footers in print output use a three column table
to position text at the left, center, and right side of
the footer on the page.
This parameter lets you specify the minimum height 
of the single row in the table.  
Since this specifies only the minimum height,
the table should automatically grow to fit taller content.
The default value is "14pt".</para>

</refsection>
</refentry>

<refentry version="5.0" id="header.content.properties">
<refmeta>
<refentrytitle>header.content.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.content.properties</refname>
<refpurpose>Properties of page header content</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="header.content.properties.frag">
&lt;xsl:attribute-set name="header.content.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-left"&gt;
    &lt;xsl:value-of select="$title.margin.left"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties of page header content.</para>

</refsection>
</refentry>

<refentry version="5.0" id="footer.content.properties">
<refmeta>
<refentrytitle>footer.content.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.content.properties</refname>
<refpurpose>Properties of page footer content</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footer.content.properties.frag">
&lt;xsl:attribute-set name="footer.content.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-left"&gt;
    &lt;xsl:value-of select="$title.margin.left"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties of page footer content.</para>

</refsection>
</refentry>

<refentry version="5.0" id="marker.section.level">
<refmeta>
<refentrytitle>marker.section.level</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>marker.section.level</refname>
<refpurpose>Control depth of sections shown in running headers or footers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="marker.section.level.frag">
&lt;xsl:param name="marker.section.level"&gt;2&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>marker.section.level</parameter> parameter
controls the depth of section levels that may be displayed
in running headers and footers.  For example, if the value
is 2 (the default), then titles from <tag>sect1</tag> and 
<tag>sect2</tag> or equivalent <tag>section</tag>
elements are candidates for use in running headers and
footers.
</para>
<para>Each candidate title is marked in the FO output with a
<tag>&lt;fo:marker marker-class-name="section.head.marker"&gt;</tag>
element.
</para>
<para>In order for such titles to appear in headers
or footers, the <literal>header.content</literal>
or <literal>footer.content</literal> template
must be customized to retrieve the marker using
an output element such as:
</para>
<programlisting>
&lt;fo:retrieve-marker retrieve-class-name="section.head.marker"
                       retrieve-position="first-including-carryover"
                       retrieve-boundary="page-sequence"/&gt;
</programlisting>


</refsection>
</refentry>

<refentry version="5.0" id="side.region.precedence"> 
<refmeta> 
<refentrytitle>side.region.precedence</refentrytitle> 
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>side.region.precedence</refname> 
<refpurpose>Determines side region page layout precedence</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <programlisting id="side.region.precedence.frag">
&lt;xsl:param name="side.region.precedence"&gt;false&lt;/xsl:param&gt;
</programlisting> 
</refsynopsisdiv> 
<refsection><info><title>Description</title></info> 
 
<para>If optional side regions on a page
are established using parameters such as
<parameter>body.margin.inner</parameter>, 
<parameter>region.inner.extent</parameter>, etc., then this
parameter determines what happens at the corners where the
side regions meet the header and footer regions.</para>

<para>If the value of this parameter is <literal>true</literal>,
then the side regions have precedence and extend higher
and lower, while the header and footer regions are narrower
and fit inside the side regions.</para>

<para>If the value of this parameter is <literal>false</literal>
(the default value), then the header and footer regions 
have precedence and extend over and below the side regions.
Any value other than <literal>true</literal> or
<literal>false</literal> is taken to be <literal>false</literal>.</para>

<para>If you need to set precedence separately for
individual regions, then you can set four
parameters that are normally internal to the stylesheet.
These four parameters are normally set based
on the value from <parameter>side.region.precedence</parameter>:</para>

<programlisting>region.before.precedence
region.after.precedence
region.start.precedence
region.end.precedence</programlisting>

<para>See also
<parameter>region.inner.extent</parameter>,
<parameter>region.outer.extent</parameter>,
<parameter>body.margin.inner</parameter>,
<parameter>body.margin.outer</parameter>.
</para>
</refsection> </refentry>

<refentry version="5.0" id="region.inner.properties">
<refmeta>
<refentrytitle>region.inner.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.inner.properties</refname>
<refpurpose>Properties of running inner side region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.inner.properties.frag">
&lt;xsl:attribute-set name="region.inner.properties"&gt;
  &lt;xsl:attribute name="border-width"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="reference-orientation"&gt;90&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The FO stylesheet supports optional side regions
similar to the header and footer regions.
Any attributes declared in this attribute-set 
are applied to the region element in the page master
on the inner side (binding side) of the page.
This corresponds to <literal>&lt;fo:regin-start&gt;</literal>
on odd-numbered pages and <literal>&lt;fo:region-end&gt;</literal>
on even-numbered pages.
For single-sided output, it always corresponds to
<literal>&lt;fo:regin-start&gt;</literal>.</para>

<para>You can customize the template named 
<literal>inner.region.content</literal> to specify
the content of the inner side region.</para>

<para>See also
<parameter>inner.region.content.properties</parameter>,
<parameter>page.margin.inner</parameter>, 
<parameter>body.margin.inner</parameter>,
and the corresponding <literal>outer</literal>
parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="region.outer.properties">
<refmeta>
<refentrytitle>region.outer.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>region.outer.properties</refname>
<refpurpose>Properties of running outer side region</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="region.outer.properties.frag">
&lt;xsl:attribute-set name="region.outer.properties"&gt;
  &lt;xsl:attribute name="border-width"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="reference-orientation"&gt;90&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The FO stylesheet supports optional side regions
similar to the header and footer regions.
Any attributes declared in this attribute-set 
are applied to the region element in the page master
on the outer side (opposite the binding side) of the page.
This corresponds to <literal>&lt;fo:regin-start&gt;</literal>
on odd-numbered pages and <literal>&lt;fo:region-end&gt;</literal>
on even-numbered pages.
For single-sided output, it always corresponds to
<literal>&lt;fo:regin-start&gt;</literal>.</para>

<para>You can customize the template named 
<literal>outer.region.content</literal> to specify
the content of the outer side region.</para>

<para>See also
<parameter>outer.region.content.properties</parameter>,
<parameter>page.margin.outer</parameter>, 
<parameter>body.margin.outer</parameter>,
and the corresponding <literal>inner</literal>
parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="inner.region.content.properties">
<refmeta>
<refentrytitle>inner.region.content.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>inner.region.content.properties</refname>
<refpurpose>Properties of running inner side content</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="inner.region.content.properties.frag">
&lt;xsl:attribute-set name="inner.region.content.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The FO stylesheet supports optional side regions
similar to the header and footer regions.
Any attributes declared in this attribute-set 
are applied to the fo:block in the side region
on the inner side (binding side) of the page.
This corresponds to the <literal>start</literal>
region on odd-numbered pages and the <literal>end</literal>
region on even-numbered pages.
For single-sided output, it always corresponds to
the <literal>start</literal> region.</para>

<para>You can customize the template named 
<literal>inner.region.content</literal> to specify
the content of the inner side region.</para>

<para>See also
<parameter>region.inner.properties</parameter>,
<parameter>page.margin.inner</parameter>, 
<parameter>body.margin.inner</parameter>,
and the corresponding <literal>outer</literal>
parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="outer.region.content.properties">
<refmeta>
<refentrytitle>outer.region.content.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>outer.region.content.properties</refname>
<refpurpose>Properties of running outer side content</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="outer.region.content.properties.frag">
&lt;xsl:attribute-set name="outer.region.content.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The FO stylesheet supports optional side regions
similar to the header and footer regions.
Any attributes declared in this attribute-set 
are applied to the fo:block in the side region
on the outer side (opposite the binding side) of the page.
This corresponds to the <literal>start</literal>
region on odd-numbered pages and the <literal>end</literal>
region on even-numbered pages.
For single-sided output, it always corresponds to
the <literal>start</literal> region.</para>

<para>You can customize the template named 
<literal>outer.region.content</literal> to specify
the content of the outer side region.</para>

<para>See also
<parameter>region.outer.properties</parameter>,
<parameter>page.margin.outer</parameter>, 
<parameter>body.margin.outer</parameter>,
and the corresponding <literal>inner</literal>
parameters.</para>
</refsection>
</refentry>

</reference><reference id="fonts" xml:base="../fo/param.xml"><title>Font Families</title>
<refentry version="5.0" id="body.font.family">
<refmeta>
<refentrytitle>body.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.font.family</refname>
<refpurpose>The default font family for body text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.font.family.frag">
&lt;xsl:param name="body.font.family"&gt;serif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The body font family is the default font used for text in the page body.</para>
<para>If more than one font is required, enter the font names,
separated by a comma, e.g.</para>
<literallayout>
  &lt;xsl:param name="body.font.family"&gt;Arial, SimSun, serif&lt;/xsl:param&gt;

</literallayout>

</refsection>
</refentry>

<refentry version="5.0" id="dingbat.font.family">
<refmeta>
<refentrytitle>dingbat.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>dingbat.font.family</refname>
<refpurpose>The font family for copyright, quotes, and other symbols</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="dingbat.font.family.frag">
&lt;xsl:param name="dingbat.font.family"&gt;serif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The dingbat font family is used for dingbats. If it is defined
as the empty string, no font change is effected around dingbats.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="monospace.font.family">
<refmeta>
<refentrytitle>monospace.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>monospace.font.family</refname>
<refpurpose>The default font family for monospace environments</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="monospace.font.family.frag">
&lt;xsl:param name="monospace.font.family"&gt;monospace&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The monospace font family is used for verbatim environments
(program listings, screens, etc.).
</para>
<para>If more than one font is required, enter the font names,
separated by a comma, e.g.</para>
<literallayout>
  &lt;xsl:param name="body.font.family"&gt;Arial, SimSun, serif&lt;/xsl:param&gt;

</literallayout>
</refsection>
</refentry>

<refentry version="5.0" id="sans.font.family">
<refmeta>
<refentrytitle>sans.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>sans.font.family</refname>
<refpurpose>The default sans-serif font family</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sans.font.family.frag">
&lt;xsl:param name="sans.font.family"&gt;sans-serif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The default sans-serif font family. At the present, this isn't
actually used by the stylesheets.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="title.font.family">
<refmeta>
<refentrytitle>title.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>title.font.family</refname>
<refpurpose>The default font family for titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="title.font.family.frag">
&lt;xsl:param name="title.font.family"&gt;sans-serif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The title font family is used for titles (chapter, section, figure,
etc.)
</para>
<para>If more than one font is required, enter the font names,
separated by a comma, e.g.</para>
<literallayout>
  &lt;xsl:param name="body.font.family"&gt;Arial, SimSun, serif&lt;/xsl:param&gt;

</literallayout>
</refsection>
</refentry>

<refentry version="5.0" id="symbol.font.family">
<refmeta>
<refentrytitle>symbol.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>symbol.font.family</refname>
<refpurpose>The font families to be searched for symbols outside
    of the body font</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="symbol.font.family.frag">
&lt;xsl:param name="symbol.font.family"&gt;Symbol,ZapfDingbats&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>A typical body or title font does not contain all
the character glyphs that DocBook supports.  This parameter
specifies additional fonts that should be searched for
special characters not in the normal font.
These symbol font names are automatically appended
to the body or title font family name when fonts
are specified in a 
<tag class="attribute">font-family</tag>
property in the FO output.
</para>
<para>The symbol font names should be entered as a
comma-separated list.  The default value is
<literal>Symbol,ZapfDingbats</literal>.
</para>

</refsection>
</refentry>

</reference><reference id="propsets" xml:base="../fo/param.xml"><title>Property Sets</title>
<refentry version="5.0" id="formal.object.properties">
<refmeta>
<refentrytitle>formal.object.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.object.properties</refname>
<refpurpose>Properties associated with a formal object such as a figure, or other component that has a title</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.object.properties.frag">
&lt;xsl:attribute-set name="formal.object.properties"&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-together.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for formal objects in docbook. Specify the spacing
before and after the object.</para>

</refsection>
</refentry>

<refentry version="5.0" id="formal.title.properties">
<refmeta>
<refentrytitle>formal.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.title.properties</refname>
<refpurpose>Style the title element of formal object such as a figure.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="formal.title.properties.frag">
&lt;xsl:attribute-set name="formal.title.properties" use-attribute-sets="normal.para.spacing"&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.2"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.4em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;0.6em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;0.8em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify how the title should be styled. Specify the font size and weight of the title of the formal object.</para>
</refsection>
</refentry>

<refentry version="5.0" id="informal.object.properties">
<refmeta>
<refentrytitle>informal.object.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>informal.object.properties</refname>
<refpurpose>Properties associated with an informal (untitled) object, such as an informalfigure</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="informal.object.properties.frag">&lt;xsl:attribute-set name="informal.object.properties"&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.5em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>The styling for informal objects in docbook. Specify the spacing before and after the object.</para>
</refsection>
</refentry>

<refentry version="5.0" id="monospace.properties">
<refmeta>
<refentrytitle>monospace.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>monospace.properties</refname>
<refpurpose>Properties of monospaced content</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="monospace.properties.frag">
&lt;xsl:attribute-set name="monospace.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$monospace.font.family"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the font name for monospaced output. This property set
used to set the font-size as well, but that doesn't work very well
when different fonts are used (as they are in titles and paragraphs,
for example).</para>

<para>If you want to set the font-size in a customization layer, it's
probably going to be more appropriate to set font-size-adjust, if your
formatter supports it.</para>

</refsection>
</refentry>

<refentry version="5.0" id="verbatim.properties">
<refmeta>
<refentrytitle>verbatim.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>verbatim.properties</refname>
<refpurpose>Properties associated with verbatim text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="verbatim.properties.frag">
&lt;xsl:attribute-set name="verbatim.properties"&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.optimum"&gt;1em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-after.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="wrap-option"&gt;no-wrap&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="white-space-collapse"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="white-space-treatment"&gt;preserve&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="linefeed-treatment"&gt;preserve&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>This attribute set is used on all verbatim environments.</para>
</refsection>

</refentry>

<refentry version="5.0" id="monospace.verbatim.properties">
<refmeta>
<refentrytitle>monospace.verbatim.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>monospace.verbatim.properties</refname>
<refpurpose>What font and size do you want for monospaced content?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="monospace.verbatim.properties.frag">
&lt;xsl:attribute-set name="monospace.verbatim.properties" use-attribute-sets="verbatim.properties monospace.properties"&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="wrap-option"&gt;no-wrap&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Specify the font name and size you want for monospaced output</para>
</refsection>
</refentry>

<refentry version="5.0" id="sidebar.properties">
<refmeta>
<refentrytitle>sidebar.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>sidebar.properties</refname>
<refpurpose>Attribute set for sidebar properties</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sidebar.properties.frag">
&lt;xsl:attribute-set name="sidebar.properties" use-attribute-sets="formal.object.properties"&gt;
  &lt;xsl:attribute name="border-style"&gt;solid&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="border-width"&gt;1pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="border-color"&gt;black&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="background-color"&gt;#DDDDDD&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-start"&gt;12pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-end"&gt;12pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-top"&gt;6pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="padding-bottom"&gt;6pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-{$direction.align.start}"&gt;0pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-{$direction.align.end}"&gt;0pt&lt;/xsl:attribute&gt;
&lt;!--
  &lt;xsl:attribute name="margin-top"&gt;6pt&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="margin-bottom"&gt;6pt&lt;/xsl:attribute&gt;
--&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for sidebars.</para>

</refsection>
</refentry>

<refentry version="5.0" id="sidebar.title.properties">
<refmeta>
<refentrytitle>sidebar.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>sidebar.title.properties</refname>
<refpurpose>Attribute set for sidebar titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sidebar.title.properties.frag">
&lt;xsl:attribute-set name="sidebar.title.properties"&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for sidebars titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="sidebar.float.type">
<refmeta>
<refentrytitle>sidebar.float.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">before</refmiscinfo>
<refmiscinfo class="other" otherclass="value">left</refmiscinfo>
<refmiscinfo class="other" otherclass="value">start</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">right</refmiscinfo>
<refmiscinfo class="other" otherclass="value">end</refmiscinfo>     
<refmiscinfo class="other" otherclass="value">inside</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outside</refmiscinfo> 
</refmeta>
<refnamediv>
<refname>sidebar.float.type</refname>
<refpurpose>Select type of float for sidebar elements</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sidebar.float.type.frag">
&lt;xsl:param name="sidebar.float.type"&gt;none&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the type of float for sidebar elements.
</para>
<itemizedlist>
<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>none</literal></quote>, then 
no float is used.
</para>
</listitem>
<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>before</literal></quote>, then 
the float appears at the top of the page.  On some processors,
that may be the next page rather than the current page.
</para>
</listitem>

<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>left</literal></quote>,
then a left side float is used.
</para>
</listitem>

<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>start</literal></quote>,
then when the text direction is left-to-right a left side float is used.
When the text direction is right-to-left, a right side float is used.
</para>
</listitem>

<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>right</literal></quote>,
then a right side float is used.
</para>
</listitem>

<listitem>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>end</literal></quote>,
then when the text direction is left-to-right a right side float is used.
When the text direction is right-to-left, a left side float is used.
</para>
</listitem>

<listitem>
<para>If your XSL-FO processor supports floats positioned on the
<quote><literal>inside</literal></quote> or
<quote><literal>outside</literal></quote>
of double-sided pages, then you have those two 
options for side floats as well.
</para>
</listitem>
</itemizedlist>

</refsection>
</refentry>

<refentry version="5.0" id="sidebar.float.width">
<refmeta>
<refentrytitle>sidebar.float.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>sidebar.float.width</refname>
<refpurpose>Set the default width for sidebars</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sidebar.float.width.frag">
&lt;xsl:param name="sidebar.float.width"&gt;1in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the default width for sidebars when used as a side float.
The width determines the degree to which the sidebar block intrudes into
the text area.
</para>
<para>If <parameter>sidebar.float.type</parameter> is
<quote><literal>before</literal></quote> or 
<quote><literal>none</literal></quote>, then 
this parameter is ignored.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="margin.note.properties">
<refmeta>
<refentrytitle>margin.note.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>margin.note.properties</refname>
<refpurpose>Attribute set for margin.note properties</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="margin.note.properties.frag">
&lt;xsl:attribute-set name="margin.note.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;90%&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for margin notes.
By default, margin notes are not implemented for any
element. A stylesheet customization is needed to make
use of this attribute-set.</para>

<para>You can use a template named <quote>floater</quote>
to create the customization.
That template can create side floats by specifying the
content and characteristics as template parameters.
</para>

<para>For example:</para>
<programlisting>&lt;xsl:template match="para[@role='marginnote']"&gt;
  &lt;xsl:call-template name="floater"&gt;
    &lt;xsl:with-param name="position"&gt;
      &lt;xsl:value-of select="$margin.note.float.type"/&gt;
    &lt;/xsl:with-param&gt;
    &lt;xsl:with-param name="width"&gt;
      &lt;xsl:value-of select="$margin.note.width"/&gt;
    &lt;/xsl:with-param&gt;
    &lt;xsl:with-param name="content"&gt;
      &lt;xsl:apply-imports/&gt;
    &lt;/xsl:with-param&gt;
  &lt;/xsl:call-template&gt;
&lt;/xsl:template&gt;</programlisting>

</refsection>
</refentry>

<refentry version="5.0" id="margin.note.title.properties">
<refmeta>
<refentrytitle>margin.note.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>margin.note.title.properties</refname>
<refpurpose>Attribute set for margin note titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="margin.note.title.properties.frag">
&lt;xsl:attribute-set name="margin.note.title.properties"&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for margin note titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="margin.note.float.type">
<refmeta>
<refentrytitle>margin.note.float.type</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">none</refmiscinfo>
<refmiscinfo class="other" otherclass="value">before</refmiscinfo>
<refmiscinfo class="other" otherclass="value">left</refmiscinfo>
<refmiscinfo class="other" otherclass="value">start</refmiscinfo> 
<refmiscinfo class="other" otherclass="value">right</refmiscinfo>
<refmiscinfo class="other" otherclass="value">end</refmiscinfo>     
<refmiscinfo class="other" otherclass="value">inside</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outside</refmiscinfo> 
</refmeta>
<refnamediv>
<refname>margin.note.float.type</refname>
<refpurpose>Select type of float for margin note customizations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="margin.note.float.type.frag">
&lt;xsl:param name="margin.note.float.type"&gt;none&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Selects the type of float for margin notes.
DocBook does not define a margin note element, so this
feature must be implemented as a customization of the stylesheet.
See <parameter>margin.note.properties</parameter> for
an example.
</para>
<itemizedlist>
<listitem>
<para>If <parameter>margin.note.float.type</parameter> is
<quote><literal>none</literal></quote>, then 
no float is used.
</para>
</listitem>
<listitem>
<para>If <parameter>margin.note.float.type</parameter> is
<quote><literal>before</literal></quote>, then 
the float appears at the top of the page.  On some processors,
that may be the next page rather than the current page.
</para>
</listitem>
<listitem>
<para>If <parameter>margin.note.float.type</parameter> is
<quote><literal>left</literal></quote> or
<quote><literal>start</literal></quote>, then 
a left side float is used.
</para>
</listitem>
<listitem>
<para>If <parameter>margin.note.float.type</parameter> is
<quote><literal>right</literal></quote> or
<quote><literal>end</literal></quote>, then 
a right side float is used.
</para>
</listitem>
<listitem>
<para>If your XSL-FO processor supports floats positioned on the
<quote><literal>inside</literal></quote> or
<quote><literal>outside</literal></quote>
of double-sided pages, then you have those two 
options for side floats as well.
</para>
</listitem>
</itemizedlist>

</refsection>
</refentry>

<refentry version="5.0" id="margin.note.width">
<refmeta>
<refentrytitle>margin.note.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>margin.note.width</refname>
<refpurpose>Set the default width for margin notes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="margin.note.width.frag">
&lt;xsl:param name="margin.note.width"&gt;1in&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets the default width for margin notes when used as a side
float.  The width determines the degree to which the margin note block
intrudes into the text area.
</para>
<para>If <parameter>margin.note.float.type</parameter> is
<quote><literal>before</literal></quote> or 
<quote><literal>none</literal></quote>, then 
this parameter is ignored.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="component.title.properties">
<refmeta>
<refentrytitle>component.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>component.title.properties</refname>
<refpurpose>Properties for component titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="component.title.properties.frag">
&lt;xsl:attribute-set name="component.title.properties"&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt * 0.8')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt * 1.2')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="((parent::article | parent::articleinfo | parent::info/parent::article) and not(ancestor::book) and not(self::bibliography))         or (parent::slides | parent::slidesinfo)"&gt;center&lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;start&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="start-indent"&gt;&lt;xsl:value-of select="$title.margin.left"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties common to all component titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="component.titlepage.properties">
<refmeta>
<refentrytitle>component.titlepage.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>component.titlepage.properties</refname>
<refpurpose>Properties for component titlepages</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="component.titlepage.properties.frag">
&lt;xsl:attribute-set name="component.titlepage.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that are applied to the outer block containing
all the component title page information. 
Its main use is to set a <literal>span="all"</literal>
property on the block that is a direct child of the flow.</para>

<para>This attribute-set also applies to index titlepages. It is empty by default.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.properties">
<refmeta>
<refentrytitle>section.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.properties</refname>
<refpurpose>Properties for section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.properties.frag">
&lt;xsl:attribute-set name="section.title.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$title.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;!-- font size is calculated dynamically by section.heading template --&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1.0em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;start&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="start-indent"&gt;&lt;xsl:value-of select="$title.margin.left"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties common to all section titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.level1.properties">
<refmeta>
<refentrytitle>section.title.level1.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level1.properties</refname>
<refpurpose>Properties for level-1 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level1.properties.frag">
&lt;xsl:attribute-set name="section.title.level1.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 2.0736"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-1 section titles.</para>

</refsection>
</refentry>


<refentry version="5.0" id="section.title.level2.properties">
<refmeta>
<refentrytitle>section.title.level2.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level2.properties</refname>
<refpurpose>Properties for level-2 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level2.properties.frag">
&lt;xsl:attribute-set name="section.title.level2.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.728"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-2 section titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.level3.properties">
<refmeta>
<refentrytitle>section.title.level3.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level3.properties</refname>
<refpurpose>Properties for level-3 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level3.properties.frag">
&lt;xsl:attribute-set name="section.title.level3.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.44"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-3 section titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.level4.properties">
<refmeta>
<refentrytitle>section.title.level4.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level4.properties</refname>
<refpurpose>Properties for level-4 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level4.properties.frag">
&lt;xsl:attribute-set name="section.title.level4.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.2"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-4 section titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.level5.properties">
<refmeta>
<refentrytitle>section.title.level5.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level5.properties</refname>
<refpurpose>Properties for level-5 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level5.properties.frag">
&lt;xsl:attribute-set name="section.title.level5.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-5 section titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.title.level6.properties">
<refmeta>
<refentrytitle>section.title.level6.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.title.level6.properties</refname>
<refpurpose>Properties for level-6 section titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.title.level6.properties.frag">
&lt;xsl:attribute-set name="section.title.level6.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-6 section titles. This property set is actually
used for all titles below level 5.</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.properties">
<refmeta>
<refentrytitle>section.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.properties</refname>
<refpurpose>Properties for all section levels</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.properties.frag">
&lt;xsl:attribute-set name="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of all section levels, and therefore apply to
the whole section.  
This attribute set is inherited by the
more specific attribute sets such as
<tag>section.level1.properties</tag>.
The default is empty.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level1.properties">
<refmeta>
<refentrytitle>section.level1.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level1.properties</refname>
<refpurpose>Properties for level-1 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level1.properties.frag">
&lt;xsl:attribute-set name="section.level1.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level-1 section, and therefore apply to
the whole section.  This includes <tag>sect1</tag>
elements and <tag>section</tag> elements at level 1.
</para>

<para>For example, you could start each level-1 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level1.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level2.properties">
<refmeta>
<refentrytitle>section.level2.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level2.properties</refname>
<refpurpose>Properties for level-2 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level2.properties.frag">
&lt;xsl:attribute-set name="section.level2.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level-2 section, and therefore apply to
the whole section.  This includes <tag>sect2</tag>
elements and <tag>section</tag> elements at level 2.
</para>

<para>For example, you could start each level-2 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level2.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level3.properties">
<refmeta>
<refentrytitle>section.level3.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level3.properties</refname>
<refpurpose>Properties for level-3 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level3.properties.frag">
&lt;xsl:attribute-set name="section.level3.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level-3 section, and therefore apply to
the whole section.  This includes <tag>sect3</tag>
elements and <tag>section</tag> elements at level 3.
</para>

<para>For example, you could start each level-3 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level3.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level4.properties">
<refmeta>
<refentrytitle>section.level4.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level4.properties</refname>
<refpurpose>Properties for level-4 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level4.properties.frag">
&lt;xsl:attribute-set name="section.level4.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level-4 section, and therefore apply to
the whole section.  This includes <tag>sect4</tag>
elements and <tag>section</tag> elements at level 4.
</para>

<para>For example, you could start each level-4 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level4.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level5.properties">
<refmeta>
<refentrytitle>section.level5.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level5.properties</refname>
<refpurpose>Properties for level-5 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level5.properties.frag">
&lt;xsl:attribute-set name="section.level5.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level-5 section, and therefore apply to
the whole section.  This includes <tag>sect5</tag>
elements and <tag>section</tag> elements at level 5.
</para>

<para>For example, you could start each level-5 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level5.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="section.level6.properties">
<refmeta>
<refentrytitle>section.level6.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.level6.properties</refname>
<refpurpose>Properties for level-6 sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="section.level6.properties.frag">
&lt;xsl:attribute-set name="section.level6.properties" use-attribute-sets="section.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties that apply to the containing
block of a level 6 or lower section, and therefore apply to
the whole section.  This includes 
<tag>section</tag> elements at level 6 and lower.
</para>

<para>For example, you could start each level-6 section on
a new page by using:</para>
<programlisting>&lt;xsl:attribute-set name="section.level6.properties"&gt;
  &lt;xsl:attribute name="break-before"&gt;page&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>

<para>This attribute set inherits attributes from the
general <tag>section.properties</tag> attribute set.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="figure.properties">
<refmeta>
<refentrytitle>figure.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>figure.properties</refname>
<refpurpose>Properties associated with a figure</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="figure.properties.frag">
&lt;xsl:attribute-set name="figure.properties" use-attribute-sets="formal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for figures.</para>

</refsection>
</refentry>

<refentry version="5.0" id="example.properties">
<refmeta>
<refentrytitle>example.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>example.properties</refname>
<refpurpose>Properties associated with a example</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="example.properties.frag">
&lt;xsl:attribute-set name="example.properties" use-attribute-sets="formal.object.properties"&gt;
    &lt;xsl:attribute name="keep-together.within-column"&gt;auto&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for examples.</para>

</refsection>
</refentry>

<refentry version="5.0" id="equation.properties">
<refmeta>
<refentrytitle>equation.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>equation.properties</refname>
<refpurpose>Properties associated with a equation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="equation.properties.frag">
&lt;xsl:attribute-set name="equation.properties" use-attribute-sets="formal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for equations.</para>

</refsection>
</refentry>

<refentry version="5.0" id="equation.number.properties">
<refmeta>
<refentrytitle>equation.number.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>equation.number.properties</refname>
<refpurpose>Properties that apply to the <tag>fo:table-cell</tag> containing the number
of an <tag>equation</tag> that does not have a title.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="equation.number.properties.frag">&lt;xsl:attribute-set name="equation.number.properties"&gt;
  &lt;xsl:attribute name="text-align"&gt;end&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="display-align"&gt;center&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>Properties that apply to the fo:table-cell containing the number
of an equation when it has no title. The number in an equation with a
title is formatted along with the title, and this attribute-set does not apply.</para>
</refsection>
</refentry>

<refentry version="5.0" id="table.properties">
<refmeta>
<refentrytitle>table.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.properties</refname>
<refpurpose>Properties associated with the block surrounding a table</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.properties.frag">
&lt;xsl:attribute-set name="table.properties" use-attribute-sets="formal.object.properties"&gt;
  &lt;xsl:attribute name="keep-together.within-column"&gt;auto&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Block styling properties for tables. This parameter should really
have been called <literal>table.block.properties</literal> or something
like that, but we&#8217;re leaving it to avoid backwards-compatibility
problems.</para>

<para>See also <parameter>table.table.properties</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="task.properties">
<refmeta>
<refentrytitle>task.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>task.properties</refname>
<refpurpose>Properties associated with a task</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="task.properties.frag">
&lt;xsl:attribute-set name="task.properties" use-attribute-sets="formal.object.properties"&gt;
    &lt;xsl:attribute name="keep-together.within-column"&gt;auto&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties to style the entire block containing a task element.</para>

</refsection>
</refentry>

<refentry version="5.0" id="informalfigure.properties">
<refmeta>
<refentrytitle>informalfigure.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>informalfigure.properties</refname>
<refpurpose>Properties associated with an informalfigure</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="informalfigure.properties.frag">
&lt;xsl:attribute-set name="informalfigure.properties" use-attribute-sets="informal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for informalfigures.</para>

</refsection>
</refentry>

<refentry version="5.0" id="informalexample.properties">
<refmeta>
<refentrytitle>informalexample.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>informalexample.properties</refname>
<refpurpose>Properties associated with an informalexample</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="informalexample.properties.frag">
&lt;xsl:attribute-set name="informalexample.properties" use-attribute-sets="informal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for informalexamples.</para>

</refsection>
</refentry>

<refentry version="5.0" id="informalequation.properties">
<refmeta>
<refentrytitle>informalequation.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>informalequation.properties</refname>
<refpurpose>Properties associated with an informalequation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="informalequation.properties.frag">
&lt;xsl:attribute-set name="informalequation.properties" use-attribute-sets="informal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for informalequations.</para>

</refsection>
</refentry>

<refentry version="5.0" id="informaltable.properties">
<refmeta>
<refentrytitle>informaltable.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>informaltable.properties</refname>
<refpurpose>Properties associated with the block surrounding an informaltable</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="informaltable.properties.frag">
&lt;xsl:attribute-set name="informaltable.properties" use-attribute-sets="informal.object.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Block styling properties for informaltables. This parameter should really
have been called <literal>informaltable.block.properties</literal> or something
like that, but we&#8217;re leaving it to avoid backwards-compatibility
problems.</para>

<para>See also <parameter>table.table.properties</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="procedure.properties">
<refmeta>
<refentrytitle>procedure.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>procedure.properties</refname>
<refpurpose>Properties associated with a procedure</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="procedure.properties.frag">
&lt;xsl:attribute-set name="procedure.properties" use-attribute-sets="formal.object.properties"&gt;
  &lt;xsl:attribute name="keep-together.within-column"&gt;auto&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The styling for procedures.</para>

</refsection>
</refentry>

<refentry version="5.0" id="root.properties">
<refmeta>
<refentrytitle>root.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>root.properties</refname>
<refpurpose>The properties of the fo:root element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="root.properties.frag">
&lt;xsl:attribute-set name="root.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$body.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.size"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;
    &lt;xsl:value-of select="$alignment"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="line-height"&gt;
    &lt;xsl:value-of select="$line-height"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-selection-strategy"&gt;character-by-character&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="line-height-shift-adjustment"&gt;disregard-shifts&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="writing-mode"&gt;
    &lt;xsl:value-of select="$direction.mode"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This property set is used on the <tag>fo:root</tag> element of
an FO file. It defines a set of default, global parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.properties">
<refmeta>
<refentrytitle>qanda.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.properties</refname>
<refpurpose>Properties for qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.properties.frag">
&lt;xsl:attribute-set name="qanda.title.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;
    &lt;xsl:value-of select="$title.fontset"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;!-- font size is calculated dynamically by qanda.heading template --&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;0.8em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;1.0em&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;1.2em&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties common to all qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level1.properties">
<refmeta>
<refentrytitle>qanda.title.level1.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level1.properties</refname>
<refpurpose>Properties for level-1 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level1.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level1.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 2.0736"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-1 qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level2.properties">
<refmeta>
<refentrytitle>qanda.title.level2.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level2.properties</refname>
<refpurpose>Properties for level-2 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level2.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level2.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.728"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-2 qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level3.properties">
<refmeta>
<refentrytitle>qanda.title.level3.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level3.properties</refname>
<refpurpose>Properties for level-3 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level3.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level3.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.44"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-3 qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level4.properties">
<refmeta>
<refentrytitle>qanda.title.level4.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level4.properties</refname>
<refpurpose>Properties for level-4 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level4.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level4.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master * 1.2"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-4 qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level5.properties">
<refmeta>
<refentrytitle>qanda.title.level5.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level5.properties</refname>
<refpurpose>Properties for level-5 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level5.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level5.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-5 qanda set titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="qanda.title.level6.properties">
<refmeta>
<refentrytitle>qanda.title.level6.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.title.level6.properties</refname>
<refpurpose>Properties for level-6 qanda set titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="qanda.title.level6.properties.frag">
&lt;xsl:attribute-set name="qanda.title.level6.properties"&gt;
  &lt;xsl:attribute name="font-size"&gt;
    &lt;xsl:value-of select="$body.font.master"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;pt&lt;/xsl:text&gt;
  &lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties of level-6 qanda set titles.
This property set is actually
used for all titles below level 5.</para>

</refsection>
</refentry>

<refentry version="5.0" id="article.appendix.title.properties">
<refmeta>
<refentrytitle>article.appendix.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>article.appendix.title.properties</refname>
<refpurpose>Properties for appendix titles that appear in an article</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="article.appendix.title.properties.frag">
&lt;xsl:attribute-set name="article.appendix.title.properties" use-attribute-sets="section.title.properties                          section.title.level1.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties for the title of an appendix that
appears inside an article.  The default is to use
the properties of sect1 titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="abstract.properties">
<refmeta>
<refentrytitle>abstract.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>abstract.properties</refname>
<refpurpose>Properties associated with the block surrounding an abstract</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="abstract.properties.frag">
&lt;xsl:attribute-set name="abstract.properties"&gt;
  &lt;xsl:attribute name="start-indent"&gt;0.0in&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="end-indent"&gt;0.0in&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Block styling properties for abstract.</para>

<para>See also <parameter>abstract.title.properties</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="abstract.title.properties">
<refmeta>
<refentrytitle>abstract.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>abstract.title.properties</refname>
<refpurpose>Properties for abstract titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="abstract.title.properties.frag">
&lt;xsl:attribute-set name="abstract.title.properties"&gt;
  &lt;xsl:attribute name="font-family"&gt;&lt;xsl:value-of select="$title.fontset"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="keep-with-next.within-column"&gt;always&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.optimum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.minimum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt * 0.8')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="space-before.maximum"&gt;&lt;xsl:value-of select="concat($body.font.master, 'pt * 1.2')"&gt;&lt;/xsl:value-of&gt;&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="hyphenate"&gt;false&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The properties for abstract titles.</para>

<para>See also <parameter>abstract.properties</parameter>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="index.page.number.properties">
<refmeta>
<refentrytitle>index.page.number.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>index.page.number.properties</refname>
<refpurpose>Properties associated with index page numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="index.page.number.properties.frag">
&lt;xsl:attribute-set name="index.page.number.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Properties associated with page numbers in indexes. 
Changing color to indicate the page number is a link is
one possibility.
</para>

</refsection>
</refentry>

<refentry version="5.0" id="revhistory.table.properties">
<refmeta>
<refentrytitle>revhistory.table.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>revhistory.table.properties</refname>
<refpurpose>The properties of table used for formatting revhistory</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="revhistory.table.properties.frag">
&lt;xsl:attribute-set name="revhistory.table.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This property set defines appearance of revhistory table.</para>

</refsection>
</refentry>

<refentry version="5.0" id="revhistory.table.cell.properties">
<refmeta>
<refentrytitle>revhistory.table.cell.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>revhistory.table.cell.properties</refname>
<refpurpose>The properties of table cells used for formatting revhistory</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="revhistory.table.cell.properties.frag">
&lt;xsl:attribute-set name="revhistory.table.cell.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This property set defines appearance of individual cells in revhistory table.</para>

</refsection>
</refentry>

<refentry version="5.0" id="revhistory.title.properties">
<refmeta>
<refentrytitle>revhistory.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>revhistory.title.properties</refname>
<refpurpose>The properties of revhistory title</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="revhistory.title.properties.frag">
&lt;xsl:attribute-set name="revhistory.title.properties"&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This property set defines appearance of revhistory title.</para>

</refsection>
</refentry>

</reference><reference id="profiling" xml:base="../fo/param.xml"><title>Profiling</title>
<partintro id="profiling_partintro">
<para>The following parameters can be used for attribute-based
profiling of your document. For more information about profiling, see 
<link role="tcg" xlink:href="Profiling.html">Profiling (conditional text)</link>.</para>
</partintro>
<refentry version="5.0" id="profile.arch">
<refmeta>
<refentrytitle>profile.arch</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.arch</refname>
<refpurpose>Target profile for <tag class="attribute">arch</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.arch.frag">
&lt;xsl:param name="profile.arch"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>


<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.audience">
<refmeta>
<refentrytitle>profile.audience</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.audience</refname>
<refpurpose>Target profile for <tag class="attribute">audience</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.audience.frag">
&lt;xsl:param name="profile.audience"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.condition">
<refmeta>
<refentrytitle>profile.condition</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.condition</refname>
<refpurpose>Target profile for <tag class="attribute">condition</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.condition.frag">
&lt;xsl:param name="profile.condition"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.conformance">
<refmeta>
<refentrytitle>profile.conformance</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.conformance</refname>
<refpurpose>Target profile for <tag class="attribute">conformance</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.conformance.frag">
&lt;xsl:param name="profile.conformance"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.lang">
<refmeta>
<refentrytitle>profile.lang</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.lang</refname>
<refpurpose>Target profile for <tag class="attribute">lang</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.lang.frag">
&lt;xsl:param name="profile.lang"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.os">
<refmeta>
<refentrytitle>profile.os</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.os</refname>
<refpurpose>Target profile for <tag class="attribute">os</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.os.frag">
&lt;xsl:param name="profile.os"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.revision">
<refmeta>
<refentrytitle>profile.revision</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revision</refname>
<refpurpose>Target profile for <tag class="attribute">revision</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.revision.frag">
&lt;xsl:param name="profile.revision"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.revisionflag">
<refmeta>
<refentrytitle>profile.revisionflag</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revisionflag</refname>
<refpurpose>Target profile for <tag class="attribute">revisionflag</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.revisionflag.frag">
&lt;xsl:param name="profile.revisionflag"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.role">
<refmeta>
<refentrytitle>profile.role</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.role</refname>
<refpurpose>Target profile for <tag class="attribute">role</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.role.frag">
&lt;xsl:param name="profile.role"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

<warning>
<para>Note that <tag class="attribute">role</tag> is often
used for other purposes than profiling. For example it is commonly
used to get emphasize in bold font:</para>

<programlisting>&lt;emphasis role="bold"&gt;very important&lt;/emphasis&gt;</programlisting>

<para>If you are using <tag class="attribute">role</tag> for
these purposes do not forget to add values like <literal>bold</literal> to
value of this parameter. If you forgot you will get document with
small pieces missing which are very hard to track.</para>

<para>For this reason it is not recommended to use <tag class="attribute">role</tag> attribute for profiling. You should
rather use profiling specific attributes like <tag class="attribute">userlevel</tag>, <tag class="attribute">os</tag>, <tag class="attribute">arch</tag>, <tag class="attribute">condition</tag>, etc.</para>
</warning>

</refsection>
</refentry>

<refentry version="5.0" id="profile.security">
<refmeta>
<refentrytitle>profile.security</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.security</refname>
<refpurpose>Target profile for <tag class="attribute">security</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.security.frag">
&lt;xsl:param name="profile.security"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.status">
<refmeta>
<refentrytitle>profile.status</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.status</refname>
<refpurpose>Target profile for <tag class="attribute">status</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.status.frag">
&lt;xsl:param name="profile.status"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.userlevel">
<refmeta>
<refentrytitle>profile.userlevel</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.userlevel</refname>
<refpurpose>Target profile for <tag class="attribute">userlevel</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.userlevel.frag">
&lt;xsl:param name="profile.userlevel"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.vendor">
<refmeta>
<refentrytitle>profile.vendor</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.vendor</refname>
<refpurpose>Target profile for <tag class="attribute">vendor</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.vendor.frag">
&lt;xsl:param name="profile.vendor"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.wordsize">
<refmeta>
<refentrytitle>profile.wordsize</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.wordsize</refname>
<refpurpose>Target profile for <tag class="attribute">wordsize</tag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.wordsize.frag">
&lt;xsl:param name="profile.wordsize"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.attribute">
<refmeta>
<refentrytitle>profile.attribute</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.attribute</refname>
<refpurpose>Name of user-specified profiling attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.attribute.frag">
&lt;xsl:param name="profile.attribute"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter is used in conjuction with
<parameter>profile.value</parameter>.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.value">
<refmeta>
<refentrytitle>profile.value</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.value</refname>
<refpurpose>Target profile for user-specified attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.value.frag">
&lt;xsl:param name="profile.value"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>When you are using this parameter you must also specify name of
profiling attribute with parameter
<parameter>profile.attribute</parameter>.</para>

<para>The value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<parameter>profile.separator</parameter>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename>profile-docbook.xsl</filename>,
<filename>profile-chunk.xsl</filename>, &#8230;) instead of normal
ones (<filename>docbook.xsl</filename>,
<filename>chunk.xsl</filename>, &#8230;).</para>

</refsection>
</refentry>

<refentry version="5.0" id="profile.separator">
<refmeta>
<refentrytitle>profile.separator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.separator</refname>
<refpurpose>Separator character for compound profile values</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="profile.separator.frag">
&lt;xsl:param name="profile.separator"&gt;;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Separator character used for compound profile values. See <parameter>profile.arch</parameter></para>

</refsection>
</refentry>

</reference><reference id="l10n" xml:base="../fo/param.xml"><title>Localization</title>
<refentry version="5.0" id="l10n.gentext.language">
<refmeta>
<refentrytitle>l10n.gentext.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.language</refname>
<refpurpose>Sets the gentext language</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.gentext.language.frag">
&lt;xsl:param name="l10n.gentext.language"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If this parameter is set to any value other than the empty string, its
value will be used as the value for the language when generating text. Setting
<parameter>l10n.gentext.language</parameter> overrides any settings within the
document being formatted.</para>

<para>It's much more likely that you might want to set the
<parameter>l10n.gentext.default.language</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.gentext.default.language">
  <refmeta>
    <refentrytitle>l10n.gentext.default.language</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>l10n.gentext.default.language</refname>
    <refpurpose>Sets the default language for generated text</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<programlisting id="l10n.gentext.default.language.frag">
&lt;xsl:param name="l10n.gentext.default.language"&gt;en&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of the <parameter>l10n.gentext.default.language</parameter>
parameter is used as the language for generated text if no setting is provided
in the source document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.gentext.use.xref.language">
<refmeta>
<refentrytitle>l10n.gentext.use.xref.language</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.use.xref.language</refname>
<refpurpose>Use the language of target when generating cross-reference text?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.gentext.use.xref.language.frag">
&lt;xsl:param name="l10n.gentext.use.xref.language" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, the language of the target will be used when
generating cross reference text. Usually, the <quote>current</quote>
language is used when generating text (that is, the language of the
element that contains the cross-reference element). But setting this parameter
allows the language of the element <emphasis>pointed to</emphasis> to control
the generated text.</para>

<para>Consider the following example:</para>

<informalexample>
<programlisting>&lt;para lang="en"&gt;See also &lt;xref linkend="chap3"/&gt;.&lt;/para&gt;
</programlisting>
</informalexample>

<para>Suppose that Chapter 3 happens to be written in German.
If <parameter>l10n.gentext.use.xref.language</parameter> is non-zero, the
resulting text will be something like this:</para>

<blockquote>
<para>See also Kapital 3.</para>
</blockquote>

<para>Where the more traditional rendering would be:</para>

<blockquote>
<para>See also Chapter 3.</para>
</blockquote>

</refsection>
</refentry>

<refentry version="5.0" id="l10n.lang.value.rfc.compliant">
<refmeta>
<refentrytitle>l10n.lang.value.rfc.compliant</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.lang.value.rfc.compliant</refname>
<refpurpose>Make value of lang attribute RFC compliant?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="l10n.lang.value.rfc.compliant.frag">
&lt;xsl:param name="l10n.lang.value.rfc.compliant" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, ensure that the values for all <tag class="attribute">lang</tag> attributes in HTML output are RFC
compliant<footnote><para>Section 8.1.1, <link xlink:href="http://www.w3.org/TR/REC-html40/struct/dirlang.html#h-8.1.1">Language Codes</link>, in the HTML 4.0 Recommendation states that:

<blockquote><para>[RFC1766] defines and explains the language codes
that must be used in HTML documents.</para>
<para>Briefly, language codes consist of a primary code and a possibly
empty series of subcodes:

<literallayout class="monospaced">language-code = primary-code ( "-" subcode )*</literallayout>
</para>
<para>And in RFC 1766, <link xlink:href="http://www.ietf.org/rfc/rfc1766.txt">Tags for the Identification
of Languages</link>, the EBNF for "language tag" is given as:

<literallayout class="monospaced">Language-Tag = Primary-tag *( "-" Subtag )
Primary-tag = 1*8ALPHA
Subtag = 1*8ALPHA</literallayout>
</para>
</blockquote>
</para></footnote>.

by taking any underscore characters in any <tag class="attribute">lang</tag> values found in source documents, and
replacing them with hyphen characters in output HTML files. For
example, <literal>zh_CN</literal> in a source document becomes
<literal>zh-CN</literal> in the HTML output form that source.

<note>
<para>This parameter does not cause any case change in <tag class="attribute">lang</tag> values, because RFC 1766
explicitly states that all "language tags" (as it calls them) "are
to be treated as case insensitive".</para>
</note>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="writing.mode">
<refmeta>
<refentrytitle>writing.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>writing.mode</refname>
<refpurpose>Direction of text flow based on locale</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="writing.mode.frag">
&lt;xsl:param name="writing.mode"&gt;
  &lt;xsl:call-template name="gentext"&gt;
    &lt;xsl:with-param name="key"&gt;writing-mode&lt;/xsl:with-param&gt;
    &lt;xsl:with-param name="lang"&gt;
      &lt;xsl:call-template name="l10n.language"&gt;
        &lt;xsl:with-param name="target" select="/*[1]"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:with-param&gt;
  &lt;/xsl:call-template&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Sets direction of text flow and text alignment based on locale.
The value is normally taken from the gentext file for the 
lang attribute of the document's root element, using the 
key name 'writing-mode' to look it up in the gentext file.
But this param can also be
set on the command line to override that gentext value.
</para>
<para>Accepted values are:
<variablelist>
  <varlistentry>
    <term>lr-tb</term>
    <listitem>
      <para>Left-to-right text flow in each line, lines stack top to bottom.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>rl-tb</term>
    <listitem>
      <para>Right-to-left text flow in each line, lines stack top to bottom.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>tb-rl</term>
    <listitem>
      <para>Top-to-bottom text flow in each vertical line, lines stack right to left.
      Supported by only a few XSL-FO processors. Not supported in HTML output.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>lr</term>
    <listitem>
      <para>Shorthand for lr-tb.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>rl</term>
    <listitem>
      <para>Shorthand for rl-tb.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>tb</term>
    <listitem>
      <para>Shorthand for tb-rl.</para>
    </listitem>
  </varlistentry>
</variablelist>
</para>

</refsection>
</refentry>

</reference><reference id="ebnf" xml:base="../fo/param.xml"><title>EBNF</title>
<refentry version="5.0" id="ebnf.assignment">
<refmeta>
<refentrytitle>ebnf.assignment</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">rtf</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.assignment</refname>
<refpurpose>The EBNF production assignment operator</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.assignment.frag">

&lt;xsl:param name="ebnf.assignment"&gt;
  &lt;fo:inline font-family="{$monospace.font.family}"&gt;
    &lt;xsl:text&gt;::=&lt;/xsl:text&gt;
  &lt;/fo:inline&gt;
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>ebnf.assignment</parameter> parameter determines what
text is used to show <quote>assignment</quote> in <tag>production</tag>s
in <tag>productionset</tag>s.</para>

<para>While <quote><literal>::=</literal></quote> is common, so are several
other operators.</para>

</refsection>
</refentry>

<refentry version="5.0" id="ebnf.statement.terminator">
<refmeta>
<refentrytitle>ebnf.statement.terminator</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">rtf</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.statement.terminator</refname>
<refpurpose>Punctuation that ends an EBNF statement.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="ebnf.statement.terminator.frag">

&lt;xsl:param name="ebnf.statement.terminator"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>ebnf.statement.terminator</parameter> parameter determines what
text is used to terminate each <tag>production</tag>
in <tag>productionset</tag>.</para>

<para>Some notations end each statement with a period.</para>

</refsection>
</refentry>

</reference><reference id="prepress" xml:base="../fo/param.xml"><title>Prepress</title>
<refentry version="5.0" id="crop.marks">
<refmeta>
<refentrytitle>crop.marks</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>crop.marks</refname>
<refpurpose>Output crop marks?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="crop.marks.frag">
&lt;xsl:param name="crop.marks" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, crop marks will be added to each page. Currently this
works only with XEP if you have <parameter>xep.extensions</parameter> set.</para>

</refsection>
</refentry>

<refentry version="5.0" id="crop.mark.width">
<refmeta>
<refentrytitle>crop.mark.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>crop.mark.width</refname>
<refpurpose>Width of crop marks.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="crop.mark.width.frag">
&lt;xsl:param name="crop.mark.width"&gt;0.5pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Width of crop marks. Crop marks are controlled by
<parameter>crop.marks</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="crop.mark.offset">
<refmeta>
<refentrytitle>crop.mark.offset</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>crop.mark.offset</refname>
<refpurpose>Length of crop marks.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="crop.mark.offset.frag">
&lt;xsl:param name="crop.mark.offset"&gt;24pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Length of crop marks. Crop marks are controlled by
<parameter>crop.marks</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="crop.mark.bleed">
<refmeta>
<refentrytitle>crop.mark.bleed</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>crop.mark.bleed</refname>
<refpurpose>Length of invisible part of crop marks.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="crop.mark.bleed.frag">
&lt;xsl:param name="crop.mark.bleed"&gt;6pt&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Length of invisible part of crop marks. Crop marks are controlled by
<parameter>crop.marks</parameter> parameter.</para>

</refsection>
</refentry>

</reference>
    </part>
    <part id="manpages">
      <?dbhtml dir="manpages"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../manpages/param.xml">Manpages Parameter Reference</title>
      <partintro id="manintro">
        
      <para xml:base="../manpages/param.xml">This is reference documentation for all user-configurable
      parameters in the DocBook XSL "manpages" stylesheet (for
      generating groff/nroff output). Note that the manpages
      stylesheet is a customization layer of the DocBook XSL HTML
      stylesheet. Therefore, you can also use a number of <link xlink:href="../html/">HTML stylesheet parameters</link>
      to control manpages output (in addition to the
      manpages-specific parameters listed in this section).</para>
    
      </partintro>
      <reference id="general" xml:base="../manpages/param.xml">
  <title>Hyphenation, justification, and breaking</title>
<refentry version="5.0" id="man.hyphenate">
<refmeta>
<refentrytitle>man.hyphenate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.hyphenate</refname>
<refpurpose>Enable hyphenation?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.hyphenate.frag">
&lt;xsl:param name="man.hyphenate"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, hyphenation is enabled.</para>

<note>
<para>The default value for this parameter is zero because groff is
not particularly smart about how it does hyphenation; it can end up
hyphenating a lot of things that you don't want hyphenated. To
mitigate that, the default behavior of the stylesheets is to suppress
hyphenation of computer inlines, filenames, and URLs. (You can
override the default behavior by setting non-zero values for the
<parameter>man.hyphenate.urls</parameter>,
<parameter>man.hyphenate.filenames</parameter>, and
<parameter>man.hyphenate.computer.inlines</parameter> parameters.) But
the best way is still to just globally disable hyphenation, as the
stylesheets do by default.</para>

<para>The only good reason to enabled hyphenation is if you have also
enabled justification (which is disabled by default). The reason is
that justified text can look very bad unless you also hyphenate it; to
quote the <quote>Hypenation</quote> node from the groff info page:

<blockquote>
  <para><emphasis>Since the odds are not great for finding a set of
  words, for every output line, which fit nicely on a line without
  inserting excessive amounts of space between words, 'gtroff'
  hyphenates words so that it can justify lines without inserting too
  much space between words.</emphasis></para>
</blockquote>

So, if you set a non-zero value for the
<parameter>man.justify</parameter> parameter (to enable
justification), then you should probably also set a non-zero value for
<parameter>man.hyphenate</parameter> (to enable hyphenation).</para>
</note>


</refsection>
</refentry>

<refentry version="5.0" id="man.hyphenate.urls">
<refmeta>
<refentrytitle>man.hyphenate.urls</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.hyphenate.urls</refname>
<refpurpose>Hyphenate URLs?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.hyphenate.urls.frag">
&lt;xsl:param name="man.hyphenate.urls"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), hyphenation is suppressed for output of
the <tag>ulink</tag> <tag class="attribute">url</tag> attribute.</para>

<note>
  <para>If hyphenation is already turned off globally (that is, if
  <parameter>man.hyphenate</parameter> is zero, setting
  <parameter>man.hyphenate.urls</parameter> is not necessary.</para>
</note>

<para>If <parameter>man.hyphenate.urls</parameter> is non-zero, URLs
will not be treated specially and are subject to hyphenation just like
other words.</para>

<note>
  <para>If you are thinking about setting a non-zero value for
  <parameter>man.hyphenate.urls</parameter> in order to make long
  URLs break across lines, you'd probably be better off
  experimenting with setting the
  <parameter>man.break.after.slash</parameter> parameter first. That
  will cause long URLs to be broken after slashes.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="man.hyphenate.filenames">
<refmeta>
<refentrytitle>man.hyphenate.filenames</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.hyphenate.filenames</refname>
<refpurpose>Hyphenate filenames?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.hyphenate.filenames.frag">
&lt;xsl:param name="man.hyphenate.filenames"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), hyphenation is suppressed for
<tag>filename</tag> output.</para>

<note>
  <para>If hyphenation is already turned off globally (that is, if
  <parameter>man.hyphenate</parameter> is zero, setting
  <parameter>man.hyphenate.filenames</parameter> is not
  necessary.</para>
</note>

<para>If <parameter>man.hyphenate.filenames</parameter> is non-zero,
filenames will not be treated specially and are subject to hyphenation
just like other words.</para>

<note>
  <para>If you are thinking about setting a non-zero value for
  <parameter>man.hyphenate.filenames</parameter> in order to make long
  filenames/pathnames break across lines, you'd probably be better off
  experimenting with setting the
  <parameter>man.break.after.slash</parameter> parameter first. That
  will cause long pathnames to be broken after slashes.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="man.hyphenate.computer.inlines">
<refmeta>
<refentrytitle>man.hyphenate.computer.inlines</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.hyphenate.computer.inlines</refname>
<refpurpose>Hyphenate computer inlines?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.hyphenate.computer.inlines.frag">
&lt;xsl:param name="man.hyphenate.computer.inlines"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), hyphenation is suppressed for
<quote>computer inlines</quote> such as environment variables,
constants, etc. This parameter current affects output of the following
elements:
<simplelist type="inline">
  
  <member><tag>classname</tag></member>
  <member><tag>constant</tag></member>
  <member><tag>envar</tag></member>
  <member><tag>errorcode</tag></member>
  <member><tag>option</tag></member>
  <member><tag>replaceable</tag></member>
  <member><tag>userinput</tag></member>
  <member><tag>type</tag></member>
  <member><tag>varname</tag></member>
</simplelist>
</para>

<note>
  <para>If hyphenation is already turned off globally (that is, if
  <parameter>man.hyphenate</parameter> is zero, setting the
  <parameter>man.hyphenate.computer.inlines</parameter> is not
  necessary.</para>
</note>

<para>If <parameter>man.hyphenate.computer.inlines</parameter> is
non-zero, computer inlines will not be treated specially and will be
hyphenated like other words when needed.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.justify">
<refmeta>
<refentrytitle>man.justify</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.justify</refname>
<refpurpose>Justify text to both right and left margins?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.justify.frag">
&lt;xsl:param name="man.justify"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, text is justified to both the right and left
margins (or, in roff terminology, "adjusted and filled" to both the
right and left margins). If zero (the default), text is adjusted to
the left margin only -- producing what is traditionally called
"ragged-right" text.</para>

<note>
<para>The default value for this parameter is zero because justified
text looks good only when it is also hyphenated. Without hyphenation,
excessive amounts of space often end up getting between words, in
order to "pad" lines out to align on the right margin.</para>

<para>The problem is that groff is not particularly smart about how it
does hyphenation; it can end up hyphenating a lot of things that you
don't want hyphenated. So, disabling both justification and
hyphenation ensures that hyphens won't get inserted where you don't
want to them, and you don't end up with lines containing excessive
amounts of space between words.</para>

<para>However, if do you decide to set a non-zero value for the
<parameter>man.justify</parameter> parameter (to enable
justification), then you should probably also set a non-zero value for
<parameter>man.hyphenate</parameter> (to enable hyphenation).</para>

<para>Yes, these default settings run counter to how most existing man
pages are formatted. But there are some notable exceptions, such as
the <literal>perl</literal> man pages.</para>
</note>
</refsection>
</refentry>

<refentry version="5.0" id="man.break.after.slash">
<refmeta>
<refentrytitle>man.break.after.slash</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.break.after.slash</refname>
<refpurpose>Enable line-breaking after slashes?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.break.after.slash.frag">
&lt;xsl:param name="man.break.after.slash"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If non-zero, line-breaking after slashes is enabled. This is
mainly useful for causing long URLs or pathnames/filenames to be
broken up or "wrapped" across lines (though it also has the side
effect of sometimes causing relatively short URLs and pathnames to be
broken up across lines too).</para>

<para>If zero (the default), line-breaking after slashes is
disabled. In that case, strings containing slashes (for example, URLs
or filenames) are not broken across lines, even if they exceed the
maximum column widith.</para>

<warning>
  <para>If you set a non-zero value for this parameter, check your
  man-page output carefuly afterwards, in order to make sure that the
  setting has not introduced an excessive amount of breaking-up of URLs
  or pathnames. If your content contains mostly short URLs or
  pathnames, setting a non-zero value for
  <parameter>man.break.after.slash</parameter> will probably result in
  in a significant number of relatively short URLs and pathnames being
  broken across lines, which is probably not what you want.</para>
</warning>

</refsection>
</refentry>

  </reference><reference id="indent" xml:base="../manpages/param.xml">
  <title>Indentation</title>
<refentry version="5.0" id="man.indent.width">
<refmeta>
<refentrytitle>man.indent.width</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.indent.width</refname>
<refpurpose>Specifies width used for adjusted indents</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.indent.width.frag">
&lt;xsl:param name="man.indent.width"&gt;4&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The <parameter>man.indent.width</parameter> parameter specifies
the width used for adjusted indents. The value of
<parameter>man.indent.width</parameter> is used for indenting of
lists, verbatims, headings, and elsewhere, depending on whether the
values of certain <literal>man.indent.*</literal> boolean parameters
are non-zero.</para>

<para>The value of <parameter>man.indent.width</parameter> should
include a valid roff measurement unit (for example,
<literal>n</literal> or <literal>u</literal>). The default value of
<literal>4n</literal> specifies a 4-en width; when viewed on a
console, that amounts to the width of four characters. For details
about roff measurment units, see the <literal>Measurements</literal>
node in the groff info page.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.indent.refsect">
<refmeta>
<refentrytitle>man.indent.refsect</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.indent.refsect</refname>
<refpurpose>Adjust indentation of refsect* and refsection?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.indent.refsect.frag">
&lt;xsl:param name="man.indent.refsect" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.indent.refsect</parameter> is
non-zero, the width of the left margin for
<tag>refsect1</tag>, <tag>refsect2</tag> and
<tag>refsect3</tag> contents and titles (and first-level,
second-level, and third-level nested
<tag>refsection</tag>instances) is adjusted by the value of
the <parameter>man.indent.width</parameter> parameter. With
<parameter>man.indent.width</parameter> set to its default value of
<literal>3n</literal>, the main results are that:

<itemizedlist>
  <listitem>
    <para>contents of <tag>refsect1</tag> are output with a
    left margin of three characters instead the roff default of seven
    or eight characters</para>
  </listitem>
  <listitem>
    <para>contents of <tag>refsect2</tag> are displayed in
    console output with a left margin of six characters instead the of
    the roff default of seven characters</para>
  </listitem>
  <listitem>
    <para> the contents of <tag>refsect3</tag> and nested
    <tag>refsection</tag> instances are adjusted
    accordingly.</para>
  </listitem>
</itemizedlist>

If instead the value of <parameter>man.indent.refsect</parameter> is
zero, no margin adjustment is done for <literal>refsect*</literal>
output.</para>

<tip>
  <para>If your content is primarly comprised of
  <tag>refsect1</tag> and <tag>refsect2</tag> content
  (or the <tag>refsection</tag> equivalent)&#160;&#8211; with few or
  no <tag>refsect3</tag> or lower nested sections , you may be
  able to &#8220;conserve&#8221; space in your output by setting
  <parameter>man.indent.refsect</parameter> to a non-zero value. Doing
  so will &#8220;squeeze&#8221; the left margin in such as way as to provide an
  additional four characters of &#8220;room&#8221; per line in
  <tag>refsect1</tag> output. That extra room may be useful
  if, for example, you have many verbatim sections with long lines in
  them.</para>
</tip>

</refsection>
</refentry>

<refentry version="5.0" id="man.indent.blurbs">
<refmeta>
<refentrytitle>man.indent.blurbs</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.indent.blurbs</refname>
<refpurpose>Adjust indentation of blurbs?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.indent.blurbs.frag">
&lt;xsl:param name="man.indent.blurbs" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.indent.blurbs</parameter> is
non-zero, the width of the left margin for
<tag>authorblurb</tag>, <tag>personblurb</tag>, and
<tag>contrib</tag> output is set to the value of the
<parameter>man.indent.width</parameter> parameter
(<literal>3n</literal> by default). If instead the value of
<parameter>man.indent.blurbs</parameter> is zero, the built-in roff
default width (<literal>7.2n</literal>) is used.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.indent.lists">
<refmeta>
<refentrytitle>man.indent.lists</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.indent.lists</refname>
<refpurpose>Adjust indentation of lists?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.indent.lists.frag">
&lt;xsl:param name="man.indent.lists" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.indent.lists</parameter> is
non-zero, the width of the left margin for list items in
<tag>itemizedlist</tag>,
<tag>orderedlist</tag>,
<tag>variablelist</tag> output (and output of some other
lists) is set to the value of the
<parameter>man.indent.width</parameter> parameter
(<literal>4n</literal> by default). If instead the value of
<parameter>man.indent.lists</parameter> is zero, the built-in roff
default width (<literal>7.2n</literal>) is used.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.indent.verbatims">
<refmeta>
<refentrytitle>man.indent.verbatims</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.indent.verbatims</refname>
<refpurpose>Adjust indentation of verbatims?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.indent.verbatims.frag">
&lt;xsl:param name="man.indent.verbatims" select="1"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.indent.verbatims</parameter> is
non-zero, the width of the left margin for output of verbatim
environments (<tag>programlisting</tag>,
<tag>screen</tag>, and so on) is set to the value of the
<parameter>man.indent.width</parameter> parameter
(<literal>3n</literal> by default). If instead the value of
<parameter>man.indent.verbatims</parameter> is zero, the built-in roff
default width (<literal>7.2n</literal>) is used.</para>

</refsection>
</refentry>

  </reference><reference id="fonts" xml:base="../manpages/param.xml">
  <title>Fonts</title>
<refentry version="5.0" id="man.font.funcprototype">
<refmeta>
<refentrytitle>man.font.funcprototype</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.font.funcprototype</refname>
<refpurpose>Specifies font for funcprototype output</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.font.funcprototype.frag">
  &lt;xsl:param name="man.font.funcprototype"&gt;BI&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.font.funcprototype</parameter> parameter
specifies the font for <tag>funcprototype</tag> output. It
should be a valid roff font name, such as <literal>BI</literal> or
<literal>B</literal>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.font.funcsynopsisinfo">
<refmeta>
<refentrytitle>man.font.funcsynopsisinfo</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.font.funcsynopsisinfo</refname>
<refpurpose>Specifies font for funcsynopsisinfo output</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.font.funcsynopsisinfo.frag">
  &lt;xsl:param name="man.font.funcsynopsisinfo"&gt;B&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.font.funcsynopsisinfo</parameter> parameter
specifies the font for <tag>funcsynopsisinfo</tag> output. It
should be a valid roff font name, such as <literal>B</literal> or
<literal>I</literal>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.font.links">
<refmeta>
<refentrytitle>man.font.links</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.font.links</refname>
<refpurpose>Specifies font for links</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.font.links.frag">
&lt;xsl:param name="man.font.links"&gt;B&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.font.links</parameter> parameter
specifies the font for output of links (<tag>ulink</tag> instances
and any instances of any element with an <tag class="attribute">xlink:href</tag> attribute).</para>

<para>The value of <parameter>man.font.links</parameter> must be
  either <literal>B</literal> or <literal>I</literal>, or empty. If
the value is empty, no font formatting is applied to links.</para>

<para>If you set <parameter>man.endnotes.are.numbered</parameter> and/or
<parameter>man.endnotes.list.enabled</parameter> to zero (disabled), then
you should probably also set an empty value for
<parameter>man.font.links</parameter>. But if
<parameter>man.endnotes.are.numbered</parameter> is non-zero (enabled),
you should probably keep
<parameter>man.font.links</parameter> set to
<literal>B</literal> or <literal>I</literal><footnote><para>The
    main purpose of applying a font format to links in most output
formats it to indicate that the formatted text is
&#8220;clickable&#8221;; given that links rendered in man pages are
not &#8220;real&#8221; hyperlinks that users can click on, it might
seem like there is never a good reason to have font formatting for
link contents in man output.</para>
<para>In fact, if you suppress the
display of inline link references (by setting
<parameter>man.endnotes.are.numbered</parameter> to zero), there is no
good reason to apply font formatting to links. However, if
<parameter>man.endnotes.are.numbered</parameter> is non-zero, having
font formatting for links (arguably) serves a purpose: It provides
&#8220;context&#8221; information about exactly what part of the text
is being &#8220;annotated&#8221; by the link. Depending on how you
mark up your content, that context information may or may not
have value.</para></footnote>.</para>
</refsection>

<refsection><info><title>Related Parameters</title></info>
  <para><parameter>man.endnotes.list.enabled</parameter>,
    <parameter>man.endnotes.are.numbered</parameter></para>
</refsection>

</refentry>

<refentry version="5.0" id="man.font.table.headings">
<refmeta>
<refentrytitle>man.font.table.headings</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.font.table.headings</refname>
<refpurpose>Specifies font for table headings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.font.table.headings.frag">
  &lt;xsl:param name="man.font.table.headings"&gt;B&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.font.table.headings</parameter> parameter
specifies the font for <tag>table</tag> headings. It should be
a valid roff font, such as <literal>B</literal> or
<literal>I</literal>.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.font.table.title">
<refmeta>
<refentrytitle>man.font.table.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.font.table.title</refname>
<refpurpose>Specifies font for table headings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.font.table.title.frag">
  &lt;xsl:param name="man.font.table.title"&gt;B&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.font.table.title</parameter> parameter
specifies the font for <tag>table</tag> titles. It should be
a valid roff font, such as <literal>B</literal> or
<literal>I</literal>.</para>

</refsection>
</refentry>

  </reference><reference id="synopsis" xml:base="../manpages/param.xml">
  <title>SYNOPSIS section</title>
<refentry version="5.0" id="man.funcsynopsis.style">
<refmeta>
<refentrytitle>man.funcsynopsis.style</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">ansi</refmiscinfo>
<refmiscinfo class="other" otherclass="value">kr</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.funcsynopsis.style</refname>
<refpurpose>What style of <tag>funcsynopsis</tag> should be generated?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="man.funcsynopsis.style.frag">&lt;xsl:param name="man.funcsynopsis.style"&gt;ansi&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>If <parameter>man.funcsynopsis.style</parameter> is
<literal>ansi</literal>, ANSI-style function synopses are
generated for a <tag>funcsynopsis</tag>, otherwise K&amp;R-style
function synopses are generated.</para>
</refsection>
</refentry>

  </reference><reference id="authors" xml:base="../manpages/param.xml">
  <title>AUTHORS and COPYRIGHT sections</title>
  <refentry version="5.0" id="man.authors.section.enabled">
<refmeta>
<refentrytitle>man.authors.section.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.authors.section.enabled</refname>
<refpurpose>Display auto-generated AUTHORS section?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="man.authors.section.enabled.frag">
&lt;xsl:param name="man.authors.section.enabled"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>man.authors.section.enabled</parameter> is non-zero
(the default), then an <literal>AUTHORS</literal> section is
generated near the end of each man page. The output of the
<literal>AUTHORS</literal> section is assembled from any
<tag>author</tag>, <tag>editor</tag>, and <tag>othercredit</tag>
metadata found in the contents of the child <tag>info</tag> or
<tag>refentryinfo</tag> (if any) of the <tag>refentry</tag>
itself, or from any <tag>author</tag>, <tag>editor</tag>, and
<tag>othercredit</tag> metadata that may appear in <tag>info</tag>
contents of any ancestors of the <tag>refentry</tag>.</para>

<para>If the value of
<parameter>man.authors.section.enabled</parameter> is zero, the
the auto-generated <literal>AUTHORS</literal> section is
suppressed.</para>

<para>Set the value of
  <parameter>man.authors.section.enabled</parameter> to zero if
  you want to have a manually created <literal>AUTHORS</literal>
  section in your source, and you want it to appear in output
  instead of the auto-generated <literal>AUTHORS</literal>
  section.</para>
</refsection>
</refentry>

  <refentry version="5.0" id="man.copyright.section.enabled">
<refmeta>
<refentrytitle>man.copyright.section.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.copyright.section.enabled</refname>
<refpurpose>Display auto-generated COPYRIGHT section?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="man.copyright.section.enabled.frag">
&lt;xsl:param name="man.copyright.section.enabled"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>man.copyright.section.enabled</parameter> is non-zero
(the default), then a <literal>COPYRIGHT</literal> section is
generated near the end of each man page. The output of the
<literal>COPYRIGHT</literal> section is assembled from any
<tag>copyright</tag> and <tag>legalnotice</tag> metadata found in
the contents of the child <tag>info</tag> or
<tag>refentryinfo</tag> (if any) of the <tag>refentry</tag>
itself, or from any <tag>copyright</tag> and
<tag>legalnotice</tag> metadata that may appear in <tag>info</tag>
contents of any ancestors of the <tag>refentry</tag>.</para>

<para>If the value of
<parameter>man.copyright.section.enabled</parameter> is zero, the
the auto-generated <literal>COPYRIGHT</literal> section is
suppressed.</para>

<para>Set the value of
  <parameter>man.copyright.section.enabled</parameter> to zero if
  you want to have a manually created <literal>COPYRIGHT</literal>
  section in your source, and you want it to appear in output
  instead of the auto-generated <literal>COPYRIGHT</literal>
  section.</para>
</refsection>
</refentry>

  </reference><reference id="endnotes" xml:base="../manpages/param.xml">
  <title>Endnotes and link handling</title>
<refentry version="5.0" id="man.endnotes.list.enabled">
<refmeta>
<refentrytitle>man.endnotes.list.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.endnotes.list.enabled</refname>
<refpurpose>Display endnotes list at end of man page?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.endnotes.list.enabled.frag">
&lt;xsl:param name="man.endnotes.list.enabled"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.endnotes.list.enabled</parameter> is
non-zero (the default), then an endnotes list is added to the end of
the output man page.</para>

<para>If the value of <parameter>man.endnotes.list.enabled</parameter> is
zero, the list is suppressed &#8212; unless link numbering is enabled (that
is, if <parameter>man.endnotes.are.numbered</parameter> is non-zero), in
which case, that setting overrides the
<parameter>man.endnotes.list.enabled</parameter> setting, and the
endnotes list is still displayed. The reason is that inline
numbering of notesources associated with endnotes only makes sense
if a (numbered) list of endnotes is also generated.</para>

<note>
  <para>Leaving
  <parameter>man.endnotes.list.enabled</parameter> at its default
  (non-zero) value ensures that no &#8220;out of line&#8221; information (such
  as the URLs for hyperlinks and images) gets lost in your
  man-page output. It just gets &#8220;rearranged&#8221;.</para>
  <para>So if you&#8217;re thinking about disabling endnotes listing by
    setting the value of
    <parameter>man.endnotes.list.enabled</parameter> to zero:
    Before you do so, first take some time to carefully consider
    the information needs and experiences of your users. The &#8220;out
    of line&#8221; information has value even if the presentation of it
    in text output is not as interactive as it may be in other
    output formats.</para>
  <para>As far as the specific case of URLs: Even though the URLs
    displayed in text output may not be &#8220;real&#8221; (clickable)
    hyperlinks, many X terminals have convenience features for
    recognizing URLs and can, for example, present users with
    an options to open a URL in a browser with the user clicks on
    the URL is a terminal window. And short of those, users with X
    terminals can always manually cut and paste the URLs into a web
    browser.</para>
  <para>Also, note that various &#8220;man to html&#8221; tools, such as the
    widely used <command><link xlink:href="http://users.actrix.gen.nz/michael/vhman2html.html">man2html</link></command> (<literal>VH-Man2html</literal>)
    application, automatically mark up URLs with <literal>a@href</literal> markup
  during conversion &#8212; resulting in &#8220;real&#8221; hyperlinks in HTML
  output from those tools.</para>
</note>

<para>To &#8220;turn off&#8221; numbering of endnotes in the
endnotes list, set <parameter>man.endnotes.are.numbered</parameter>
to zero. The endnotes list will
still be displayed; it will just be displayed without the
numbers<footnote><para>It can still make sense to have
the list of endnotes displayed even if you have endnotes numbering turned
off. In that case, your endnotes list basically becomes a &#8220;list
of references&#8221; without any association with specific text in
your document. This is probably the best option if you find the inline
endnotes numbering obtrusive. Your users will still have access to all the &#8220;out of line&#8221;
such as URLs for hyperlinks.</para></footnote>
</para>

<para>The default heading for the endnotes list is
<literal>NOTES</literal>. To change that, set a non-empty
value for the <parameter>man.endnotes.list.heading</parameter>
parameter.</para>

<para>In the case of notesources that are links: Along with the
URL for each link, the endnotes list includes the contents of the
link. The list thus includes only non-empty<footnote>

<para>A &#8220;non-empty&#8221; link is one that looks like
this:<literallayout class="monospaced">  &lt;ulink url="http://docbook.sf.net/snapshot/xsl/doc/manpages/"&gt;manpages&lt;/ulink&gt;</literallayout>
an &#8220;empty link&#8221; is on that looks like this:<literallayout class="monospaced">  &lt;ulink url="http://docbook.sf.net/snapshot/xsl/doc/manpages/"/&gt;</literallayout>
</para></footnote> links.

Empty links are never included, and never numbered. They are simply
displayed inline, without any numbering.</para>

<para>In addition, if there are multiple instances of links in a
<tag>refentry</tag> that have the same URL, the URL is listed only
once. The contents listed for that link in the endnotes list are
the contents of the first link which has that URL.</para>

<para>If you disable endnotes listing, you should probably also set
<parameter>man.links.are.underlined</parameter> to zero (to disable
link underlining).</para>
</refsection>
</refentry>

<refentry version="5.0" id="man.endnotes.list.heading">
<refmeta>
<refentrytitle>man.endnotes.list.heading</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.endnotes.list.heading</refname>
<refpurpose>Specifies an alternate name for endnotes list</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.endnotes.list.heading.frag">
&lt;xsl:param name="man.endnotes.list.heading"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.endnotes.are.numbered</parameter> parameter
and/or the <parameter>man.endnotes.list.enabled</parameter>
parameter is non-zero (the defaults for both are non-zero), a
numbered list of endnotes is generated near the end of each man
page. The default heading for the list of endnotes is the
equivalent of the English word <literal>NOTES</literal> in
the current locale. To cause an alternate heading to be displayed,
set a non-empty value for the
<parameter>man.endnotes.list.heading</parameter> parameter &#8212;
for example, <literal>REFERENCES</literal>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="man.endnotes.are.numbered">
<refmeta>
<refentrytitle>man.endnotes.are.numbered</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.endnotes.are.numbered</refname>
<refpurpose>Number endnotes?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.endnotes.are.numbered.frag">
&lt;xsl:param name="man.endnotes.are.numbered"&gt;1&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.endnotes.are.numbered</parameter> is
non-zero (the default), then for each non-empty<footnote>
<para>A &#8220;non-empty&#8221; notesource is one that looks like
this:<literallayout class="monospaced">  &lt;ulink url="http://docbook.sf.net/snapshot/xsl/doc/manpages/"&gt;manpages&lt;/ulink&gt;</literallayout>
an &#8220;empty&#8221; notesource is on that looks like this:<literallayout class="monospaced">  &lt;ulink url="http://docbook.sf.net/snapshot/xsl/doc/manpages/"/&gt;</literallayout>
</para></footnote> &#8220;notesource&#8221;:

<itemizedlist>
  <listitem>
    <para>a number (in square brackets) is displayed inline after the
    rendered inline contents (if any) of the notesource</para>
  </listitem>
  <listitem>
    <para>the contents of the notesource are included in a
      numbered list of endnotes that is generated at the end of
      each man page; the number for each endnote corresponds to
      the inline number for the notesource with which it is
      associated</para>
  </listitem>
</itemizedlist>
The default heading for the list of endnotes is
<literal>NOTES</literal>. To output a different heading, set a value
for the <parameter>man.endnotes.section.heading</parameter>
parameter.</para>

<note>
  <para>The endnotes list is also displayed (but without
    numbers) if the value of
    <parameter>man.endnotes.list.enabled</parameter> is
    non-zero.</para>
</note>


<para>If the value of <parameter>man.endnotes.are.numbered</parameter> is
zero, numbering of endnotess is suppressed; only inline
contents (if any) of the notesource are displayed inline.
<important>
  <para>If you are thinking about disabling endnote numbering by setting
  the value of <parameter>man.endnotes.are.numbered</parameter> to zero,
  before you do so, first take some time to carefully
  consider the information needs and experiences of your users. The
  square-bracketed numbers displayed inline after notesources may seem
  obstrusive and aesthetically unpleasing<footnote><para>As far as notesources that are links, ytou might
  think it would be better to just display URLs for non-empty
  links inline, after their content, rather than displaying
  square-bracketed numbers all over the place. But it's not better. In
  fact, it's not even practical, because many (most) URLs for links
  are too long to be displayed inline. They end up overflowing the
  right margin. You can set a non-zero value for
  <parameter>man.break.after.slash</parameter> parameter to deal with
  that, but it could be argued that what you end up with is at least
  as ugly, and definitely more obstrusive, then having short
  square-bracketed numbers displayed inline.</para></footnote>,

  but in a text-only output format, the
  numbered-notesources/endnotes-listing mechanism is the only
  practical way to handle this kind of content.</para>

  <para>Also, users of &#8220;text based&#8221; browsers such as
  <command>lynx</command> will already be accustomed to seeing inline
  numbers for links. And various "man to html" applications, such as
  the widely used <command><link xlink:href="http://users.actrix.gen.nz/michael/vhman2html.html">man2html</link></command> (<literal>VH-Man2html</literal>)
  application, can automatically turn URLs into "real" HTML hyperlinks
  in output. So leaving <parameter>man.endnotes.are.numbered</parameter>
  at its default (non-zero) value ensures that no information is
  lost in your man-page output. It just gets
  &#8220;rearranged&#8221;.</para>
</important>
</para>
<para>The handling of empty links is not affected by this
parameter. Empty links are handled simply by displaying their URLs
inline. Empty links are never auto-numbered.</para>

<para>If you disable endnotes numbering, you should probably also set
<parameter>man.font.links</parameter> to an empty value (to
disable font formatting for links.</para>
</refsection>

<refsection><info><title>Related Parameters</title></info>
  <para><parameter>man.endnotes.list.enabled</parameter>,
    <parameter>man.font.links</parameter></para>
</refsection>
</refentry>

<refentry version="5.0" id="man.base.url.for.relative.links">
  <refmeta>
    <refentrytitle>man.base.url.for.relative.links</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>man.base.url.for.relative.links</refname>
    <refpurpose>Specifies a base URL for relative links</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="man.base.url.for.relative.links.frag">&lt;xsl:param name="man.base.url.for.relative.links"&gt;[set $man.base.url.for.relative.links]/&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

    <para>For any &#8220;notesource&#8221; listed in the auto-generated
      &#8220;NOTES&#8221; section of output man pages (which is generated when
      the value of the
      <parameter>man.endnotes.list.enabled</parameter> parameter
      is non-zero), if the notesource is a link source with a
      relative URI, the URI is displayed in output with the value
      of the
      <parameter>man.base.url.for.relative.links</parameter>
      parameter prepended to the value of the link URI.</para>

    <note>
      <para>A link source is an notesource that references an
        external resource:
        <itemizedlist>
          <listitem>
            <para>a <tag>ulink</tag> element with a <tag class="attribute">url</tag> attribute</para>
          </listitem>
          <listitem>
            <para>any element with an <tag class="attribute">xlink:href</tag> attribute</para>
          </listitem>
          <listitem>
            <para>an <tag>imagedata</tag>, <tag>audiodata</tag>, or
              <tag>videodata</tag> element</para>
          </listitem>
        </itemizedlist>
      </para>
    </note>

    <para>If you use relative URIs in link sources in your DocBook
      <tag>refentry</tag> source, and you leave
      <parameter>man.base.url.for.relative.links</parameter>
      unset, the relative links will appear &#8220;as is&#8221; in the &#8220;Notes&#8221;
      section of any man-page output generated from your source.
      That&#8217;s probably not what you want, because such relative
      links are only usable in the context of HTML output. So, to
      make the links meaningful and usable in the context of
      man-page output, set a value for
      <parameter>man.base.url.for.relative.links</parameter> that
      points to the online version of HTML output generated from
      your DocBook <tag>refentry</tag> source. For
      example:
      <programlisting>&lt;xsl:param name="man.base.url.for.relative.links"
        &gt;http://www.kernel.org/pub/software/scm/git/docs/&lt;/xsl:param&gt;</programlisting>
    </para>

  </refsection>

  <refsection><info><title>Related Parameters</title></info>
    <para><parameter>man.endnotes.list.enabled</parameter></para>
  </refsection>

</refentry>

  </reference><reference id="lists" xml:base="../manpages/param.xml">
  <title>Lists</title>
<refentry version="5.0" id="man.segtitle.suppress">
<refmeta>
<refentrytitle>man.segtitle.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.segtitle.suppress</refname>
<refpurpose>Suppress display of segtitle contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.segtitle.suppress.frag">
&lt;xsl:param name="man.segtitle.suppress" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.segtitle.suppress</parameter> is
non-zero, then display of <tag>segtitle</tag> contents is
suppressed in output.</para>

</refsection>
</refentry>

  </reference><reference id="charmap" xml:base="../manpages/param.xml">
  <title>Character/string substitution</title>
<refentry version="5.0" id="man.charmap.enabled">
<refmeta>
<refentrytitle>man.charmap.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.charmap.enabled</refname>
<refpurpose>Apply character map before final output?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.charmap.enabled.frag">
&lt;xsl:param name="man.charmap.enabled" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the <parameter>man.charmap.enabled</parameter>
parameter is non-zero, a "character map" is used to substitute certain
Unicode symbols and special characters with appropriate roff/groff
equivalents, just before writing each man-page file to the
filesystem. If instead the value of
<parameter>man.charmap.enabled</parameter> is zero, Unicode characters
are passed through "as is".</para>

<refsection><info><title>Details</title></info>

<para>For converting certain Unicode symbols and special characters in
UTF-8 or UTF-16 encoded XML source to appropriate groff/roff
equivalents in man-page output, the DocBook XSL Stylesheets
distribution includes a <link xlink:href="http://docbook.sourceforge.net/snapshot/xsl/manpages/charmap.groff.xsl">roff character map</link> that is compliant with the <link xlink:href="http://www.w3.org/TR/xslt20/#character-maps">XSLT character
map</link> format as detailed in the XSLT 2.0 specification. The map
contains more than 800 character mappings and can be considered the
standard roff character map for the distribution.</para>

<para>You can use the <parameter>man.charmap.uri</parameter>
parameter to specify a URI for the location for an alternate roff
character map to use in place of the standard roff character map
provided in the distribution.</para>

<para>You can also use a subset of a character map. For details,
see the <parameter>man.charmap.use.subset</parameter>,
<parameter>man.charmap.subset.profile</parameter>, and
<parameter>man.charmap.subset.profile.english</parameter>
parameters.</para>

</refsection>
</refsection>
</refentry>

<refentry version="5.0" id="man.charmap.uri">
<refmeta>
<refentrytitle>man.charmap.uri</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.charmap.uri</refname>
<refpurpose>URI for custom roff character map</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.charmap.uri.frag">
&lt;xsl:param name="man.charmap.uri"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>For converting certain Unicode symbols and special characters in
UTF-8 or UTF-16 encoded XML source to appropriate groff/roff
equivalents in man-page output, the DocBook XSL Stylesheets
distribution includes an <link xlink:href="http://www.w3.org/TR/xslt20/#character-maps">XSLT character
map</link>. That character map can be considered the standard roff
character map for the distribution.</para>

<para>If the value of the <parameter>man.charmap.uri</parameter>
parameter is non-empty, that value is used as the URI for the location
for an alternate roff character map to use in place of the standard
roff character map provided in the distribution.</para>

<warning>
<para>Do not set a value for <parameter>man.charmap.uri</parameter>
unless you have a custom roff character map that differs from the
standard one provided in the distribution.</para>
</warning>
</refsection>
</refentry>

<refentry version="5.0" id="man.charmap.use.subset">
<refmeta>
<refentrytitle>man.charmap.use.subset</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.charmap.use.subset</refname>
<refpurpose>Use subset of character map instead of full map?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.charmap.use.subset.frag">
&lt;xsl:param name="man.charmap.use.subset" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.charmap.use.subset</parameter> parameter is non-zero,
a subset of the roff character map is used instead of the full roff
character map. The profile of the subset used is determined either
by the value of the
<parameter>man.charmap.subset.profile</parameter>
parameter (if the source is not in English) or the
<parameter>man.charmap.subset.profile.english</parameter>
parameter (if the source is in English).</para>

<note>
  <para>You may want to experiment with setting a non-zero value of
  <parameter>man.charmap.use.subset</parameter>, so that the full
  character map is used. Depending on which XSLT engine you run,
  setting a non-zero value for
  <parameter>man.charmap.use.subset</parameter> may significantly
  increase the time needed to process your documents. Or it may
  not. For example, if you set it and run it with xsltproc, it seems
  to dramatically increase processing time; on the other hand, if you
  set it and run it with Saxon, it does not seem to increase
  processing time nearly as much.</para>

  <para>If processing time is not a important concern and/or you can
  tolerate the increase in processing time imposed by using the full
  character map, set <parameter>man.charmap.use.subset</parameter> to
  zero.</para>
</note>

<refsection><info><title>Details</title></info>

<para>For converting certain Unicode symbols and special characters in
UTF-8 or UTF-16 encoded XML source to appropriate groff/roff
equivalents in man-page output, the DocBook XSL Stylesheets
distribution includes a <link xlink:href="http://docbook.sourceforge.net/snapshot/xsl/manpages/charmap.groff.xsl">roff character map</link> that is compliant with the <link xlink:href="http://www.w3.org/TR/xslt20/#character-maps">XSLT character
map</link> format as detailed in the XSLT 2.0 specification. The map
contains more than 800 character mappings and can be considered the
standard roff character map for the distribution.</para>

<note>
<para>You can use the <parameter>man.charmap.uri</parameter>
parameter to specify a URI for the location for an alternate roff
character map to use in place of the standard roff character map
provided in the distribution.</para>
</note>

<para>Because it is not terrifically efficient to use the standard
800-character character map in full -- and for most (or all) users,
never necessary to use it in full -- the DocBook XSL Stylesheets
support a mechanism for using, within any given character map, a
subset of character mappings instead of the full set. You can use the
<parameter>man.charmap.subset.profile</parameter> or
<parameter>man.charmap.subset.profile.english</parameter>
parameter to tune the profile of that subset to use.</para>

</refsection>
</refsection>
</refentry>

<refentry version="5.0" id="man.charmap.subset.profile">
<refmeta>
<refentrytitle>man.charmap.subset.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.charmap.subset.profile</refname>
<refpurpose>Profile of character map subset</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.charmap.subset.profile.frag">
&lt;xsl:param name="man.charmap.subset.profile"&gt;
@*[local-name() = 'block'] = 'Miscellaneous Technical' or
(@*[local-name() = 'block'] = 'C1 Controls And Latin-1 Supplement (Latin-1 Supplement)' and
 (@*[local-name() = 'class'] = 'symbols' or
  @*[local-name() = 'class'] = 'letters')
) or
@*[local-name() = 'block'] = 'Latin Extended-A'
or
(@*[local-name() = 'block'] = 'General Punctuation' and
 (@*[local-name() = 'class'] = 'spaces' or
  @*[local-name() = 'class'] = 'dashes' or
  @*[local-name() = 'class'] = 'quotes' or
  @*[local-name() = 'class'] = 'bullets'
 )
) or
@*[local-name() = 'name'] = 'HORIZONTAL ELLIPSIS' or
@*[local-name() = 'name'] = 'WORD JOINER' or
@*[local-name() = 'name'] = 'SERVICE MARK' or
@*[local-name() = 'name'] = 'TRADE MARK SIGN' or
@*[local-name() = 'name'] = 'ZERO WIDTH NO-BREAK SPACE'
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.charmap.use.subset</parameter> parameter is non-zero,
and your DocBook source is not written in English (that
  is, if the <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute on the root element
  in your DocBook source or on the first <tag>refentry</tag>
  element in your source has a value other than
  <literal>en</literal>), then the character-map subset specified
  by the <parameter>man.charmap.subset.profile</parameter>
  parameter is used instead of the full roff character map.</para>

<para>Otherwise, if the <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute on the root
  element in your DocBook
  source or on the first <tag>refentry</tag> element in your source
  has the value <literal>en</literal> or if it has no <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute, then the character-map
  subset specified by the
  <parameter>man.charmap.subset.profile.english</parameter>
  parameter is used instead of
  <parameter>man.charmap.subset.profile</parameter>.</para>

<para>The difference between the two subsets is that
  <parameter>man.charmap.subset.profile</parameter> provides
  mappings for characters in Western European languages that are
  not part of the Roman (English) alphabet (ASCII character set).</para>

<para>The value of <parameter>man.charmap.subset.profile</parameter>
is a string representing an XPath expression that matches attribute
names and values for <tag namespace="http://docbook.sf.net/xmlns/unichar/1.0">output-character</tag>
elements in the character map.</para>

<para>The attributes supported in the <link xlink:href="http://docbook.sourceforge.net/snapshot/xsl/manpages/charmap.groff.xsl">standard roff character map included in the distribution</link> are:
<variablelist>
  <varlistentry>
    <term>character</term>
    <listitem>
      <simpara>a raw Unicode character or numeric Unicode
      character-entity value (either in decimal or hex); all
      characters have this attribute</simpara>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>name</term>
    <listitem>
      <simpara>a standard full/long ISO/Unicode character name (e.g.,
      "OHM SIGN"); all characters have this attribute</simpara>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>block</term>
    <listitem>
      <simpara>a standard Unicode "block" name (e.g., "General
      Punctuation"); all characters have this attribute. For the full
      list of Unicode block names supported in the standard roff
      character map, see <xref linkend="BlocksAndClasses"/>.</simpara>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>class</term>
    <listitem>
      <simpara>a class of characters (e.g., "spaces"). Not all
      characters have this attribute; currently, it is used only with
      certain characters within the "C1 Controls And Latin-1
      Supplement" and "General Punctuation" blocks. For details, see
      <xref linkend="BlocksAndClasses"/>.</simpara>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>entity</term>
    <listitem>
      <simpara>an ISO entity name (e.g., "ohm"); not all characters
      have this attribute, because not all characters have ISO entity
      names; for example, of the 800 or so characters in the standard
      roff character map included in the distribution, only around 300
      have ISO entity names.
      </simpara>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>string</term>
    <listitem>
      <simpara>a string representing an roff/groff escape-code (with
      "@esc@" used in place of the backslash), or a simple ASCII
      string; all characters in the roff character map have this
      attribute</simpara>
    </listitem>
  </varlistentry>
</variablelist>
</para>
<para>The value of <parameter>man.charmap.subset.profile</parameter>
is evaluated as an XPath expression at run-time to select a portion of
the roff character map to use. You can tune the subset used by adding
or removing parts. For example, if you need to use a wide range of
mathematical operators in a document, and you want to have them
converted into roff markup properly, you might add the following:

<literallayout class="monospaced">  @*[local-name() = 'block'] ='MathematicalOperators' </literallayout>

That will cause a additional set of around 67 additional "math"
characters to be converted into roff markup. </para>

<note>
<para>Depending on which XSLT engine you use, either the EXSLT
<function>dyn:evaluate</function> extension function (for xsltproc or
Xalan) or <function>saxon:evaluate</function> extension function (for
Saxon) are used to dynamically evaluate the value of
<parameter>man.charmap.subset.profile</parameter> at run-time. If you
don't use xsltproc, Saxon, Xalan -- or some other XSLT engine that
supports <function>dyn:evaluate</function> -- you must either set the
value of the <parameter>man.charmap.use.subset</parameter> parameter
to zero and process your documents using the full character map
instead, or set the value of the
<parameter>man.charmap.enabled</parameter> parameter to zero instead
(so that character-map processing is disabled completely.</para>
</note>

<para>An alternative to using
<parameter>man.charmap.subset.profile</parameter> is to create your
own custom character map, and set the value of
<parameter>man.charmap.uri</parameter> to the URI/filename for
that. If you use a custom character map, you will probably want to
include in it just the characters you want to use, and so you will
most likely also want to set the value of
<parameter>man.charmap.use.subset</parameter> to zero.</para>
<para>You can create a
custom character map by making a copy of the <link xlink:href="http://docbook.sourceforge.net/snapshot/xsl/manpages/charmap.groff.xsl">standard roff character map</link> provided in the distribution, and
then adding to, changing, and/or deleting from that.</para>

<caution>
<para>If you author your DocBook XML source in UTF-8 or UTF-16
encoding and aren't sure what OSes or environments your man-page
output might end up being viewed on, and not sure what version of
nroff/groff those environments might have, you should be careful about
what Unicode symbols and special characters you use in your source and
what parts you add to the value of
<parameter>man.charmap.subset.profile</parameter>.</para>
<para>Many of the escape codes used are specific to groff and using
them may not provide the expected output on an OS or environment that
uses nroff instead of groff.</para>
<para>On the other hand, if you intend for your man-page output to be
viewed only on modern systems (for example, GNU/Linux systems, FreeBSD
systems, or Cygwin environments) that have a good, up-to-date groff,
then you can safely include a wide range of Unicode symbols and
special characters in your UTF-8 or UTF-16 encoded DocBook XML source
and add any of the supported Unicode block names to the value of
<parameter>man.charmap.subset.profile</parameter>.</para>
</caution>


<para>For other details, see the documentation for the
<parameter>man.charmap.use.subset</parameter> parameter.</para>

<refsection id="BlocksAndClasses"><info><title>Supported Unicode block names and "class" values</title></info>
  

  <para>Below is the full list of Unicode block names and "class"
  values supported in the standard roff stylesheet provided in the
  distribution, along with a description of which codepoints from the
  Unicode range corresponding to that block name or block/class
  combination are supported.</para>

  <itemizedlist>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=C1%20Controls%20and%20Latin-1%20Supplement%20(Latin-1%20Supplement)">C1 Controls And Latin-1 Supplement (Latin-1 Supplement)</link> (x00a0 to x00ff)
      <itemizedlist><info><title>class values</title></info>
        
        <listitem>
          <para>symbols</para>
        </listitem>
        <listitem>
          <para>letters</para>
        </listitem>
      </itemizedlist></para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Latin%20Extended-A">Latin Extended-A</link> (x0100 to x017f, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Spacing%20Modifier%20Letters">Spacing Modifier Letters</link> (x02b0 to x02ee, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Greek%20and%20Coptic">Greek and Coptic</link> (x0370 to x03ff, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=General%20Punctuation">General Punctuation</link> (x2000 to x206f, partial)
      <itemizedlist><info><title>class values</title></info>
        
        <listitem>
          <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;start=8192&amp;end=8203">spaces</link></para>
        </listitem>
        <listitem>
          <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;start=8208&amp;end=8213">dashes</link></para>
        </listitem>
        <listitem>
          <para>quotes</para>
        </listitem>
        <listitem>
          <para>daggers</para>
        </listitem>
        <listitem>
          <para>bullets</para>
        </listitem>
        <listitem>
          <para>leaders</para>
        </listitem>
        <listitem>
          <para>primes</para>
        </listitem>
      </itemizedlist>
      </para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Superscripts%20and%20Subscripts">Superscripts and Subscripts</link> (x2070 to x209f)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Currency%20Symbols">Currency Symbols</link> (x20a0 to x20b1)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Letterlike%20Symbols">Letterlike Symbols</link> (x2100 to x214b)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Number%20Forms">Number Forms</link> (x2150 to x218f)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Arrows">Arrows</link> (x2190 to x21ff, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Mathematical%20Operators">Mathematical Operators</link> (x2200 to x22ff, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Control%20Pictures">Control Pictures</link> (x2400 to x243f)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Enclosed%20Alphanumerics">Enclosed Alphanumerics</link> (x2460 to x24ff)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Geometric%20Shapes">Geometric Shapes</link> (x25a0 to x25f7, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Miscellaneous%20Symbols">Miscellaneous Symbols</link> (x2600 to x26ff, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Dingbats">Dingbats</link> (x2700 to x27be, partial)</para>
    </listitem>
    <listitem>
      <para><link xlink:href="http://zvon.org/other/charSearch/PHP/search.php?searchType=103&amp;id=Alphabetic%20Presentation%20Forms">Alphabetic Presentation Forms</link> (xfb00 to xfb04 only)</para>
    </listitem>
  </itemizedlist>
</refsection>
</refsection>
</refentry>

<refentry version="5.0" id="man.charmap.subset.profile.english">
<refmeta>
<refentrytitle>man.charmap.subset.profile.english</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.charmap.subset.profile.english</refname>
<refpurpose>Profile of character map subset</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.charmap.subset.profile.english.frag">
&lt;xsl:param name="man.charmap.subset.profile.english"&gt;
@*[local-name() = 'block'] = 'Miscellaneous Technical' or
(@*[local-name() = 'block'] = 'C1 Controls And Latin-1 Supplement (Latin-1 Supplement)' and
 @*[local-name() = 'class'] = 'symbols')
or
(@*[local-name() = 'block'] = 'General Punctuation' and
 (@*[local-name() = 'class'] = 'spaces' or
  @*[local-name() = 'class'] = 'dashes' or
  @*[local-name() = 'class'] = 'quotes' or
  @*[local-name() = 'class'] = 'bullets'
 )
) or
@*[local-name() = 'name'] = 'HORIZONTAL ELLIPSIS' or
@*[local-name() = 'name'] = 'WORD JOINER' or
@*[local-name() = 'name'] = 'SERVICE MARK' or
@*[local-name() = 'name'] = 'TRADE MARK SIGN' or
@*[local-name() = 'name'] = 'ZERO WIDTH NO-BREAK SPACE'
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
  <parameter>man.charmap.use.subset</parameter> parameter is
  non-zero, and your DocBook source is written in English (that
  is, if its <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute on the root element
  in your DocBook source or on the first <tag>refentry</tag>
  element in your source has the value <literal>en</literal> or if
  it has no <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute), then the
  character-map subset specified by the
  <parameter>man.charmap.subset.profile.english</parameter>
  parameter is used instead of the full roff character map.</para>

<para>Otherwise, if the <tag class="attribute">lang</tag> or <tag class="attribute">xml:lang</tag> attribute
  on the root element in your DocBook source or on the first
  <tag>refentry</tag> element in your source has a value other
  than <literal>en</literal>, then the character-map subset
  specified by the
  <parameter>man.charmap.subset.profile</parameter> parameter is
  used instead of
  <parameter>man.charmap.subset.profile.english</parameter>.</para>

<para>The difference between the two subsets is that
  <parameter>man.charmap.subset.profile</parameter> provides
  mappings for characters in Western European languages that are
  not part of the Roman (English) alphabet (ASCII character set).</para>

<para>The value of <parameter>man.charmap.subset.profile.english</parameter>
is a string representing an XPath expression that matches attribute
names and values for <tag namespace="http://docbook.sf.net/xmlns/unichar/1.0">output-character</tag> elements in the character map.</para>

<para>For other details, see the documentation for the
<parameter>man.charmap.subset.profile.english</parameter> and
<parameter>man.charmap.use.subset</parameter> parameters.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.string.subst.map.local.pre">
<refmeta>
<refentrytitle>man.string.subst.map.local.pre</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.string.subst.map.local.pre</refname>
<refpurpose>Specifies &#8220;local&#8221; string substitutions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.string.subst.map.local.pre.frag">
  &lt;xsl:param name="man.string.subst.map.local.pre"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Use the <parameter>man.string.subst.map.local.pre</parameter>
parameter to specify any &#8220;local&#8221; string substitutions to perform over
the entire roff source for each man page <emphasis>before</emphasis>
performing the string substitutions specified by the <parameter>man.string.subst.map</parameter> parameter.</para>

<para>For details about the format of this parameter, see the
documentation for the <parameter>man.string.subst.map</parameter>
parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.string.subst.map">
<refmeta>
<refentrytitle>man.string.subst.map</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">rtf</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.string.subst.map</refname>
<refpurpose>Specifies a set of string substitutions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.string.subst.map.frag">
&lt;xsl:param name="man.string.subst.map"&gt;

  &lt;!-- * remove no-break marker at beginning of line (stylesheet artifact) --&gt; 
  &lt;ss:substitution oldstring="&#9618;&#9600;" newstring="&#9618;"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * replace U+2580 no-break marker (stylesheet-added) w/ no-break space --&gt;
  &lt;ss:substitution oldstring="&#9600;" newstring="\ "&gt;&lt;/ss:substitution&gt;

  &lt;!-- ==================================================================== --&gt;

  &lt;!-- * squeeze multiple newlines before a roff request  --&gt;
  &lt;ss:substitution oldstring="

." newstring="
."&gt;&lt;/ss:substitution&gt;
  &lt;!-- * remove any .sp instances that directly precede a .PP  --&gt;
  &lt;ss:substitution oldstring=".sp
.PP" newstring=".PP"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * remove any .sp instances that directly follow a .PP  --&gt;
  &lt;ss:substitution oldstring=".sp
.sp" newstring=".sp"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * squeeze multiple .sp instances into a single .sp--&gt;
  &lt;ss:substitution oldstring=".PP
.sp" newstring=".PP"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * squeeze multiple newlines after start of no-fill (verbatim) env. --&gt;
  &lt;ss:substitution oldstring=".nf

" newstring=".nf
"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * squeeze multiple newlines after REstoring margin --&gt;
  &lt;ss:substitution oldstring=".RE

" newstring=".RE
"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * U+2591 is a marker we add before and after every Parameter in --&gt;
  &lt;!-- * Funcprototype output --&gt;
  &lt;ss:substitution oldstring="&#9617;" newstring=" "&gt;&lt;/ss:substitution&gt;
  &lt;!-- * U+2592 is a marker we add for the newline before output of &lt;sbr&gt;; --&gt;
  &lt;ss:substitution oldstring="&#9618;" newstring="
"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * --&gt;
  &lt;!-- * Now deal with some other characters that are added by the --&gt;
  &lt;!-- * stylesheets during processing. --&gt;
  &lt;!-- * --&gt;
  &lt;!-- * bullet --&gt;
  &lt;ss:substitution oldstring="&#8226;" newstring="\(bu"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * left double quote --&gt;
  &lt;ss:substitution oldstring="&#8220;" newstring="\(lq"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * right double quote --&gt;
  &lt;ss:substitution oldstring="&#8221;" newstring="\(rq"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * left single quote --&gt;
  &lt;ss:substitution oldstring="&#8216;" newstring="\(oq"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * right single quote --&gt;
  &lt;ss:substitution oldstring="&#8217;" newstring="\(cq"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * copyright sign --&gt;
  &lt;ss:substitution oldstring="&#169;" newstring="\(co"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * registered sign --&gt;
  &lt;ss:substitution oldstring="&#174;" newstring="\(rg"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * ...servicemark... --&gt;
  &lt;!-- * There is no groff equivalent for it. --&gt;
  &lt;ss:substitution oldstring="&#8480;" newstring="(SM)"&gt;&lt;/ss:substitution&gt;
  &lt;!-- * ...trademark... --&gt;
  &lt;!-- * We don't do "\(tm" because for console output, --&gt;
  &lt;!-- * groff just renders that as "tm"; that is: --&gt;
  &lt;!-- * --&gt;
  &lt;!-- *   Product&amp;#x2122; -&gt; Producttm --&gt;
  &lt;!-- * --&gt;
  &lt;!-- * So we just make it to "(TM)" instead; thus: --&gt;
  &lt;!-- * --&gt;
  &lt;!-- *   Product&amp;#x2122; -&gt; Product(TM) --&gt;
  &lt;ss:substitution oldstring="&#8482;" newstring="(TM)"&gt;&lt;/ss:substitution&gt;

&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.string.subst.map</parameter> parameter
contains <link linkend="map">a map</link> that specifies a set of
string substitutions to perform over the entire roff source for each
man page, either just before generating final man-page output (that
is, before writing man-page files to disk) or, if the value of the
<parameter>man.charmap.enabled</parameter> parameter is non-zero,
before applying the roff character map.</para>

<para>You can use <parameter>man.string.subst.map</parameter> as a
&#8220;lightweight&#8221; character map to perform &#8220;essential&#8221; substitutions --
that is, substitutions that are <emphasis>always</emphasis> performed,
even if the value of the <parameter>man.charmap.enabled</parameter>
parameter is zero. For example, you can use it to replace quotation
marks or other special characters that are generated by the DocBook
XSL stylesheets for a particular locale setting (as opposed to those
characters that are actually in source XML documents), or to replace
any special characters that may be automatically generated by a
particular customization of the DocBook XSL stylesheets.</para>

<warning>
  <para>Do you not change value of the
  <parameter>man.string.subst.map</parameter> parameter unless you are
  sure what you are doing. First consider adding your
  string-substitution mappings to either or both of the following
  parameters:
  <variablelist>
    <varlistentry>
      <term><parameter>man.string.subst.map.local.pre</parameter></term>
      <listitem><para>applied before
      <parameter>man.string.subst.map</parameter></para></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>man.string.subst.map.local.post</parameter></term>
      <listitem><para>applied after
      <parameter>man.string.subst.map</parameter></para></listitem>
    </varlistentry>
  </variablelist>
  By default, both of those parameters contain no
  string substitutions. They are intended as a means for you to
  specify your own local string-substitution mappings.</para>

  <para>If you remove any of default mappings from the value of the
  <parameter>man.string.subst.map</parameter> parameter, you are
  likely to end up with broken output. And be very careful about adding
  anything to it; it&#8217;s used for doing string substitution over the
  entire roff source of each man page &#8211; it causes target strings to be
  replaced in roff requests and escapes, not just in the visible
  contents of the page.</para>

</warning>

<refsection id="map">
  <info>
    <title>Contents of the substitution map</title>
  </info>
  <para>The string-substitution map contains one or more
  <tag>ss:substitution</tag> elements, each of which has two
  attributes:
  <variablelist>
    <varlistentry>
      <term>oldstring</term>
      <listitem>
        <simpara>string to replace</simpara>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>newstring</term>
      <listitem>
        <simpara>string with which to replace <tag class="attribute">oldstring</tag></simpara>
      </listitem>
    </varlistentry>
  </variablelist>
  It may also include XML comments (that is, delimited with
  "<literal>&lt;!--</literal>" and "<literal>--&gt;</literal>").
  </para>
</refsection>

</refsection>
</refentry>

<refentry version="5.0" id="man.string.subst.map.local.post">
<refmeta>
<refentrytitle>man.string.subst.map.local.post</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.string.subst.map.local.post</refname>
<refpurpose>Specifies &#8220;local&#8221; string substitutions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.string.subst.map.local.post.frag">
&lt;xsl:param name="man.string.subst.map.local.post"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Use the <parameter>man.string.subst.map.local.post</parameter>
parameter to specify any &#8220;local&#8221; string substitutions to perform over
the entire roff source for each man page <emphasis>after</emphasis>
performing the string substitutions specified by the <parameter>man.string.subst.map</parameter> parameter.</para>

<para>For details about the format of this parameter, see the
documentation for the <parameter>man.string.subst.map</parameter>
parameter.</para>

</refsection>
</refentry>

  </reference><reference id="refmeta" xml:base="../manpages/param.xml">
  <title>Refentry metadata gathering</title>
<refentry version="5.0" id="refentry.meta.get.quietly">
<refmeta>
<refentrytitle>refentry.meta.get.quietly</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.meta.get.quietly</refname>
<refpurpose>Suppress notes and warnings when gathering refentry metadata?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.meta.get.quietly.frag">
&lt;xsl:param name="refentry.meta.get.quietly" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), notes and warnings about &#8220;missing&#8221; markup
are generated during gathering of refentry metadata. If non-zero, the
metadata is gathered &#8220;quietly&#8221; -- that is, the notes and warnings are
suppressed.</para>

<tip>
  <para>If you are processing a large amount of <tag>refentry</tag>
  content, you may be able to speed up processing significantly by
  setting a non-zero value for
  <parameter>refentry.meta.get.quietly</parameter>.</para>
</tip>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.date.profile">
<refmeta>
<refentrytitle>refentry.date.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.date.profile</refname>
<refpurpose>Specifies profile for refentry "date" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.date.profile.frag">
&lt;xsl:param name="refentry.date.profile"&gt;
  (($info[//date])[last()]/date)[1]|
  (($info[//pubdate])[last()]/pubdate)[1]
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of <parameter>refentry.date.profile</parameter> is a
string representing an XPath expression. It is evaluated at run-time
and used only if <parameter>refentry.date.profile.enabled</parameter>
is non-zero. Otherwise, the <tag>refentry</tag> metadata-gathering
logic "hard coded" into the stylesheets is used.</para>

<para> The <literal>man(7)</literal> man page describes this content
as "the date of the last revision". In man pages, it is the content
that is usually displayed in the center footer.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.date.profile.enabled">
<refmeta>
<refentrytitle>refentry.date.profile.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.date.profile.enabled</refname>
<refpurpose>Enable refentry "date" profiling?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.date.profile.enabled.frag">
&lt;xsl:param name="refentry.date.profile.enabled"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>refentry.date.profile.enabled</parameter> is non-zero, then
during <tag>refentry</tag> metadata gathering, the info profile
specified by the customizable
<parameter>refentry.date.profile</parameter> parameter is used.</para>

<para>If instead the value of
<parameter>refentry.date.profile.enabled</parameter> is zero (the
default), then "hard coded" logic within the DocBook XSL stylesheets
is used for gathering <tag>refentry</tag> "date" data.</para>

<para>If you find that the default <tag>refentry</tag>
metadata-gathering behavior is causing incorrect "date" data to show
up in your output, then consider setting a non-zero value for
<parameter>refentry.date.profile.enabled</parameter> and adjusting the
value of <parameter>refentry.date.profile</parameter> to cause correct
data to be gathered. </para>

<para>Note that the terms "source" and "date" have special meanings in
this context. For details, see the documentation for the
<parameter>refentry.date.profile</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.manual.profile">
<refmeta>
<refentrytitle>refentry.manual.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.manual.profile</refname>
<refpurpose>Specifies profile for refentry "manual" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.manual.profile.frag">
&lt;xsl:param name="refentry.manual.profile"&gt;
  (($info[//title])[last()]/title)[1]|
  ../title/node()
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of <parameter>refentry.manual.profile</parameter> is
a string representing an XPath expression. It is evaluated at
run-time and used only if
<parameter>refentry.manual.profile.enabled</parameter> is
non-zero. Otherwise, the <tag>refentry</tag> metadata-gathering logic
"hard coded" into the stylesheets is used.</para>

<para>In man pages, this content is usually displayed in the middle of
the header of the page. The <literal>man(7)</literal> man page
describes this as "the title of the manual (e.g., <citetitle>Linux
Programmer's Manual</citetitle>)". Here are some examples from
existing man pages:
<itemizedlist>
  <listitem>
    <para><citetitle>dpkg utilities</citetitle>
    (<command>dpkg-name</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>User Contributed Perl Documentation</citetitle>
    (<command>GET</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>GNU Development Tools</citetitle>
    (<command>ld</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>Emperor Norton Utilities</citetitle>
    (<command>ddate</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>Debian GNU/Linux manual</citetitle>
    (<command>faked</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>GIMP Manual Pages</citetitle>
    (<command>gimp</command>)</para>
  </listitem>
  <listitem>
    <para><citetitle>KDOC Documentation System</citetitle>
    (<command>qt2kdoc</command>)</para>
  </listitem>
</itemizedlist>
</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.manual.profile.enabled">
<refmeta>
<refentrytitle>refentry.manual.profile.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.manual.profile.enabled</refname>
<refpurpose>Enable refentry "manual" profiling?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.manual.profile.enabled.frag">
&lt;xsl:param name="refentry.manual.profile.enabled"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>refentry.manual.profile.enabled</parameter> is
non-zero, then during <tag>refentry</tag> metadata gathering, the info
profile specified by the customizable
<parameter>refentry.manual.profile</parameter> parameter is
used.</para>

<para>If instead the value of
<parameter>refentry.manual.profile.enabled</parameter> is zero (the
default), then "hard coded" logic within the DocBook XSL stylesheets
is used for gathering <tag>refentry</tag> "manual" data.</para>

<para>If you find that the default <tag>refentry</tag>
metadata-gathering behavior is causing incorrect "manual" data to show
up in your output, then consider setting a non-zero value for
<parameter>refentry.manual.profile.enabled</parameter> and adjusting
the value of <parameter>refentry.manual.profile</parameter> to cause
correct data to be gathered. </para>

<para>Note that the term "manual" has a special meanings in this
context. For details, see the documentation for the
<parameter>refentry.manual.profile</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.source.name.suppress">
<refmeta>
<refentrytitle>refentry.source.name.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.source.name.suppress</refname>
<refpurpose>Suppress "name" part of refentry "source" contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.source.name.suppress.frag">
&lt;xsl:param name="refentry.source.name.suppress"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>refentry.source.name.suppress</parameter> is non-zero, then
during <tag>refentry</tag> metadata gathering, no "source name" data
is added to the <tag>refentry</tag> "source" contents. Instead (unless
<parameter>refentry.version.suppress</parameter> is also non-zero),
only "version" data is added to the "source" contents.</para>

<para>If you find that the <tag>refentry</tag> metadata gathering
mechanism is causing unwanted "source name" data to show up in your
output -- for example, in the footer (or possibly header) of a man
page -- then you might consider setting a non-zero value for
<parameter>refentry.source.name.suppress</parameter>.</para>

<para>Note that the terms "source", "source name", and "version" have
special meanings in this context. For details, see the documentation
for the <parameter>refentry.source.name.profile</parameter>
parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.source.name.profile">
<refmeta>
<refentrytitle>refentry.source.name.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.source.name.profile</refname>
<refpurpose>Specifies profile for refentry "source name" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.source.name.profile.frag">
&lt;xsl:param name="refentry.source.name.profile"&gt;
  (($info[//productname])[last()]/productname)[1]|
  (($info[//corpname])[last()]/corpname)[1]|
  (($info[//corpcredit])[last()]/corpcredit)[1]|
  (($info[//corpauthor])[last()]/corpauthor)[1]|
  (($info[//orgname])[last()]/orgname)[1]|
  (($info[//publishername])[last()]/publishername)[1]
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of <parameter>refentry.source.name.profile</parameter>
is a string representing an XPath expression. It is evaluated at
run-time and used only if
<parameter>refentry.source.name.profile.enabled</parameter> is
non-zero. Otherwise, the <tag>refentry</tag> metadata-gathering logic
"hard coded" into the stylesheets is used.</para>

<para>A "source name" is one part of a (potentially) two-part
<replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>
"source" field. In man pages, it is usually displayed in the left
footer of the page. It typically indicates the software system or
product that the item documented in the man page belongs to. The
<literal>man(7)</literal> man page describes it as "the source of
the command", and provides the following examples:
<itemizedlist>
  <listitem>
    <para>For binaries, use something like: GNU, NET-2, SLS
    Distribution, MCC Distribution.</para>
  </listitem>
  <listitem>
    <para>For system calls, use the version of the kernel that you
    are currently looking at: Linux 0.99.11.</para>
  </listitem>
  <listitem>
    <para>For library calls, use the source of the function: GNU, BSD
    4.3, Linux DLL 4.4.1.</para>
  </listitem>
</itemizedlist>
</para>

<para>In practice, there are many pages that simply have a Version
number in the "source" field. So, it looks like what we have is a
two-part field,
<replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>,
where:
<variablelist>
  <varlistentry>
    <term>Name</term>
    <listitem>
      <para>product name (e.g., BSD) or org. name (e.g., GNU)</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Version</term>
    <listitem>
      <para>version number</para>
    </listitem>
  </varlistentry>
</variablelist>
Each part is optional. If the <replaceable>Name</replaceable> is a
product name, then the <replaceable>Version</replaceable> is probably
the version of the product. Or there may be no
<replaceable>Name</replaceable>, in which case, if there is a
<replaceable>Version</replaceable>, it is probably the version
of the item itself, not the product it is part of. Or, if the
<replaceable>Name</replaceable> is an organization name, then there
probably will be no <replaceable>Version</replaceable>.</para>
</refsection>
</refentry>

<refentry version="5.0" id="refentry.source.name.profile.enabled">
<refmeta>
<refentrytitle>refentry.source.name.profile.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.source.name.profile.enabled</refname>
<refpurpose>Enable refentry "source name" profiling?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.source.name.profile.enabled.frag">
&lt;xsl:param name="refentry.source.name.profile.enabled"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>refentry.source.name.profile.enabled</parameter> is
non-zero, then during <tag>refentry</tag> metadata gathering, the info
profile specified by the customizable
<parameter>refentry.source.name.profile</parameter> parameter is
used.</para>

<para>If instead the value of
<parameter>refentry.source.name.profile.enabled</parameter> is zero (the
default), then "hard coded" logic within the DocBook XSL stylesheets
is used for gathering <tag>refentry</tag> "source name" data.</para>

<para>If you find that the default <tag>refentry</tag>
metadata-gathering behavior is causing incorrect "source name" data to
show up in your output, then consider setting a non-zero value for
<parameter>refentry.source.name.profile.enabled</parameter> and
adjusting the value of
<parameter>refentry.source.name.profile</parameter> to cause correct
data to be gathered. </para>

<para>Note that the terms "source" and "source name" have special
meanings in this context. For details, see the documentation for the
<parameter>refentry.source.name.profile</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.version.suppress">
<refmeta>
<refentrytitle>refentry.version.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.version.suppress</refname>
<refpurpose>Suppress "version" part of refentry "source" contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.version.suppress.frag">
&lt;xsl:param name="refentry.version.suppress"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>refentry.version.suppress</parameter>
is non-zero, then during <tag>refentry</tag> metadata gathering, no
"version" data is added to the <tag>refentry</tag> "source"
contents. Instead (unless
<parameter>refentry.source.name.suppress</parameter> is also
non-zero), only "source name" data is added to the "source"
contents.</para>

<para>If you find that the <tag>refentry</tag> metadata gathering
mechanism is causing unwanted "version" data to show up in your output
-- for example, in the footer (or possibly header) of a man page --
then you might consider setting a non-zero value for
<parameter>refentry.version.suppress</parameter>.</para>

<para>Note that the terms "source", "source name", and "version" have
special meanings in this context. For details, see the documentation
for the <parameter>refentry.source.name.profile</parameter>
parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.version.profile">
<refmeta>
<refentrytitle>refentry.version.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.version.profile</refname>
<refpurpose>Specifies profile for refentry "version" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.version.profile.frag">
&lt;xsl:param name="refentry.version.profile"&gt;
  (($info[//productnumber])[last()]/productnumber)[1]|
  (($info[//edition])[last()]/edition)[1]|
  (($info[//releaseinfo])[last()]/releaseinfo)[1]
&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of <parameter>refentry.version.profile</parameter> is
a string representing an XPath expression. It is evaluated at
run-time and used only if
<parameter>refentry.version.profile.enabled</parameter> is
non-zero. Otherwise, the <tag>refentry</tag> metadata-gathering logic
"hard coded" into the stylesheets is used.</para>

<para>A "source.name" is one part of a (potentially) two-part
<replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>
"source" field. For more details, see the documentation for the
<parameter>refentry.source.name.profile</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.version.profile.enabled">
<refmeta>
<refentrytitle>refentry.version.profile.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.version.profile.enabled</refname>
<refpurpose>Enable refentry "version" profiling?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.version.profile.enabled.frag">
&lt;xsl:param name="refentry.version.profile.enabled"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of
<parameter>refentry.version.profile.enabled</parameter> is
non-zero, then during <tag>refentry</tag> metadata gathering, the info
profile specified by the customizable
<parameter>refentry.version.profile</parameter> parameter is
used.</para>

<para>If instead the value of
<parameter>refentry.version.profile.enabled</parameter> is zero (the
default), then "hard coded" logic within the DocBook XSL stylesheets
is used for gathering <tag>refentry</tag> "version" data.</para>

<para>If you find that the default <tag>refentry</tag>
metadata-gathering behavior is causing incorrect "version" data to show
up in your output, then consider setting a non-zero value for
<parameter>refentry.version.profile.enabled</parameter> and adjusting
the value of <parameter>refentry.version.profile</parameter> to cause
correct data to be gathered. </para>

<para>Note that the terms "source" and "version" have special
meanings in this context. For details, see the documentation for the
<parameter>refentry.version.profile</parameter> parameter.</para>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.manual.fallback.profile">
<refmeta>
<refentrytitle>refentry.manual.fallback.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.manual.fallback.profile</refname>
<refpurpose>Specifies profile of "fallback" for refentry "manual" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.manual.fallback.profile.frag">
&lt;xsl:param name="refentry.manual.fallback.profile"&gt;
refmeta/refmiscinfo[not(@class = 'date')][1]/node()&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of
<parameter>refentry.manual.fallback.profile</parameter> is a string
representing an XPath expression. It is evaluated at run-time and
used only if no "manual" data can be found by other means (that is,
either using the <tag>refentry</tag> metadata-gathering logic "hard
coded" in the stylesheets, or the value of
<parameter>refentry.manual.profile</parameter>, if it is
enabled).</para>

<important>
<para>Depending on which XSLT engine you run, either the EXSLT
<function>dyn:evaluate</function> extension function (for xsltproc or
Xalan) or <function>saxon:evaluate</function> extension function (for
Saxon) are used to dynamically evaluate the value of
<parameter>refentry.manual.fallback.profile</parameter> at
run-time. If you don't use xsltproc, Saxon, Xalan -- or some other
XSLT engine that supports <function>dyn:evaluate</function> -- you
must manually disable fallback processing by setting an empty value
for the <parameter>refentry.manual.fallback.profile</parameter>
parameter.</para>
</important>

</refsection>
</refentry>

<refentry version="5.0" id="refentry.source.fallback.profile">
<refmeta>
<refentrytitle>refentry.source.fallback.profile</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.source.fallback.profile</refname>
<refpurpose>Specifies profile of "fallback" for refentry "source" data</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="refentry.source.fallback.profile.frag">
&lt;xsl:param name="refentry.source.fallback.profile"&gt;
refmeta/refmiscinfo[not(@class = 'date')][1]/node()&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The value of
<parameter>refentry.source.fallback.profile</parameter> is a string
representing an XPath expression. It is evaluated at run-time and used
only if no "source" data can be found by other means (that is, either
using the <tag>refentry</tag> metadata-gathering logic "hard coded" in
the stylesheets, or the value of the
<parameter>refentry.source.name.profile</parameter> and
<parameter>refentry.version.profile</parameter> parameters, if those
are enabled).</para>

<important>
<para>Depending on which XSLT engine you run, either the EXSLT
<function>dyn:evaluate</function> extension function (for xsltproc or
Xalan) or <function>saxon:evaluate</function> extension function (for
Saxon) are used to dynamically evaluate the value of
<parameter>refentry.source.fallback.profile</parameter> at
run-time. If you don't use xsltproc, Saxon, Xalan -- or some other
XSLT engine that supports <function>dyn:evaluate</function> -- you
must manually disable fallback processing by setting an empty value
for the <parameter>refentry.source.fallback.profile</parameter>
parameter.</para>
</important>

</refsection>
</refentry>

  </reference><reference id="th" xml:base="../manpages/param.xml">
  <title>Page header/footer</title>
<refentry version="5.0" id="man.th.extra1.suppress">
<refmeta>
<refentrytitle>man.th.extra1.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.extra1.suppress</refname>
<refpurpose>Suppress extra1 part of header/footer?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.extra1.suppress.frag">
&lt;xsl:param name="man.th.extra1.suppress"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.th.extra1.suppress</parameter> is
non-zero, then the <literal>extra1</literal> part of the
<literal>.TH</literal> title line header/footer is suppressed.</para>

<para>The content of the <literal>extra1</literal> field is almost
always displayed in the center footer of the page and is, universally,
a date.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.th.extra2.suppress">
<refmeta>
<refentrytitle>man.th.extra2.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.extra2.suppress</refname>
<refpurpose>Suppress extra2 part of header/footer?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.extra2.suppress.frag">
&lt;xsl:param name="man.th.extra2.suppress"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.th.extra2.suppress</parameter> is
non-zero, then the <literal>extra2</literal> part of the
<literal>.TH</literal> title line header/footer is suppressed.</para>

<para>The content of the <literal>extra2</literal> field is usually
displayed in the left footer of the page and is typically "source"
data, often in the form
<replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>;
for example, "GTK+ 1.2" (from the <literal>gtk-options(7)</literal>
man page).</para>

<note>
  <para>You can use the
  <parameter>refentry.source.name.suppress</parameter> and
  <parameter>refentry.version.suppress</parameter> parameters to
  independently suppress the <replaceable>Name</replaceable> and
  <replaceable>Version</replaceable> parts of the
  <literal>extra2</literal> field.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="man.th.extra3.suppress">
<refmeta>
<refentrytitle>man.th.extra3.suppress</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.extra3.suppress</refname>
<refpurpose>Suppress extra3 part of header/footer?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.extra3.suppress.frag">
&lt;xsl:param name="man.th.extra3.suppress"&gt;0&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <parameter>man.th.extra3.suppress</parameter> is
non-zero, then the <literal>extra3</literal> part of the
<literal>.TH</literal> title line header/footer is
suppressed.</para>

<para>The content of the <literal>extra3</literal> field is usually
displayed in the middle header of the page and is typically a "manual
name"; for example, "GTK+ User's Manual" (from the
<literal>gtk-options(7)</literal> man page).</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.th.title.max.length">
<refmeta>
<refentrytitle>man.th.title.max.length</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.title.max.length</refname>
<refpurpose>Maximum length of title in header/footer</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.title.max.length.frag">
&lt;xsl:param name="man.th.title.max.length"&gt;20&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the maximum permitted length of the title part of the
man-page <literal>.TH</literal> title line header/footer. If the title
exceeds the maxiumum specified, it is truncated down to the maximum
permitted length.</para>

<refsection><info><title>Details</title></info>
  

<para>Every man page generated using the DocBook stylesheets has a
title line, specified using the <literal>TH</literal> roff
macro. Within that title line, there is always, at a minimum, a title,
followed by a section value (representing a man "section" -- usually
just a number).</para>

<para>The title and section are displayed, together, in the visible
header of each page. Where in the header they are displayed depends on
OS the man page is viewed on, and on what version of nroff/groff/man
is used for viewing the page. But, at a minimum and across all
systems, the title and section are displayed on the right-hand column
of the header. On many systems -- those with a modern groff, including
Linux systems -- they are displayed twice: both in the left and right
columns of the header.</para>

<para>So if the length of the title exceeds a certain percentage of
the column width in which the page is viewed, the left and right
titles can end up overlapping, making them unreadable, or breaking to
another line, which doesn't look particularly good.</para>

<para>So the stylesheets provide the
<parameter>man.th.title.max.length</parameter> parameter as a means
for truncating titles that exceed the maximum length that can be
viewing properly in a page header.</para>

<para>The default value is reasonable but somewhat arbitrary. If you
have pages with long titles, you may want to experiment with changing
the value in order to achieve the correct aesthetic results.</para>
</refsection>

</refsection>
</refentry>

<refentry version="5.0" id="man.th.extra2.max.length">
<refmeta>
<refentrytitle>man.th.extra2.max.length</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.extra2.max.length</refname>
<refpurpose>Maximum length of extra2 in header/footer</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.extra2.max.length.frag">
&lt;xsl:param name="man.th.extra2.max.length"&gt;30&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the maximum permitted length of the
<literal>extra2</literal> part of the man-page part of the
<literal>.TH</literal> title line header/footer. If the
<literal>extra2</literal> content exceeds the maxiumum specified, it
is truncated down to the maximum permitted length.</para>

<para>The content of the <literal>extra2</literal> field is usually
displayed in the left footer of the page and is typically "source"
data indicating the software system or product that the item
documented in the man page belongs to, often in the form
<replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>;
for example, "GTK+ 1.2" (from the <literal>gtk-options(7)</literal>
man page).</para>

<para>The default value for this parameter is reasonable but somewhat
arbitrary. If you are processing pages with long "source" information,
you may want to experiment with changing the value in order to achieve
the correct aesthetic results.</para>
</refsection>
</refentry>

<refentry version="5.0" id="man.th.extra3.max.length">
<refmeta>
<refentrytitle>man.th.extra3.max.length</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.th.extra3.max.length</refname>
<refpurpose>Maximum length of extra3 in header/footer</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.th.extra3.max.length.frag">
&lt;xsl:param name="man.th.extra3.max.length"&gt;30&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the maximum permitted length of the
<literal>extra3</literal> part of the man-page <literal>.TH</literal>
title line header/footer. If the <literal>extra3</literal> content
exceeds the maxiumum specified, it is truncated down to the maximum
permitted length.</para>

<para>The content of the <literal>extra3</literal> field is usually
displayed in the middle header of the page and is typically a "manual
name"; for example, "GTK+ User's Manual" (from the
<literal>gtk-options(7)</literal> man page).</para>

<para>The default value for this parameter is reasonable but somewhat
arbitrary. If you are processing pages with long "manual names" -- or
especially if you are processing pages that have both long "title"
parts (command/function, etc. names) <emphasis>and</emphasis> long
manual names -- you may want to experiment with changing the value in
order to achieve the correct aesthetic results.</para>
</refsection>
</refentry>

  </reference><reference id="output" xml:base="../manpages/param.xml">
  <title>Output</title>
<refentry version="5.0" id="man.output.manifest.enabled">
  <refmeta>
    <refentrytitle>man.output.manifest.enabled</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>man.output.manifest.enabled</refname>
    <refpurpose>Generate a manifest file?</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="man.output.manifest.enabled.frag">&lt;xsl:param name="man.output.manifest.enabled" select="0"&gt;&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

    <para>If non-zero, a list of filenames for man pages generated by
    the stylesheet transformation is written to the file named by the
    <parameter>man.output.manifest.filename</parameter> parameter.</para>

  </refsection>
</refentry>

<refentry version="5.0" id="man.output.manifest.filename">
  <refmeta>
    <refentrytitle>man.output.manifest.filename</refentrytitle>
    <refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>man.output.manifest.filename</refname>
    <refpurpose>Name of manifest file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <programlisting id="man.output.manifest.filename.frag">&lt;xsl:param name="man.output.manifest.filename"&gt;MAN.MANIFEST&lt;/xsl:param&gt;</programlisting>
  </refsynopsisdiv>

  <refsection><info><title>Description</title></info>

    <para>The <parameter>man.output.manifest.filename</parameter> parameter
    specifies the name of the file to which the manpages manifest file
    is written (if the value of the
    <parameter>man.output.manifest.enabled</parameter> parameter is
    non-zero).</para>

  </refsection>
</refentry>

<refentry version="5.0" id="man.output.in.separate.dir">
<refmeta>
<refentrytitle>man.output.in.separate.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.in.separate.dir</refname>
<refpurpose>Output man-page files in separate output directory?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.in.separate.dir.frag">
&lt;xsl:param name="man.output.in.separate.dir" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of <literal>man.output.in.separate.dir</literal>
parameter is non-zero, man-page files are output in a separate
directory, specified by the <parameter>man.output.base.dir</parameter>
parameter; otherwise, if the value of
<literal>man.output.in.separate.dir</literal> is zero, man-page files
are not output in a separate directory.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.lang.in.name.enabled">
<refmeta>
<refentrytitle>man.output.lang.in.name.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.lang.in.name.enabled</refname>
<refpurpose>Include $LANG value in man-page filename/pathname?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.lang.in.name.enabled.frag">
&lt;xsl:param name="man.output.lang.in.name.enabled" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

  <para>The <parameter>man.output.lang.in.name.enabled</parameter>
  parameter specifies whether a <literal>$lang</literal> value is
  included in man-page filenames and pathnames.</para>

  <para>If the value of
  <parameter>man.output.lang.in.name.enabled</parameter> is non-zero,
  man-page files are output with the <literal>$lang</literal> value
  included in their filenames or pathnames as follows;

  <itemizedlist>
    <listitem>
      <para>if <parameter>man.output.subdirs.enabled</parameter> is
      non-zero, each file is output to, e.g., a
      <filename>man/<replaceable>$lang</replaceable>/man8/foo.8</filename>
      pathname</para>
    </listitem>
    <listitem>
      <para>if <parameter>man.output.subdirs.enabled</parameter> is
      zero, each file is output with a
      <literal>foo.<replaceable>$lang</replaceable>.8</literal>
      filename</para>
    </listitem>
  </itemizedlist>
  </para>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.base.dir">
<refmeta>
<refentrytitle>man.output.base.dir</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.base.dir</refname>
<refpurpose>Specifies separate output directory</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.base.dir.frag">&lt;xsl:param name="man.output.base.dir"&gt;man/&lt;/xsl:param&gt;</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.output.base.dir</parameter> parameter
specifies the base directory into which man-page files are output. The
<parameter>man.output.subdirs.enabled</parameter> parameter controls
whether the files are output in subdirectories within the base
directory.</para>

<note>
  <para>The values of the <parameter>man.output.base.dir</parameter>
  and <parameter>man.output.subdirs.enabled</parameter> parameters are
  used only if the value of
  <parameter>man.output.in.separate.dir</parameter> parameter is
  non-zero. If the value of the
  <parameter>man.output.in.separate.dir</parameter> is zero, man-page
  files are not output in a separate directory.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.subdirs.enabled">
<refmeta>
<refentrytitle>man.output.subdirs.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.subdirs.enabled</refname>
<refpurpose>Output man-page files in subdirectories within base output directory?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.subdirs.enabled.frag">
&lt;xsl:param name="man.output.subdirs.enabled" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>man.output.subdirs.enabled</parameter> parameter
controls whether man-pages files are output in subdirectories within
the base directory specified by the directory specified by the
<parameter>man.output.base.dir</parameter> parameter.</para>

<note>
  <para>The values of the <parameter>man.output.base.dir</parameter>
  and <parameter>man.output.subdirs.enabled</parameter> parameters are
  used only if the value of
  <parameter>man.output.in.separate.dir</parameter> parameter is
  non-zero. If the value of the
  <parameter>man.output.in.separate.dir</parameter> is zero, man-page
  files are not output in a separate directory.</para>
</note>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.quietly">
<refmeta>
<refentrytitle>man.output.quietly</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.quietly</refname>
<refpurpose>Suppress filename messages emitted when generating output?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.quietly.frag">
&lt;xsl:param name="man.output.quietly" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If zero (the default), for each man-page file created, a message
with the name of the file is emitted. If non-zero, the files are
output "quietly" -- that is, the filename messages are
suppressed.</para>

<tip>
  <para>If you are processing a large amount of <tag>refentry</tag>
  content, you may be able to speed up processing significantly by
  setting a non-zero value for
  <parameter>man.output.quietly</parameter>.</para>
</tip>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.encoding">
<refmeta>
<refentrytitle>man.output.encoding</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.encoding</refname>
<refpurpose>Encoding used for man-page output</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.output.encoding.frag">
&lt;xsl:param name="man.output.encoding"&gt;UTF-8&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the encoding to use for files generated
by the manpages stylesheet. Not all processors support specification
of this parameter.</para>

<important>
  <para>If the value of the <parameter>man.charmap.enabled</parameter>
  parameter is non-zero (the default), keeping the
  <parameter>man.output.encoding</parameter> parameter at its default
  value (<literal>UTF-8</literal>) or setting it to
  <literal>UTF-16</literal> <emphasis role="bold">does not cause your
  man pages to be output in raw UTF-8 or UTF-16</emphasis> -- because
  any Unicode characters for which matches are found in the enabled
  character map will be replaced with roff escape sequences before the
  final man-page files are generated.</para>

  <para>So if you want to generate "real" UTF-8 man pages, without any
  character substitution being performed on your content, you need to
  set <parameter>man.charmap.enabled</parameter> to zero (which will
  completely disable character-map processing). </para>

  <para>You may also need to set
  <parameter>man.charmap.enabled</parameter> to zero if you want to
  output man pages in an encoding other than <literal>UTF-8</literal>
  or <literal>UTF-16</literal>. Character-map processing is based on
  Unicode character values and may not work with other output
  encodings.</para>
</important>

</refsection>
</refentry>

<refentry version="5.0" id="man.output.better.ps.enabled">
<refmeta>
<refentrytitle>man.output.better.ps.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.output.better.ps.enabled</refname>
<refpurpose>Enable enhanced print/PostScript output?</refpurpose>
</refnamediv>
<refsynopsisdiv>
<programlisting id="man.output.better.ps.enabled.frag">
&lt;xsl:param name="man.output.better.ps.enabled"&gt;0&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.output.better.ps.enabled</parameter> parameter is
non-zero, certain markup is embedded in each generated man page
such that PostScript output from the <command>man -Tps</command>
command for that page will include a number of enhancements
designed to improve the quality of that output.</para>

<para>If <parameter>man.output.better.ps.enabled</parameter> is
zero (the default), no such markup is embedded in generated man
pages, and no enhancements are included in the PostScript
output generated from those man pages by the <command>man
 -Tps</command> command.</para>

<warning>
  <para>The enhancements provided by this parameter rely on
    features that are specific to groff (GNU troff) and that are
    not part of &#8220;classic&#8221; AT&amp;T troff or any of its
    derivatives. Therefore, any man pages you generate with this
    parameter enabled will be readable only on systems on which
    the groff (GNU troff) program is installed, such as GNU/Linux
    systems. The pages <emphasis role="bold">will not not be
      readable on systems on with the classic troff (AT&amp;T
      troff) command is installed</emphasis>.</para>
</warning>

<para>The value of this parameter only affects PostScript output
  generated from the <command>man</command> command. It has no
  effect on output generated using the FO backend.</para>

<tip>
  <para>You can generate PostScript output for any man page by
    running the following command:</para>
  <programlisting>  man <replaceable>FOO</replaceable> -Tps &gt; <replaceable>FOO</replaceable>.ps</programlisting>
  <para>You can then generate PDF output by running the following
    command:</para>
  <programlisting>  ps2pdf <replaceable>FOO</replaceable>.ps</programlisting>
</tip>

</refsection>
</refentry>

  </reference><reference id="other" xml:base="../manpages/param.xml">
  <title>Other</title>
<refentry version="5.0" id="man.table.footnotes.divider">
<refmeta>
<refentrytitle>man.table.footnotes.divider</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.table.footnotes.divider</refname>
<refpurpose>Specifies divider string that appears before table footnotes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.table.footnotes.divider.frag">
&lt;xsl:param name="man.table.footnotes.divider"&gt;----&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>In each table that contains footenotes, the string specified by
the <parameter>man.table.footnotes.divider</parameter> parameter is
output before the list of footnotes for the table.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.subheading.divider.enabled">
<refmeta>
<refentrytitle>man.subheading.divider.enabled</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.subheading.divider.enabled</refname>
<refpurpose>Add divider comment to roff source before/after subheadings?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.subheading.divider.enabled.frag">
&lt;xsl:param name="man.subheading.divider.enabled"&gt;0&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.subheading.divider.enabled</parameter> parameter is
non-zero, the contents of the
<parameter>man.subheading.divider</parameter> parameter are used to
add a "divider" before and after subheadings in the roff
output. <emphasis role="bold">The divider is not visisble in the
rendered man page</emphasis>; it is added as a comment, in the source,
simply for the purpose of increasing reability of the source.</para>

<para>If <parameter>man.subheading.divider.enabled</parameter> is zero
(the default), the subheading divider is suppressed.</para>

</refsection>
</refentry>

<refentry version="5.0" id="man.subheading.divider">
<refmeta>
<refentrytitle>man.subheading.divider</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>man.subheading.divider</refname>
<refpurpose>Specifies string to use as divider comment before/after subheadings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="man.subheading.divider.frag">
&lt;xsl:param name="man.subheading.divider"&gt;========================================================================&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If the value of the
<parameter>man.subheading.divider.enabled</parameter> parameter is
non-zero, the contents of the
<parameter>man.subheading.divider</parameter> parameter are used to
add a "divider" before and after subheadings in the roff
output. <emphasis role="bold">The divider is not visisble in the
rendered man page</emphasis>; it is added as a comment, in the source,
simply for the purpose of increasing reability of the source.</para>

<para>If <parameter>man.subheading.divider.enabled</parameter> is zero
(the default), the subheading divider is suppressed.</para>

</refsection>
</refentry>

  </reference>
    </part>
    <part id="roundtrip">
      <?dbhtml dir="roundtrip"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../roundtrip/param.xml">Roundtrip Parameter Reference</title>
      <partintro id="roundtripintro">
        
      <para xml:base="../roundtrip/param.xml">This is reference documentation for all user-configurable
      parameters in the DocBook &#8220;Roundtrip&#8221; Stylesheets (for
      transforming DocBook to WordML, OpenDocument, and Apple Pages,
      and for converting from those formats back to DocBook).</para>
    
      </partintro>
      
  
<refentry version="5.0" id="wordml.template" xml:base="../roundtrip/param.xml">
<refmeta>
<refentrytitle>wordml.template</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>wordml.template</refname>
<refpurpose>Specify the template WordML document</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="wordml.template.frag">
&lt;xsl:param name="wordml.template"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>wordml.template</parameter> parameter specifies a WordML document to use as a template for the generated document.  The template document is used to define the (extensive) headers for the generated document, in particular the paragraph and character styles that are used to format the various elements.  Any content in the template document is ignored.</para>

<para>A template document is used in order to allow maintenance of the paragraph and character styles to be done using Word itself, rather than these XSL stylesheets.</para>

</refsection>
</refentry>

<refentry version="5.0" id="pages.template" xml:base="../roundtrip/param.xml">
<refmeta>
<refentrytitle>pages.template</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>pages.template</refname>
<refpurpose>Specify the template Pages document</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="pages.template.frag">
&lt;xsl:param name="pages.template"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>The <parameter>pages.template</parameter> parameter specifies a Pages (the Apple word processing application) document to use as a template for the generated document.  The template document is used to define the (extensive) headers for the generated document, in particular the paragraph and character styles that are used to format the various elements.  Any content in the template document is ignored.</para>

<para>A template document is used in order to allow maintenance of the paragraph and character styles to be done using Pages itself, rather than these XSL stylesheets.</para>

</refsection>
</refentry>

  
    </part>
    <part id="slides"><title>Slides Parameter Reference</title>
      <?dbhtml dir="slides"?>
      <?dbhtml filename="index.html"?>
      <partintro id="slidesintro">
        <para>This is reference documentation for all
          user-configurable parameters in the DocBook XSL Slides
          stylesheets (for generating HTML and PDF slide
          presentations).</para>
        <note>
          <para>The Slides stylesheet for HTML output is a
            customization layer of the DocBook XSL HTML
            stylesheet; the Slides stylesheet for FO output is a
            customization layer of the DocBook XSL FO stylesheet.
            Therefore, in addition to the slides-specific
            parameters listed in this section, you can also use a
            number of <link xlink:href="../html">HTML stylesheet
              parameters</link> and <link xlink:href="../fo">FO
              stylesheet parameters</link> to control Slides
            output.</para>
        </note>
      </partintro>
      <reference id="xhtml" xml:base="../slides/xhtml/param.xml">
  <title>XHTML: General Params</title>

<refentry version="5.0" id="disable.collapsible">
<refmeta>
<refentrytitle>disable.collapsible</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>disable.collapsible</refname>
<refpurpose>Specifies whether collapsible rendering is enabled</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="disable.collapsible.frag">
    &lt;xsl:param name="disable.collapsible"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether elements marked as
  collapsible are generated as such in the output document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="disable.incremental">
<refmeta>
<refentrytitle>disable.incremental</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>disable.incremental</refname>
<refpurpose>Specifies whether incremental rendering is enabled</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="disable.incremental.frag">
    &lt;xsl:param name="disable.incremental"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether elements marked as
  incremental are generated as such in the output document.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.copyright">
<refmeta>
<refentrytitle>generate.copyright</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.copyright</refname>
<refpurpose>Specifies whether copyright is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.copyright.frag">
    &lt;xsl:param name="generate.copyright"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether the copyright info is generated
  in the footer area.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.foilgroup.numbered.toc">
<refmeta>
<refentrytitle>generate.foilgroup.numbered.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.foilgroup.numbered.toc</refname>
<refpurpose>Specifies whether foilgroups have a numbered TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.foilgroup.numbered.toc.frag">
    &lt;xsl:param name="generate.foilgroup.numbered.toc"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If TOC generation is turned on, this parameter specifies
  whether foilgroups have a numbered TOC. If disabled, TOC items
  will be bulleted, not numbered.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.foilgroup.toc">
<refmeta>
<refentrytitle>generate.foilgroup.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.foilgroup.toc</refname>
<refpurpose>Specifies whether foilgroups have a TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.foilgroup.toc.frag">
    &lt;xsl:param name="generate.foilgroup.toc"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether foilgroups will
  contain a table of contents of the included foils.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.handoutnotes">
<refmeta>
<refentrytitle>generate.handoutnotes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.handoutnotes</refname>
<refpurpose>Specifies whether handoutnotes are generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.handoutnotes.frag">
    &lt;xsl:param name="generate.handoutnotes"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether handoutnotes shall
  be generated to the output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.pubdate">
<refmeta>
<refentrytitle>generate.pubdate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.pubdate</refname>
<refpurpose>Specifies whether the pubdate is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.pubdate.frag">
    &lt;xsl:param name="generate.pubdate"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether the publication date is generated
  in the footer area.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.speakernotes">
<refmeta>
<refentrytitle>generate.speakernotes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.speakernotes</refname>
<refpurpose>Specifies whether speakernotes are generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.speakernotes.frag">
    &lt;xsl:param name="generate.speakernotes"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether speakernotes shall
  be generated to the output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.titlepage">
<refmeta>
<refentrytitle>generate.titlepage</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.titlepage</refname>
<refpurpose>Specifies whether titlepage is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.titlepage.frag">
    &lt;xsl:param name="generate.titlepage"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether titlepage is generated
  for the presentation.</para>

</refsection>
</refentry>

<refentry version="5.0" id="mml.embedding.mode">
<refmeta>
<refentrytitle>mml.embedding.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inline</refmiscinfo>
<refmiscinfo class="other" otherclass="value">object</refmiscinfo>
<refmiscinfo class="other" otherclass="value">image</refmiscinfo>
<refmiscinfo class="other" otherclass="value">link</refmiscinfo>
<refmiscinfo class="other" otherclass="value">iframe</refmiscinfo>
<refmiscinfo class="other" otherclass="value">embed</refmiscinfo>
</refmeta>
<refnamediv>
<refname>mml.embedding.mode</refname>
<refpurpose>Specifies how inline MathML is processed</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="mml.embedding.mode.frag">
    &lt;xsl:param name="mml.embedding.mode"&gt;inline&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies how inline MathML formulas
  are embedded into the output document.</para>

<variablelist>
  <varlistentry>
    <term>inline</term>
    <listitem>
      <para>Content is copied over inline with its namespace.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>object</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>object</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>image</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>img</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>link</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>a</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>iframe</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>iframe</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>embed</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>embed</markup> element.</para>
    </listitem>
  </varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="svg.embedding.mode">
<refmeta>
<refentrytitle>svg.embedding.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inline</refmiscinfo>
<refmiscinfo class="other" otherclass="value">object</refmiscinfo>
<refmiscinfo class="other" otherclass="value">image</refmiscinfo>
<refmiscinfo class="other" otherclass="value">link</refmiscinfo>
<refmiscinfo class="other" otherclass="value">iframe</refmiscinfo>
<refmiscinfo class="other" otherclass="value">embed</refmiscinfo>
</refmeta>
<refnamediv>
<refname>svg.embedding.mode</refname>
<refpurpose>Specifies how inline SVG is processed</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="svg.embedding.mode.frag">
    &lt;xsl:param name="svg.embedding.mode"&gt;object&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies how inline SVG graphics
  are embedded into the output document.</para>

<variablelist>
  <varlistentry>
    <term>inline</term>
    <listitem>
      <para>Content is copied over inline with its namespace.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>object</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>object</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>image</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>img</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>link</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>a</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>iframe</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>iframe</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>embed</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>embed</markup> element.</para>
    </listitem>
  </varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="user.css">
<refmeta>
<refentrytitle>user.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>user.css</refname>
<refpurpose>Specifies the path to user-supplied CSS</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="user.css.frag">
    &lt;xsl:param name="user.css"&gt;user.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the path from where the
  CSS styling is read.  This file can be used to
  add additional styling to the slides.</para>

</refsection>
</refentry>

<refentry version="5.0" id="wrap.slidecontent">
<refmeta>
<refentrytitle>wrap.slidecontent</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>wrap.slidecontent</refname>
<refpurpose>Specifies whether the foil content is wrapped into a div</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="wrap.slidecontent.frag">
    &lt;xsl:param name="wrap.slidecontent"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether the foil content is wrapped into
  a div so that additional styling can be applied.</para>

</refsection>
</refentry>

</reference><reference id="s5" xml:base="../slides/xhtml/param.xml">
  <title>XHTML: S5 Params</title>

<refentry version="5.0" id="s5.controls">
<refmeta>
<refentrytitle>s5.controls</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.controls</refname>
<refpurpose>Specifies whether S5 controls are visible</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.controls.frag">
    &lt;xsl:param name="s5.controls"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether S5 navigation controls are
  visible by default.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.defaultview">
<refmeta>
<refentrytitle>s5.defaultview</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">slideshow</refmiscinfo>
<refmiscinfo class="other" otherclass="value">outline</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.defaultview</refname>
<refpurpose>Specifies the default S5 view</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.defaultview.frag">
    &lt;xsl:param name="s5.defaultview"&gt;slideshow&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies, which is the default view
  in the generated S5 presentation.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.opera.css">
<refmeta>
<refentrytitle>s5.opera.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.opera.css</refname>
<refpurpose>Specifies the name of the S5 Opera-specific CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.opera.css.frag">
    &lt;xsl:param name="s5.opera.css"&gt;opera.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the S5 Opera-specific
  CSS file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.outline.css">
<refmeta>
<refentrytitle>s5.outline.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.outline.css</refname>
<refpurpose>Specifies the name of the S5 outline CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.outline.css.frag">
    &lt;xsl:param name="s5.outline.css"&gt;outline.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the S5 outline CSS file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.path.prefix">
<refmeta>
<refentrytitle>s5.path.prefix</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.path.prefix</refname>
<refpurpose>Specifies the path to S5 files</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.path.prefix.frag">
    &lt;xsl:param name="s5.path.prefix"&gt;files/s5/ui/default/&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the path where S5 CSS and
  JavaScript files reside. All the CSS and JavaScript paths
  will be generated relative to this directory.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.print.css">
<refmeta>
<refentrytitle>s5.print.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.print.css</refname>
<refpurpose>Specifies the name of the S5 print CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.print.css.frag">
    &lt;xsl:param name="s5.print.css"&gt;print.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the S5 print CSS file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.slides.css">
<refmeta>
<refentrytitle>s5.slides.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.slides.css</refname>
<refpurpose>Specifies the name of the S5 slides CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.slides.css.frag">
    &lt;xsl:param name="s5.slides.css"&gt;slides.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the S5 slides CSS file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="s5.slides.js">
<refmeta>
<refentrytitle>s5.slides.js</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>s5.slides.js</refname>
<refpurpose>Specifies the name of the S5 slides JavaScript file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="s5.slides.js.frag">
    &lt;xsl:param name="s5.slides.js"&gt;slides.js&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the S5 slides JavaScript
  file.</para>

</refsection>
</refentry>

</reference><reference id="slidy" xml:base="../slides/xhtml/param.xml">
  <title>XHTML: Slidy Params</title>

<refentry version="5.0" id="slidy.duration">
<refmeta>
<refentrytitle>slidy.duration</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slidy.duration</refname>
<refpurpose>Specifies the duration of the presentation</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slidy.duration.frag">
    &lt;xsl:param name="slidy.duration"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the duration of the presentation
  in minutes. A JavaScript clock will count down to help the
  speaker in not running out of time. Can be disabled if set to 0.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slidy.path.prefix">
<refmeta>
<refentrytitle>slidy.path.prefix</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slidy.path.prefix</refname>
<refpurpose>Specifies the path to Slidy files</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slidy.path.prefix.frag">
    &lt;xsl:param name="slidy.path.prefix"&gt;files/slidy/&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the path where Slidy CSS and
  JavaScript files reside. All the CSS and JavaScript paths
  will be generated relative to this directory.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slidy.slidy.css">
<refmeta>
<refentrytitle>slidy.slidy.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slidy.slidy.css</refname>
<refpurpose>Specifies the name of the main Slidy CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slidy.slidy.css.frag">
    &lt;xsl:param name="slidy.slidy.css"&gt;styles/slidy.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the main Slidy CSS file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slidy.slidy.js">
<refmeta>
<refentrytitle>slidy.slidy.js</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slidy.slidy.js</refname>
<refpurpose>Specifies the name of the Slidy JavaScript file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slidy.slidy.js.frag">
    &lt;xsl:param name="slidy.slidy.js"&gt;scripts/slidy.js&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the Slidy JavaScript file.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slidy.user.css">
<refmeta>
<refentrytitle>slidy.user.css</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slidy.user.css</refname>
<refpurpose>Specifies the name of the Slidy user CSS file</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slidy.user.css.frag">
    &lt;xsl:param name="slidy.user.css"&gt;styles/w3c-blue.css&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies the name of the Slidy user CSS file.</para>

</refsection>
</refentry>

</reference>
      <reference id="fo" xml:base="../slides/fo/param.xml">
  <title>FO: General Params</title>

<refentry version="5.0" id="foil.title.master">
<refmeta>
<refentrytitle>foil.title.master</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.title.master</refname>
<refpurpose>Specifies unitless font size to use for foil titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="foil.title.master.frag">
&lt;xsl:param name="foil.title.master"&gt;36&lt;/xsl:param&gt;
&lt;!-- Inconsistant use of point size? --&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies a unitless font size to use for foil titles; used in
combination with the <parameter>foil.title.size</parameter>
parameter.</para>
</refsection>
</refentry>

<refentry version="5.0" id="foil.title.size">
<refmeta>
<refentrytitle>foil.title.size</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.title.size</refname>
<refpurpose>Specifies font size to use for foil titles, including units</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.title.size.frag">
    &lt;xsl:param name="foil.title.size"&gt;
      &lt;xsl:value-of select="$foil.title.master"&gt;&lt;/xsl:value-of&gt;&lt;xsl:text&gt;pt&lt;/xsl:text&gt;
    &lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter combines the value of the
<parameter>foil.title.master</parameter> parameter with a unit
specification. The default unit is <literal>pt</literal>
(points).</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.copyright">
<refmeta>
<refentrytitle>generate.copyright</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.copyright</refname>
<refpurpose>Specifies whether copyright is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.copyright.frag">
    &lt;xsl:param name="generate.copyright"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether the copyright info is generated
  in the footer area.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.foilgroup.numbered.toc">
<refmeta>
<refentrytitle>generate.foilgroup.numbered.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.foilgroup.numbered.toc</refname>
<refpurpose>Specifies whether foilgroups have a numbered TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.foilgroup.numbered.toc.frag">
    &lt;xsl:param name="generate.foilgroup.numbered.toc"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>If TOC generation is turned on, this parameter specifies
  whether foilgroups have a numbered TOC. If disabled, TOC items
  will be bulleted, not numbered.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.foilgroup.toc">
<refmeta>
<refentrytitle>generate.foilgroup.toc</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.foilgroup.toc</refname>
<refpurpose>Specifies whether foilgroups have a TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.foilgroup.toc.frag">
    &lt;xsl:param name="generate.foilgroup.toc"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether foilgroups will
  contain a table of contents of the included foils.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.handoutnotes">
<refmeta>
<refentrytitle>generate.handoutnotes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.handoutnotes</refname>
<refpurpose>Specifies whether handoutnotes are generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.handoutnotes.frag">
    &lt;xsl:param name="generate.handoutnotes"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether handoutnotes shall
  be generated to the output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.page.number">
<refmeta>
<refentrytitle>generate.page.number</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">full<alt>1/2</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">compact<alt>1</alt></refmiscinfo>
<refmiscinfo class="other" otherclass="value">no</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.page.number</refname>
<refpurpose>Specifies whether page numbers are generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.page.number.frag">
    &lt;xsl:param name="generate.page.number"&gt;compact&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies how page numbers are generated in
  the footer area.</para>

<variablelist>
  <varlistentry>
    <term>no</term>
    <listitem>
      <para>No page numbers generated at all.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>full</term>
    <listitem>
      <para>Current page number, a slash and the total number of pages</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>compact</term>
    <listitem>
      <para>Current page number only</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>no</term>
    <listitem>
      <para>No page numbers generated at all.</para>
    </listitem>
  </varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="generate.pubdate">
<refmeta>
<refentrytitle>generate.pubdate</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.pubdate</refname>
<refpurpose>Specifies whether the pubdate is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.pubdate.frag">
    &lt;xsl:param name="generate.pubdate"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether the publication date is generated
  in the footer area.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.speakernotes">
<refmeta>
<refentrytitle>generate.speakernotes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.speakernotes</refname>
<refpurpose>Specifies whether speakernotes are generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.speakernotes.frag">
    &lt;xsl:param name="generate.speakernotes"&gt;0&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether speakernotes shall
  be generated to the output.</para>

</refsection>
</refentry>

<refentry version="5.0" id="generate.titlepage">
<refmeta>
<refentrytitle>generate.titlepage</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.titlepage</refname>
<refpurpose>Specifies whether titlepage is generated</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="generate.titlepage.frag">
    &lt;xsl:param name="generate.titlepage"&gt;1&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies whether titlepage is generated
  for the presentation.</para>

</refsection>
</refentry>

<refentry version="5.0" id="mml.embedding.mode">
<refmeta>
<refentrytitle>mml.embedding.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">inline</refmiscinfo>
<refmiscinfo class="other" otherclass="value">external-graphic</refmiscinfo>
<refmiscinfo class="other" otherclass="value">instream-foreign-object</refmiscinfo>
</refmeta>
<refnamediv>
<refname>mml.embedding.mode</refname>
<refpurpose>Specifies how inline MathML is processed</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="mml.embedding.mode.fo.frag">
    &lt;xsl:param name="mml.embedding.mode"&gt;external-graphic&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies how inline MathML formulas
  are embedded into the output document.</para>

<variablelist>
  <varlistentry>
    <term>inline</term>
    <listitem>
      <para>Content is copied over inline with its namespace.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>external-graphic</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
	by an <markup>external-graphic</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>instream-foreign-object</term>
    <listitem>
      <para>Content is copied over with its namespace inside an
	<markup>instream-foreign-object</markup> element.</para>
    </listitem>
  </varlistentry>
</variablelist>

</refsection>
</refentry>

<refentry version="5.0" id="slide.font.family">
<refmeta>
<refentrytitle>slide.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slide.font.family</refname>
<refpurpose>Specifies font family to use for slide bodies</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="slide.font.family.frag">
&lt;xsl:param name="slide.font.family"&gt;Helvetica&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the font family to use for slides bodies.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slide.title.font.family">
<refmeta>
<refentrytitle>slide.title.font.family</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="list-type">open</refmiscinfo>
<refmiscinfo class="other" otherclass="value">serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">sans-serif</refmiscinfo>
<refmiscinfo class="other" otherclass="value">monospace</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slide.title.font.family</refname>
<refpurpose>Specifies font family to use for slide titles</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="slide.title.font.family.frag">
&lt;xsl:param name="slide.title.font.family"&gt;Helvetica&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>Specifies the font family to use for slides titles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="svg.embedding.mode">
<refmeta>
<refentrytitle>svg.embedding.mode</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">list</refmiscinfo>
<refmiscinfo class="other" otherclass="value">external-graphic</refmiscinfo>
<refmiscinfo class="other" otherclass="value">instream-foreign-object</refmiscinfo>
</refmeta>
<refnamediv>
<refname>svg.embedding.mode</refname>
<refpurpose>Specifies how inline SVG is processed</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="svg.embedding.mode.fo.frag">
    &lt;xsl:param name="svg.embedding.mode"&gt;instream-foreign-object&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies how inline SVG graphics
  are embedded into the output document.</para>

<variablelist>
  <varlistentry>
    <term>inline</term>
    <listitem>
      <para>Content is copied over inline with its namespace.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>external-graphic</term>
    <listitem>
      <para>Content is extracted into an externel file and referenced
        by an <markup>external-graphic</markup> element.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>instream-foreign-object</term>
    <listitem>
      <para>Content is copied over with its namespace inside an
        <markup>instream-foreign-object</markup> element.</para>
    </listitem>
  </varlistentry>
</variablelist>

</refsection>
</refentry>

</reference><reference id="propsets" xml:base="../slides/fo/param.xml">
  <title>FO: Property Sets</title>
<refentry version="5.0" id="foil.header.properties">
<refmeta>
<refentrytitle>foil.header.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.header.properties</refname>
<refpurpose>Specifies properties for foil header area</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.header.properties.frag">
    &lt;xsl:attribute-set name="foil.header.properties"&gt;
      &lt;xsl:attribute name="background-color"&gt;white&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="color"&gt;black&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-family"&gt;
        &lt;xsl:value-of select="$slide.title.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;12pt&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil header area.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.master.properties">
<refmeta>
<refentrytitle>foil.master.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.master.properties</refname>
<refpurpose>Specifies properties for foil master</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.master.properties.frag">
    &lt;xsl:attribute-set name="foil.master.properties"&gt;
      &lt;xsl:attribute name="page-width"&gt;
        &lt;xsl:value-of select="$page.width"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="page-height"&gt;
        &lt;xsl:value-of select="$page.height"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-top"&gt;
        &lt;xsl:value-of select="$page.margin.top"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-bottom"&gt;
        &lt;xsl:value-of select="$page.margin.bottom"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-left"&gt;
        &lt;xsl:value-of select="$page.margin.inner"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-right"&gt;
        &lt;xsl:value-of select="$page.margin.outer"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil master.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.page-sequence.properties">
<refmeta>
<refentrytitle>foil.page-sequence.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.page-sequence.properties</refname>
<refpurpose>Specifies properties for foil page-sequence</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.page-sequence.properties.frag">
    &lt;xsl:attribute-set name="foil.page-sequence.properties"&gt;
      &lt;xsl:attribute name="hyphenate"&gt;
        &lt;xsl:value-of select="$hyphenate"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for foil page-sequence.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.properties">
<refmeta>
<refentrytitle>foil.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.properties</refname>
<refpurpose>Specifies properties for all foils</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.properties.frag">
    &lt;xsl:attribute-set name="foil.properties"&gt;
      &lt;xsl:attribute name="font-family"&gt;
        &lt;xsl:value-of select="$slide.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-{$direction.align.start}"&gt;1in&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-{$direction.align.end}"&gt;1in&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;
        &lt;xsl:value-of select="$body.font.size"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties that are applied to all foils.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.region-after.properties">
<refmeta>
<refentrytitle>foil.region-after.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.region-after.properties</refname>
<refpurpose>Specifies properties for foil region-after</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.region-after.properties.frag">
    &lt;xsl:attribute-set name="foil.region-after.properties"&gt;
      &lt;xsl:attribute name="extent"&gt;
        &lt;xsl:value-of select="$region.after.extent"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="display-align"&gt;after&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil region-after.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.region-before.properties">
<refmeta>
<refentrytitle>foil.region-before.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.region-before.properties</refname>
<refpurpose>Specifies properties for foil region-before</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.region-before.properties.frag">
    &lt;xsl:attribute-set name="foil.region-before.properties"&gt;
      &lt;xsl:attribute name="extent"&gt;
        &lt;xsl:value-of select="$region.before.extent"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="display-align"&gt;
        &lt;xsl:value-of select="'before'"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil region-before.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.region-body.properties">
<refmeta>
<refentrytitle>foil.region-body.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.region-body.properties</refname>
<refpurpose>Specifies properties for foil region-body</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.region-body.properties.frag">
    &lt;xsl:attribute-set name="foil.region-body.properties"&gt;
      &lt;xsl:attribute name="margin-bottom"&gt;
        &lt;xsl:value-of select="$body.margin.bottom"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-top"&gt;
        &lt;xsl:value-of select="$body.margin.top"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="column-count"&gt;
        &lt;xsl:value-of select="$column.count.body"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil region-body.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.subtitle.properties">
<refmeta>
<refentrytitle>foil.subtitle.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.subtitle.properties</refname>
<refpurpose>Specifies properties for all foil subtitles</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.subtitle.properties.frag">
    &lt;xsl:attribute-set name="foil.subtitle.properties"&gt;
      &lt;xsl:attribute name="font-family"&gt;
        &lt;xsl:value-of select="$slide.title.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;
        &lt;xsl:value-of select="$foil.title.master * 0.8"&gt;&lt;/xsl:value-of&gt;&lt;xsl:text&gt;pt&lt;/xsl:text&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;12pt&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties that are applied to all foil subtitles.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.title.properties">
<refmeta>
<refentrytitle>foil.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.title.properties</refname>
<refpurpose>Specifies properties for foil title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.title.properties.frag">
    &lt;xsl:attribute-set name="foil.title.properties"&gt;
      &lt;xsl:attribute name="font-size"&gt;
        &lt;xsl:value-of select="$foil.title.size"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil title.</para>

</refsection>
</refentry>

<refentry version="5.0" id="foil.footer.properties">
<refmeta>
<refentrytitle>foil.footer.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>foil.footer.properties</refname>
<refpurpose>Specifies properties for slides footer</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="foil.footer.properties.frag">
    &lt;xsl:attribute-set name="foil.footer.properties"&gt;&lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the foil footer.</para>

</refsection>
</refentry>

<refentry version="5.0" id="handoutnotes.properties">
<refmeta>
<refentrytitle>handoutnotes.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>footnote.properties</refname>
<refpurpose>Properties applied to handoutnotes
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="handoutnotes.properties.frag">
&lt;xsl:attribute-set name="handoutnotes.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to handoutnotes.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.properties">
<refmeta>
<refentrytitle>slides.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.properties</refname>
<refpurpose>Specifies properties for all slides</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.properties.frag">
    &lt;xsl:attribute-set name="slides.properties"&gt;
      &lt;xsl:attribute name="font-family"&gt;
        &lt;xsl:value-of select="$slide.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties that are applied to all slides.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.master.properties">
<refmeta>
<refentrytitle>slides.titlepage.master.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.master.properties</refname>
<refpurpose>Specifies properties for slides titlepage master</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.master.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.master.properties"&gt;
      &lt;xsl:attribute name="page-width"&gt;
        &lt;xsl:value-of select="$page.width"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="page-height"&gt;
        &lt;xsl:value-of select="$page.height"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-top"&gt;
        &lt;xsl:value-of select="$page.margin.top"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-bottom"&gt;
        &lt;xsl:value-of select="$page.margin.bottom"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-left"&gt;
        &lt;xsl:value-of select="$page.margin.inner"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-right"&gt;
        &lt;xsl:value-of select="$page.margin.outer"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the slides titlepage master.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.region-body.properties">
<refmeta>
<refentrytitle>slides.titlepage.region-body.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.region-body.properties</refname>
<refpurpose>Specifies properties for slides titlepage region-body</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.region-body.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.region-body.properties"&gt;
      &lt;xsl:attribute name="margin-bottom"&gt;0pt&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="margin-top"&gt;0pt&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="column-count"&gt;
        &lt;xsl:value-of select="$column.count.body"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the slides titlepage region-body.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.corpauthor.properties">
<refmeta>
<refentrytitle>slides.titlepage.corpauthor.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.corpauthor.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.corpauthor.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.corpauthor.properties"&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;20.736pt&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the corpauthor on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.title.properties">
<refmeta>
<refentrytitle>slides.titlepage.title.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.title.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.title.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.title.properties"&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="padding-top"&gt;1.5in&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="keep-with-next"&gt;always&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;
	&lt;xsl:value-of select="$foil.title.size"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-weight"&gt;bold&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-family"&gt;
	&lt;xsl:value-of select="$slide.title.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the title on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.subtitle.properties">
<refmeta>
<refentrytitle>slides.titlepage.subtitle.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.subtitle.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.subtitle.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.subtitle.properties"&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-family"&gt;
	&lt;xsl:value-of select="$slide.title.font.family"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the subtitle on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.author.properties">
<refmeta>
<refentrytitle>slides.titlepage.author.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.author.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.author.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.author.properties"&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;20.736pt&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the author on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.pubdate.properties">
<refmeta>
<refentrytitle>slides.titlepage.pubdate.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.pubdate.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.pubdate.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.pubdate.properties"&gt;
      &lt;xsl:attribute name="text-align"&gt;center&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="space-after"&gt;1em&lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="font-size"&gt;17.28pt&lt;/xsl:attribute&gt;
    &lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the pubdate on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="slides.titlepage.authorgroup.properties">
<refmeta>
<refentrytitle>slides.titlepage.authorgroup.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>slides.titlepage.authorgroup.properties</refname>
<refpurpose>Specifies properties for slides titlepage title</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <programlisting id="slides.titlepage.authorgroup.properties.frag">
    &lt;xsl:attribute-set name="slides.titlepage.authorgroup.properties"&gt;&lt;/xsl:attribute-set&gt;
  </programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This parameter specifies properties for the authorgroup on the default
  titlepage.</para>

</refsection>
</refentry>

<refentry version="5.0" id="speakernotes.properties">
<refmeta>
<refentrytitle>speakernotes.properties</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>  
<refnamediv>
<refname>footnote.properties</refname>
<refpurpose>Properties applied to speakernotes
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="speakernotes.properties.frag">
&lt;xsl:attribute-set name="speakernotes.properties"&gt;&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>

<para>This attribute set is applied to speakernotes.</para>

</refsection>
</refentry>

</reference>
    </part>
    <part id="website">
      <?dbhtml dir="website"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../website/param.xml">Website Parameter Reference</title>
      <partintro id="websiteintro">
        
  <para xml:base="../website/param.xml">This is reference documentation for all user-configurable
    parameters in the DocBook XSL Website stylesheet (for
    generating websites from DocBook XML sources). Note that the
    Website stylesheet is a customization layer of the DocBook XSL
    HTML stylesheet.  Therefore, in addition to the
    Website-specific parameters listed in this section, you can
    also use a number of <link xlink:href="../html/">HTML
     stylesheet parameters</link> to control Website output.</para>

      </partintro>
      <reference id="general" xml:base="../website/param.xml">
<title>General Parameters</title>
<refentry version="5.0" id="autolayout-file">
<refmeta>
<refentrytitle>autolayout-file</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>autolayout-file</refname>
<refpurpose>Identifies the autolayout.xml file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="autolayout-file.frag">
&lt;xsl:param name="autolayout-file"&gt;autolayout.xml&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>When the source pages are spread over several directories, this
parameter can be set (for example, from the command line of a batch-mode
XSLT processor) to indicate the location of the autolayout.xml file.</para>
<para>FIXME: for browser-based use, there needs to be a PI for this...
</para>
</refsection>
</refentry>

<refentry version="5.0" id="body.attributes">
<refmeta>
<refentrytitle>body.attributes</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">attribute set</refmiscinfo>
</refmeta>
<refnamediv>
<refname>body.attributes</refname>
<refpurpose>DEPRECATED</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="body.attributes.frag">
&lt;xsl:attribute-set name="body.attributes"&gt;
  &lt;xsl:attribute name="bgcolor"&gt;white&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="text"&gt;black&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="link"&gt;#0000FF&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="vlink"&gt;#840084&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="alink"&gt;#0000FF&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>DEPRECATED</para>
</refsection>
</refentry>

<refentry version="5.0" id="currentpage.marker">
<refmeta>
<refentrytitle>currentpage.marker</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>currentpage.marker</refname>
<refpurpose>The text symbol used to mark the current page</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="currentpage.marker.frag">
&lt;xsl:param name="currentpage.marker"&gt;@&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>Character to use as identifying the current page in </para>
</refsection>
</refentry>

<refentry version="5.0" id="dry-run">
<refmeta>
<refentrytitle>dry-run</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>dry-run</refname>
<refpurpose>Indicates that no files should be produced</refpurpose>
</refnamediv>
<refsynopsisdiv>
  <programlisting id="dry-run.frag">
    &lt;xsl:param name="dry-run" select="0"&gt;&lt;/xsl:param&gt;
  </programlisting>
</refsynopsisdiv>
<refsection><info><title>Description</title></info>
<para>When using the XSLT processor to manage dependencies and construct
the website, this parameter can be used to suppress the generation of
new and updated files. Effectively, this allows you to see what the
stylesheet would do, without actually making any changes.</para>
<para>Only applies when XSLT-based chunking is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="feedback.href">
<refmeta>
<refentrytitle>feedback.href</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>feedback.href</refname>
<refpurpose>HREF (URI) for feedback link</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="feedback.href.frag">
&lt;xsl:param name="feedback.href"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The <varname>feedback.href</varname> value is used as the value
for the <tag class="attribute">href</tag> attribute on the feedback
link. If <varname>feedback.href</varname>
is empty, no feedback link is generated.</para>
</refsection>
</refentry>

<refentry version="5.0" id="feedback.link.text">
<refmeta>
<refentrytitle>feedback.link.text</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>feedback.link.text</refname>
<refpurpose>The text of the feedback link</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="feedback.link.text.frag">
&lt;xsl:param name="feedback.link.text"&gt;Feedback&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The contents of this variable is used as the text of the feedback
link if <varname>feedback.href</varname> is not empty. If
<varname>feedback.href</varname> is empty, no feedback link is
generated.</para>
</refsection>
</refentry>

<refentry version="5.0" id="feedback.with.ids">
<refmeta>
<refentrytitle>feedback.with.ids</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>feedback.with.ids</refname>
<refpurpose>Toggle use of IDs in feedback</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="feedback.with.ids.frag">
&lt;xsl:param name="feedback.with.ids" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>feedback.with.ids</varname> is non-zero, the ID of the
current page will be added to the feedback link. This can be used, for
example, if the <varname>feedback.href</varname> is a CGI script.</para>
</refsection>
</refentry>

<refentry version="5.0" id="filename-prefix">
<refmeta>
<refentrytitle>filename-prefix</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>filename-prefix</refname>
<refpurpose>Prefix added to all filenames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="filename-prefix.frag">
&lt;xsl:param name="filename-prefix"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>To produce the <quote>text-only</quote> (that is, non-tabular) layout
of a website simultaneously with the tabular layout, the filenames have to
be distinguished. That's accomplished by adding the
<varname>filename-prefix</varname> to the front of each filename.</para>
</refsection>
</refentry>

<refentry version="5.0" id="footer.hr">
<refmeta>
<refentrytitle>footer.hr</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.hr</refname>
<refpurpose>Toggle &lt;HR&gt; before footer</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="footer.hr.frag">
&lt;xsl:param name="footer.hr" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If non-zero, an &lt;HR&gt; is generated at the bottom of each web page,
before the footer.</para>
</refsection>
</refentry>

<refentry version="5.0" id="header.hr">
<refmeta>
<refentrytitle>header.hr</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.hr</refname>
<refpurpose>Toggle &lt;HR&gt; after header</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="header.hr.frag">
&lt;xsl:param name="header.hr" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If non-zero, an &lt;HR&gt; is generated at the bottom of each web page,
before the footer.</para>
</refsection>
</refentry>

<refentry version="5.0" id="output-root">
<refmeta>
<refentrytitle>output-root</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>output-root</refname>
<refpurpose>Specifies the root directory of the website</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="output-root.frag">
&lt;xsl:param name="output-root"&gt;.&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>When using the XSLT processor to manage dependencies and construct
the website, this parameter can be used to indicate the root directory
where the resulting pages are placed.</para>
<para>Only applies when XSLT-based chunking is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="rebuild-all">
<refmeta>
<refentrytitle>rebuild-all</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>rebuild-all</refname>
<refpurpose>Indicates that all files should be produced</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="rebuild-all.frag">
&lt;xsl:param name="rebuild-all" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>When using the XSLT processor to manage dependencies and construct
the website, this parameter can be used to regenerate the whole website,
updating even pages that don't appear to need to be updated.</para>
<para>The dependency extension only looks at the source documents. So
if you change something in the stylesheet, for example, that has a global
effect, you can use this parameter to force the stylesheet to rebuild the
whole website.
</para>
<para>Only applies when XSLT-based chunking is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="sequential.links">
<refmeta>
<refentrytitle>sequential.links</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>sequential.links</refname>
<refpurpose>Make sequentional links?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="sequential.links.frag">
&lt;xsl:param name="sequential.links" select="0"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>FIXME</para>
</refsection>
</refentry>

<refentry version="5.0" id="suppress.homepage.title">
<refmeta>
<refentrytitle>suppress.homepage.title</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.homepage.title</refname>
<refpurpose>Suppress title on homepage?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="suppress.homepage.title.frag">
&lt;xsl:param name="suppress.homepage.title" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>FIXME:If non-zero, the title on the homepage is suppressed?</para>
</refsection>
</refentry>

<refentry version="5.0" id="table.spacer.image">
<refmeta>
<refentrytitle>table.spacer.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.spacer.image</refname>
<refpurpose>Invisible pixel for tabular accessibility</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="table.spacer.image.frag">
&lt;xsl:param name="table.spacer.image"&gt;graphics/spacer.gif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>This is the 1x1 pixel, transparent pixel used for <link xlink:href="http://diveintoaccessibility.org/day_10_presenting_your_main_content_first.html">the table trick</link> to increase the accessibility of the tabular
website presentation.</para>
</refsection>
</refentry>

</reference><reference id="nav" xml:base="../website/param.xml">
<title>Navigation Parameters</title>
<refentry version="5.0" id="banner.before.navigation">
<refmeta>
<refentrytitle>banner.before.navigation</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>banner.before.navigation</refname>
<refpurpose>Put banner before navigation?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="banner.before.navigation.frag">
&lt;xsl:param name="banner.before.navigation" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>FIXME</para>
</refsection>
</refentry>

<refentry version="5.0" id="navbgcolor">
<refmeta>
<refentrytitle>navbgcolor</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navbgcolor</refname>
<refpurpose>The background color of the navigation TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navbgcolor.frag">
&lt;xsl:param name="navbgcolor"&gt;#4080FF&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The background color of the navigation TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="navbodywidth">
<refmeta>
<refentrytitle>navbodywidth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navbodywidth</refname>
<refpurpose>Specifies the width of the navigation table body</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navbodywidth.frag">
&lt;xsl:param name="navbodywidth"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The width of the body column.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="nav.table.summary">
<refmeta>
<refentrytitle>nav.table.summary</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nav.table.summary</refname>
<refpurpose>HTML Table summary attribute value for navigation tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="nav.table.summary.frag">
&lt;xsl:param name="nav.table.summary"&gt;Navigation&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The value of this parameter is used as the value of the table
summary attribute for the navigation table.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="navtocwidth">
<refmeta>
<refentrytitle>navtocwidth</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navtocwidth</refname>
<refpurpose>Specifies the width of the navigation table TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="navtocwidth.frag">
&lt;xsl:param name="navtocwidth"&gt;220&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The width, in pixels, of the navigation column.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="textbgcolor">
<refmeta>
<refentrytitle>textbgcolor</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">color</refmiscinfo>
</refmeta>
<refnamediv>
<refname>textbgcolor</refname>
<refpurpose>The background color of the table body</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="textbgcolor.frag">
&lt;xsl:param name="textbgcolor"&gt;white&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>The background color of the table body.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

</reference><reference id="toc" xml:base="../website/param.xml">
<title>ToC Parameters</title>
<refentry version="5.0" id="toc.blank.graphic">
<refmeta>
<refentrytitle>toc.blank.graphic</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.blank.graphic</refname>
<refpurpose>Use graphic for "blanks" in TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.blank.graphic.frag">
&lt;xsl:param name="toc.blank.graphic" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If non-zero, "blanks" in the the TOC will be accomplished
with the graphic identified by <varname>toc.spacer.image</varname>.
</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.blank.image">
<refmeta>
<refentrytitle>toc.blank.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.blank.image</refname>
<refpurpose>The image for "blanks" in the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.blank.image.frag">
&lt;xsl:param name="toc.blank.image"&gt;graphics/blank.gif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.blank.graphic</varname> is non-zero, this image
will be used to for "blanks" in the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.blank.text">
<refmeta>
<refentrytitle>toc.blank.text</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.blank.text</refname>
<refpurpose>The text for "blanks" in the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.blank.text.frag">
&lt;xsl:param name="toc.blank.text"&gt;&#160;&#160;&#160;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.blank.graphic</varname> is zero, this text string
will be used for "blanks" in the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.pointer.graphic">
<refmeta>
<refentrytitle>toc.pointer.graphic</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.pointer.graphic</refname>
<refpurpose>Use graphic for TOC pointer?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.pointer.graphic.frag">
&lt;xsl:param name="toc.pointer.graphic" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If non-zero, the "pointer" in the TOC will be displayed
with the graphic identified by <varname>toc.pointer.image</varname>.
</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.pointer.image">
<refmeta>
<refentrytitle>toc.pointer.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.pointer.image</refname>
<refpurpose>The image for the "pointer" in the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.pointer.image.frag">
&lt;xsl:param name="toc.pointer.image"&gt;graphics/arrow.gif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.pointer.graphic</varname> is non-zero, this image
will be used for the "pointer" in the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.pointer.text">
<refmeta>
<refentrytitle>toc.pointer.text</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.pointer.text</refname>
<refpurpose>The text for the "pointer" in the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.pointer.text.frag">
&lt;xsl:param name="toc.pointer.text"&gt;&#160;&gt;&#160;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.pointer.graphic</varname> is zero, this text string
will be used to display the "pointer" in the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.spacer.graphic">
<refmeta>
<refentrytitle>toc.spacer.graphic</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.spacer.graphic</refname>
<refpurpose>Use graphic for TOC spacer?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.spacer.graphic.frag">
&lt;xsl:param name="toc.spacer.graphic" select="1"&gt;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If non-zero, the indentation in the TOC will be accomplished
with the graphic identified by <varname>toc.spacer.image</varname>.
</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.spacer.image">
<refmeta>
<refentrytitle>toc.spacer.image</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">filename</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.spacer.image</refname>
<refpurpose>The image for spacing the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.spacer.image.frag">
&lt;xsl:param name="toc.spacer.image"&gt;graphics/blank.gif&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.spacer.graphic</varname> is non-zero, this image
will be used to indent the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

<refentry version="5.0" id="toc.spacer.text">
<refmeta>
<refentrytitle>toc.spacer.text</refentrytitle>
<refmiscinfo class="other" otherclass="datatype">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.spacer.text</refname>
<refpurpose>The text for spacing the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<programlisting id="toc.spacer.text.frag">
&lt;xsl:param name="toc.spacer.text"&gt;&#160;&#160;&#160;&lt;/xsl:param&gt;
</programlisting>
</refsynopsisdiv>

<refsection><info><title>Description</title></info>
<para>If <varname>toc.spacer.graphic</varname> is zero, this text string
will be used to indent the TOC.</para>
<para>Only applies with the tabular presentation is being used.</para>
</refsection>
</refentry>

</reference>
    </part>
   <!-- Prepare WebHelp output
    <part xml:id="webhelp">
      <?dbhtml dir="webhelp"?>
      <?dbhtml filename="index.html"?>
      <xi:include href="../webhelp/param.xml" xpointer="xpointer(/book/info/title)" />
      <partintro xml:id="webhelpintro">
        <xi:include href="../webhelp/param.xml" xpointer="xpointer(/book/info/abstract/node())" />
      </partintro>
      <xi:include href="../webhelp/param.xml" xpointer="xpointer(/book/reference)" />
    </part>
   -->
  </book>
 
  <book id="pi"><title>DocBook XSL Stylesheets User&#160;Reference:&#160;PIs</title>
    <?dbhtml dir="pi"?>
    <?dbhtml filename="index.html"?>
    <info>
      <abstract>
        <para>This is generated reference documentation for all
          user-specifiable processing instructions in the DocBook
          XSL stylesheets.
          <note>
            <para>You add these PIs at particular points in a document to
              cause specific &#8220;exceptions&#8221; to formatting/output behavior. To
              make global changes in formatting/output behavior across an
              entire document, it&#8217;s better to do it by setting an
              appropriate stylesheet parameter (if there is one).</para>
          </note>
        </para>
      </abstract>
    </info>
    <part id="pi-html">
      <info xml:base="../html/pi.xml"><title>HTML Processing Instruction Reference</title>
    <releaseinfo role="meta">
      $Id: pi.xsl 9022 2011-07-14 19:21:36Z bobstayton $
    </releaseinfo>
  </info>
  <partintro id="partintro" xml:base="../html/pi.xml">
    <title>Introduction</title>
    
<para>This is generated reference documentation for all
      user-specifiable processing instructions (PIs) in the DocBook
      XSL stylesheets for HTML output.
      <note>
        
<para>You add these PIs at particular points in a document to
          cause specific &#8220;exceptions&#8221; to formatting/output behavior. To
          make global changes in formatting/output behavior across an
          entire document, it&#8217;s better to do it by setting an
          appropriate stylesheet parameter (if there is one).</para>

      </note>
    </para>

  </partintro>

<refentry id="dbhtml_background-color" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_background-color</refname>
<refpurpose>Sets background color for an image</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml background-color="<replaceable>color</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml background-color</tag> PI before or
      after an image (<tag>graphic</tag>, <tag>inlinegraphic</tag>,
      <tag>imagedata</tag>, or <tag>videodata</tag> element) as a
      sibling to the element, to set a background color for the
      image.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>background-color="<replaceable>color</replaceable>"</term>
        <listitem>
          
<para>An HTML color value</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="BGcolor.html">Background color</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_bgcolor" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_bgcolor</refname>
<refpurpose>Sets background color on a CALS table row or table cell</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml bgcolor="<replaceable>color</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml bgcolor</tag> PI as child of a CALS table row
      or cell to set a background color for that table row or cell.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>bgcolor="<replaceable>color</replaceable>"</term>
        <listitem>
          
<para>An HTML color value</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="BGtableColor.html#CellBGColor">Cell background color</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_cellpadding" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_cellpadding</refname>
<refpurpose>Specifies cellpadding in CALS table or qandaset output</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml cellpadding="<replaceable>number</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml cellpadding</tag> PI as a child of a
      CALS <tag>table</tag> or <tag>qandaset</tag> to specify the value
      for the HTML <literal>cellpadding</literal> attribute in the
      output HTML table.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>cellpadding="<replaceable>number</replaceable>"</term>
        <listitem>
          
<para>Specifies the cellpadding</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>html.cellpadding</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="CellSpacing.html">Cell spacing and cell padding</link>,
      <link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_cellspacing" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_cellspacing</refname>
<refpurpose>Specifies cellspacing in CALS table or qandaset output</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml cellspacing="<replaceable>number</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml cellspacing</tag> PI as a child of a
      CALS <tag>table</tag> or <tag>qandaset</tag> to specify the value
      for the HTML <literal>cellspacing</literal> attribute in the
      output HTML table.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>cellspacing="<replaceable>number</replaceable>"</term>
        <listitem>
          
<para>Specifies the cellspacing</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>html.cellspacing</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="CellSpacing.html">Cell spacing and cell padding</link>,
      <link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

    </refsect1></refentry>

<refentry id="dbhtml_class" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_class</refname>
<refpurpose>Set value of the class attribute for a CALS table row</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml class="<replaceable>name</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml class</tag> PI as a child of a
      <tag>row</tag> to specify a <literal>class</literal>
      attribute and value in the HTML output for that row.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>class="<replaceable>name</replaceable>"</term>
        <listitem>
          
<para>Specifies the class name</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="CSSTableCells.html">Table styles in HTML output</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_dir" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_dir</refname>
<refpurpose>Specifies a directory name in which to write files</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml dir="<replaceable>path</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>When chunking output, use the <tag class="xmlpi">dbhtml dir</tag> PI
      as a child of a chunk source to cause the output of that
      chunk to be written to the specified directory; also, use it
      as a child of a <tag>mediaobject</tag> to specify a
      directory into which any long-description files for that
      <tag>mediaobject</tag> will be written.</para>



<para>The output directory specification is inherited by all
chunks of the descendants of the element.  If descendants need
to go to a different directory, then add another 
<tag class="xmlpi">dbhtml dir</tag> processing
instruction as a child of the source element
for that chunk, and specify the path relative to the
ancestor path.</para>



<para>For example, to put most chunk files into 
<filename class="directory">shared</filename>
but one chapter into 
<filename class="directory">exception</filename>
at the same level, use:</para>


<programlisting>&lt;book&gt;
  &lt;?dbhtml dir="shared"?&gt;
  ...
  &lt;chapter&gt;
    &lt;?dbhtml dir="../exception"?&gt;
  &lt;/chapter&gt;
&lt;/book&gt;
</programlisting>


  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>dir="<replaceable>path</replaceable>"</term>
        <listitem>
          
<para>Specifies the pathname for the directory</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>base.dir</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Chunking.html#dbhtmlDirPI">dbhtml dir processing instruction</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_filename" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_filename</refname>
<refpurpose>Specifies a filename for a chunk</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml filename="<replaceable>filename</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>When chunking output, use the <tag class="xmlpi">dbhtml filename</tag>
      PI as a child of a chunk source to specify a filename for
      the output file for that chunk. Include the filename suffix.</para>



<para>You cannot include a directory path in the filename value,
or your links may not work.  Add a 
<tag class="xmlpi">dbhtml dir</tag> processing instruction
to specify the output directory. You can also combine the two
specifications in one processing instruction: 
<tag class="xmlpi">dbhtml dir="mydir" filename="myfile.html"</tag>.</para>


  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>filename="<replaceable>path</replaceable>"</term>
        <listitem>
          
<para>Specifies the filename for the file</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>use.id.as.filename</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Chunking.html#DbhtmlFilenames">dbhtml filenames</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_funcsynopsis-style" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_funcsynopsis-style</refname>
<refpurpose>Specifies presentation style for a funcsynopsis</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml funcsynopsis-style="kr"|"ansi"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml funcsynopsis-style</tag> PI as a child of
      a <tag>funcsynopsis</tag> or anywhere within a funcsynopsis
      to control the presentation style for output of all
      <tag>funcprototype</tag> instances within that funcsynopsis.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>funcsynopsis-style="kr"</term>
        <listitem>
          
<para>Displays <tag>funcprototype</tag> output in K&amp;R style</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>funcsynopsis-style="ansi"</term>
        <listitem>
          
<para>Displays <tag>funcprototype</tag> output in ANSI style</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>funcsynopsis.style</parameter></para>

  </refsect1></refentry>

<refentry id="dbhtml_img.src.path" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_img.src.path</refname>
<refpurpose>Specifies a path to the location of an image file</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml img.src.path="<replaceable>path</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml img.src.path</tag> PI before or
      after an image (<tag>graphic</tag>,
      <tag>inlinegraphic</tag>, <tag>imagedata</tag>, or
      <tag>videodata</tag> element) as a sibling to the element,
      to specify a path to the location of the image; in HTML
      output, the value specified for the
      <code>img.src.path</code> attribute is prepended to the
      filename.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>img.src.path="<replaceable>path</replaceable>"</term>
        <listitem>
          
<para>Specifies the pathname to prepend to the name of the image file</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>img.src.path</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="GraphicsLocations.html#UsingFileref">Using fileref</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_label-width" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_label-width</refname>
<refpurpose>Specifies the label width for a qandaset</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml label-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml label-width</tag> PI as a child of a
      <tag>qandaset</tag> to specify the width of labels.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>label-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the label width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_linenumbering.everyNth" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_linenumbering.everyNth</refname>
<refpurpose>Specifies interval for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml linenumbering.everyNth="<replaceable>N</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml linenumbering.everyNth</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the interval at which lines are numbered.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.everyNth="<replaceable>N</replaceable>"</term>
        <listitem>
          
<para>Specifies numbering interval; a number is output
            before every <replaceable>N</replaceable>th line</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.everyNth</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_linenumbering.separator" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_linenumbering.separator</refname>
<refpurpose>Specifies separator text for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml linenumbering.separator="<replaceable>text</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml linenumbering.separator</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the separator text output between the line numbers and content.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.separator="<replaceable>text</replaceable>"</term>
        <listitem>
          
<para>Specifies the text (zero or more characters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.separator</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_linenumbering.width" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_linenumbering.width</refname>
<refpurpose>Specifies width for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml linenumbering.width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml linenumbering.width</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the width set aside for line numbers.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the width (inluding units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.width</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_list-presentation" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_list-presentation</refname>
<refpurpose>Specifies presentation style for a variablelist or
    segmentedlist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml list-presentation="list"|"table"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml list-presentation</tag> PI as a child of
      a <tag>variablelist</tag> or <tag>segmentedlist</tag> to
      control the presentation style for the list (to cause it, for
      example, to be displayed as a table).</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>list-presentation="list"</term>
        <listitem>
          
<para>Displays the list as a list</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>list-presentation="table"</term>
        <listitem>
          
<para>Displays the list as a table</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<itemizedlist>
      <listitem>
        
<para><parameter>variablelist.as.table</parameter></para>

      </listitem>
      <listitem>
        
<para><parameter>segmentedlist.as.table</parameter></para>

      </listitem>
    </itemizedlist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_list-width" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_list-width</refname>
<refpurpose>Specifies the width of a variablelist or simplelist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml list-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml list-width</tag> PI as a child of a
      <tag>variablelist</tag> or a <tag>simplelist</tag> presented
      as a table, to specify the output width.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>list-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the output width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_row-height" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_row-height</refname>
<refpurpose>Specifies the height for a CALS table row</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml row-height="<replaceable>height</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml row-height</tag> PI as a child of a
      <tag>row</tag> to specify the height of the row.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>row-height="<replaceable>height</replaceable>"</term>
        <listitem>
          
<para>Specifies the row height (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="RowHeight.html">Row height</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_start" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_start</refname>
<refpurpose>(obsolete) Sets the starting number on an ordered list</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml start="<replaceable>character</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para><emphasis>This PI is obsolete</emphasis>. The intent of
      this PI was to provide a means for setting a specific starting
      number for an ordered list. Instead of this PI, set a value
      for the <literal>override</literal> attribute on the first
      <tag>listitem</tag> in the list; that will have the same
      effect as what this PI was intended for.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>start="<replaceable>character</replaceable>"</term>
        <listitem>
          
<para>Specifies the character to use as the starting
            number; use 0-9, a-z, A-Z, or lowercase or uppercase
            Roman numerals</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Orderedlists.html#ListStartNum">List starting number</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_stop-chunking" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_stop-chunking</refname>
<refpurpose>Do not chunk any descendants of this element.</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml stop-chunking</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>When generating chunked HTML output, adding this PI as the child of an element that contains elements that would normally be generated on separate pages if generating chunked output causes chunking to stop at this point. No descendants of the current element will be split into new HTML pages:
<programlisting>&lt;section&gt;
&lt;title&gt;Configuring pencil&lt;/title&gt;
&lt;?dbhtml stop-chunking?&gt;

...

&lt;/section&gt;</programlisting>
</para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Chunking.html">Chunking into multiple HTML files</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_table-summary" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_table-summary</refname>
<refpurpose>Specifies summary for CALS table, variablelist, segmentedlist, or qandaset output</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml table-summary="<replaceable>text</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml table-summary</tag> PI as a child of
      a CALS <tag>table</tag>, <tag>variablelist</tag>,
      <tag>segmentedlist</tag>, or <tag>qandaset</tag> to specify
      the text for the HTML <literal>summary</literal> attribute
      in the output HTML table.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>table-summary="<replaceable>text</replaceable>"</term>
        <listitem>
          
<para>Specifies the summary text (zero or more characters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link>,
      <link role="tcg" xlink:href="TableSummary.html">Table summary text</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_table-width" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_table-width</refname>
<refpurpose>Specifies the width for a CALS table</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml table-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml table-width</tag> PI as a child of a
      CALS <tag>table</tag> to specify the width of the table in
      output.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>table-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the table width (including units or as a percentage)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>default.table.width</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Tables.html#TableWidth">Table width</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_term-presentation" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_term-presentation</refname>
<refpurpose>Sets character formatting for terms in a variablelist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml term-presentation="bold"|"italic"|"bold-italic"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml term-presentation</tag> PI as a child
      of a <tag>variablelist</tag> to set character formatting for
      the <tag>term</tag> output of the list.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>term-presentation="<replaceable>bold</replaceable>"</term>
        <listitem>
          
<para>Specifies that terms are displayed in bold</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>term-presentation="<replaceable>italic</replaceable>"</term>
        <listitem>
          
<para>Specifies that terms are displayed in italic</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>term-presentation="<replaceable>bold-italic</replaceable>"</term>
        <listitem>
          
<para>Specifies that terms are displayed in bold-italic</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_term-separator" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_term-separator</refname>
<refpurpose>Specifies separator text among terms in a varlistentry</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml term-separator="<replaceable>text</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml term-separator</tag> PI as a child
      of a <tag>variablelist</tag> to specify the separator text
      among <tag>term</tag> instances.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>term-separator="<replaceable>text</replaceable>"</term>
        <listitem>
          
<para>Specifies the text (zero or more characters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>variablelist.term.separator</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_term-width" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_term-width</refname>
<refpurpose>Specifies the term width for a variablelist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml term-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml term-width</tag> PI as a child of a
      <tag>variablelist</tag> to specify the width for
      <tag>term</tag> output.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>term-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the term width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#VarListFormatting">Variable list formatting in HTML</link></para>

  </refsect1></refentry>

<refentry id="dbhtml_toc" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml_toc</refname>
<refpurpose>Specifies whether a TOC should be generated for a qandaset</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml toc="0"|"1"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml toc</tag> PI as a child of a
      <tag>qandaset</tag> to specify whether a table of contents
      (TOC) is generated for the <tag>qandaset</tag>.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>toc="0"</term>
        <listitem>
          
<para>If zero, no TOC is generated</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>toc="1"</term>
        <listitem>
          
<para>If <code>1</code> (or any non-zero value),
            a TOC is generated</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="QandAtoc.html">Q and A list of questions</link>,
      <link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

  </refsect1></refentry>

<refentry id="dbcmdlist" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbcmdlist</refname>
<refpurpose>Generates a hyperlinked list of commands</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbcmdlist</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbcmdlist</tag> PI as the child of any
      element (for example, <tag>refsynopsisdiv</tag>) containing multiple
      <tag>cmdsynopsis</tag> instances; a hyperlinked navigational
      &#8220;command list&#8221; will be generated at the top of output for that
      element, enabling users to quickly jump
      to each command synopsis.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<para>[No parameters]</para>

  </refsect1></refentry>

<refentry id="dbfunclist" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbfunclist</refname>
<refpurpose>Generates a hyperlinked list of functions</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfunclist</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfunclist</tag> PI as the child of any
      element (for example, <tag>refsynopsisdiv</tag>) containing multiple
      <tag>funcsynopsis</tag> instances; a hyperlinked
      navigational &#8220;function list&#8221; will be generated at the top of
      output for that element, enabling users to quickly
      jump to to each function synopsis.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<para>[No parameters]</para>

  </refsect1></refentry>

<refentry id="dbhtml-include_href" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhtml-include_href</refname>
<refpurpose>Copies an external well-formed HTML/XML file into current doc</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhtml-include href="<replaceable>URI</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhtml-include href</tag> PI anywhere in a
      document to cause the contents of the file referenced by the
      <code>href</code> pseudo-attribute to be copied/inserted &#8220;as
      is&#8221; into your HTML output at the point in document order
      where the PI occurs in the source.</para>

    <note>
      
<para>The referenced file may contain plain text (as long as
        it is &#8220;wrapped&#8221; in an <tag>html</tag> element &#8212; see the
        note below) or markup in any arbitrary vocabulary,
        including HTML &#8212; but it must conform to XML
        well-formedness constraints (because the feature in XSLT
        1.0 for opening external files, the
        <function>document()</function> function, can only handle
        files that meet XML well-formedness constraints).</para>

      
<para>Among other things, XML well-formedness constraints
        require a document to have <emphasis>a single root
          element</emphasis>. So if the content you want to
        include is plain text or is markup that does
        <emphasis>not</emphasis> have a single root element,
        <emphasis role="strong">wrap the content in an
          <tag>html</tag> element</emphasis>. The stylesheets will
        strip out that surrounding <tag>html</tag> &#8220;wrapper&#8221; when
        they find it, leaving just the content you want to
        insert.</para>

    </note>
  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>href="<replaceable>URI</replaceable>"</term>
        <listitem>
          
<para>Specifies the URI for the file to include; the URI
            can be, for example, a remote <literal>http:</literal>
            URI, or a local filesystem <literal>file:</literal>
            URI</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>textinsert.extension</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="InsertExtHtml.html">Inserting external HTML code</link>,
      <link role="tcg" xlink:href="ExternalCode.html">External code files</link></para>

  </refsect1></refentry>

<refentry id="dbhh" xml:base="../html/pi.xml">
<refnamediv>
<refname>dbhh</refname>
<refpurpose>Sets topic name and topic id for context-sensitive HTML Help</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbhh topicname="<replaceable>name</replaceable>" topicid="<replaceable>id</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbhh</tag> PI as a child of components
      that should be used as targets for context-sensitive help requests.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>topicname="<replaceable>name</replaceable>"</term>
        <listitem>
          
<para>Specifies a unique string constant that identifies a help topic</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>topicid="<replaceable>id</replaceable>"</term>
        <listitem>
          
<para>Specifies a unique integer value for the <literal>topicname</literal> string</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="HtmlHelp.html#HHContextHelp">Context-sensitive help</link></para>

  </refsect1></refentry>

    </part>
    <part id="pi-fo">
      <info xml:base="../fo/pi.xml"><title>FO Processing Instruction Reference</title>
    <releaseinfo role="meta">
      $Id: pi.xsl 9267 2012-04-03 20:23:45Z bobstayton $
    </releaseinfo>
  </info>

  <partintro id="partintro" xml:base="../fo/pi.xml">
    <title>Introduction</title>

    
<para>This is generated reference documentation for all
      user-specifiable processing instructions (PIs) in the DocBook
      XSL stylesheets for FO output.
      <note>
        
<para>You add these PIs at particular points in a document to
          cause specific &#8220;exceptions&#8221; to formatting/output behavior. To
          make global changes in formatting/output behavior across an
          entire document, it&#8217;s better to do it by setting an
          appropriate stylesheet parameter (if there is one).</para>

      </note>
    </para>

  </partintro>

<refentry id="dbfo_background-color" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_background-color</refname>
<refpurpose>Sets background color for an image</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo background-color="<replaceable>color</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo background-color</tag> PI before or
      after an image (<tag>graphic</tag>, <tag>inlinegraphic</tag>,
      <tag>imagedata</tag>, or <tag>videodata</tag> element) as a
      sibling to the element, to set a background color for the
      image.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>background-color="<replaceable>color</replaceable>"</term>
        <listitem>
          
<para>An HTML color value</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="BGcolor.html">Background color</link></para>

  </refsect1></refentry>

<refentry id="dbfo_bgcolor" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_bgcolor</refname>
<refpurpose>Sets background color on a table row or table cell</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo bgcolor="<replaceable>color</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo bgcolor</tag> PI as child of a table row
      or cell to set a background color for that table row or cell.</para>

    
<para>This PI works for both CALS and HTML tables.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>bgcolor="<replaceable>color</replaceable>"</term>
        <listitem>
          
<para>An HTML color value</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="BGtableColor.html#CellBGColor">Cell background color</link></para>

  </refsect1></refentry>

<refentry id="dbfo_float-type" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_float-type</refname>
<refpurpose>Specifies float behavior for a sidebar</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo float-type="margin.note"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo float-type</tag> PI to specify the float
      behavior for a <tag>sidebar</tag> (to cause the sidebar to be
      displayed as a marginal note).</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>float-type="margin.note"</term>
        <listitem>
          
<para>Specifies that the <tag>sidebar</tag> should be
            displayed as a marginal note.</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>sidebar.float.type</parameter> (parameter),
      <parameter>sidebar.float.width</parameter> (parameter), 
      <parameter>sidebar.properties</parameter> (attribute-set),
      <parameter>sidebar.title.properties</parameter> (attribute-set)
    </para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="SideFloats.html#SidebarFloats">A sidebar as
        side float</link></para>

  </refsect1></refentry>

<refentry id="dbfo_funcsynopsis-style" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_funcsynopsis-style</refname>
<refpurpose>Specifies presentation style for a funcsynopsis</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo funcsynopsis-style="kr"|"ansi"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo funcsynopsis-style</tag> PI as a child of
      a <tag>funcsynopsis</tag> or anywhere within a funcsynopsis
      to control the presentation style for output of all
      <tag>funcprototype</tag> instances within that funcsynopsis.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>funcsynopsis-style="kr"</term>
        <listitem>
          
<para>Displays <tag>funcprototype</tag> output in K&amp;R style</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>funcsynopsis-style="ansi"</term>
        <listitem>
          
<para>Displays <tag>funcprototype</tag> output in ANSI style</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>funcsynopsis.style</parameter></para>

  </refsect1></refentry>

<refentry id="dbfo_glossary-presentation" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_glossary-presentation</refname>
<refpurpose>Specifies presentation style for a glossary</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo glossary-presentation="list"|"blocks"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo glossary-presentation</tag> PI as a child of
      a <tag>glossary</tag> to control its presentation style.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>glossary-presentation="list"</term>
        <listitem>
          
<para>Displays the glossary as a list</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>glossary-presentation="blocks"</term>
        <listitem>
          
<para>Displays the glossary as blocks</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>glossary.as.blocks</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Glossaries.html#GlossaryFormatPrint">Glossary
        formatting in print</link></para>

  </refsect1></refentry>

<refentry id="dbfo_glosslist-presentation" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_glosslist-presentation</refname>
<refpurpose>Specifies presentation style for a glosslist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo glosslist-presentation="list"|"blocks"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo glosslist-presentation</tag> PI as a child of
      a <tag>glosslist</tag> to control its presentation style.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>glosslist-presentation="list"</term>
        <listitem>
          
<para>Displays the glosslist as a list</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>glosslist-presentation="blocks"</term>
        <listitem>
          
<para>Displays the glosslist as blocks</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>glosslist.as.blocks</parameter> </para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Glossaries.html#GlossaryFormatPrint">Glossary
        formatting in print</link></para>

  </refsect1></refentry>

<refentry id="dbfo_glossterm-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_glossterm-width</refname>
<refpurpose>Specifies the glossterm width for a glossary or
    glosslist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo glossterm-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo glossterm-width</tag> PI as a child of a
      <tag>glossary</tag> or <tag>glosslist</tag> to specify the
      width for output of <tag>glossterm</tag> instances in the
      output.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>glossterm-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the glossterm width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>glossterm.width</parameter>,
      <parameter>glossterm.separation</parameter>
    </para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Glossaries.html#GlossaryFormatPrint">Glossary
        formatting in print</link></para>

  </refsect1></refentry>

<refentry id="dbfo_keep-together" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_keep-together</refname>
<refpurpose>Specifies &#8220;keep&#8221; behavior for a table, example,
    figure, equation, procedure, or task</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo keep-together="auto"|"always"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo keep-together</tag> PI as a child of a
      formal object (<tag>table</tag>, <tag>example</tag>,
      <tag>figure</tag>, <tag>equation</tag>, <tag>procedure</tag>, or
      <tag>task</tag>) to specify &#8220;keep&#8221; behavior (to allow the object to 
    &#8220;break&#8221; across a page).</para>

    
<para>The PI also works with <tag>informaltable</tag>, <tag>informalexample</tag>,
      <tag>informalfigure</tag> and <tag>informalequation</tag>.
    </para>


  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>keep-together="auto"</term>
        <listitem>
          
<para>Enables the object to break across a page</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>keep-together="always"</term>
        <listitem>
          
<para>Prevents the object from breaking across a page (the
            default stylesheet behavior)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para>formal.object.properties</para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="PageBreaking.html#KeepTogetherPI">Keep-together processing instruction</link></para>

  </refsect1></refentry>

<refentry id="dbfo_label-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_label-width</refname>
<refpurpose>Specifies the label width for a qandaset, itemizedlist, orderedlist
  or calloutlist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo label-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo label-width</tag> PI as a child of a
      <tag>qandaset</tag>, <tag>itemizedlist</tag>, <tag>orderedlist</tag>, 
      or <tag>calloutlist</tag> to specify the width of labels.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>label-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the label width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

  </refsect1></refentry>

<refentry id="dbfo_linenumbering.everyNth" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_linenumbering.everyNth</refname>
<refpurpose>Specifies interval for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo linenumbering.everyNth="<replaceable>N</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo linenumbering.everyNth</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the interval at which lines are numbered.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.everyNth="<replaceable>N</replaceable>"</term>
        <listitem>
          
<para>Specifies numbering interval; a number is output
            before every <replaceable>N</replaceable>th line</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.everyNth</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbfo_linenumbering.separator" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_linenumbering.separator</refname>
<refpurpose>Specifies separator text for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo linenumbering.separator="<replaceable>text</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo linenumbering.separator</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the separator text output between the line numbers and content.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.separator="<replaceable>text</replaceable>"</term>
        <listitem>
          
<para>Specifies the text (zero or more characters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.separator</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbfo_linenumbering.width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_linenumbering.width</refname>
<refpurpose>Specifies width for line numbers in verbatims</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo linenumbering.width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo linenumbering.width</tag> PI as a child
      of a &#8220;verbatim&#8221; element &#8211; <tag>programlisting</tag>,
      <tag>screen</tag>, <tag>synopsis</tag> &#8212; to specify
      the width set aside for line numbers.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>linenumbering.width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the width (inluding units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>linenumbering.width</parameter></para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="AnnotateListing.html#LineNumbering">Line numbering</link></para>

  </refsect1></refentry>

<refentry id="dbfo_list-presentation" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_list-presentation</refname>
<refpurpose>Specifies presentation style for a variablelist or
    segmentedlist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo list-presentation="list"|"blocks"|"table"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo list-presentation</tag> PI as a child of
      a <tag>variablelist</tag> or <tag>segmentedlist</tag> to
      control the presentation style for the list (to cause it, for
      example, to be displayed as a table).</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>list-presentation="list"</term>
        <listitem>
          
<para>Displays the list as a list</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>list-presentation="blocks"</term>
        <listitem>
          
<para>(<tag>variablelist</tag> only) Displays the list as blocks</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>list-presentation="table"</term>
        <listitem>
          
<para>(<tag>segmentedlist</tag> only) Displays the list as a table</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<itemizedlist>
      <listitem>
        
<para><parameter>variablelist.as.blocks</parameter></para>

      </listitem>
      <listitem>
        
<para><parameter>variablelist.as.table</parameter></para>

      </listitem>
    </itemizedlist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#ListIndents">Variable list formatting in print</link></para>

  </refsect1></refentry>

<refentry id="dbfo_list-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_list-width</refname>
<refpurpose>Specifies the width of a horizontal simplelist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo list-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo list-width</tag> PI as a child of a
      <tag>simplelist</tag> whose <tag class="attribute">class</tag>
      value is <literal>horizontal</literal>, to specify the width
      of the <tag>simplelist</tag>.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>list-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the <tag>simplelist</tag> width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="dbfo_orientation" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_orientation</refname>
<refpurpose>Specifies the orientation for a CALS table row or cell</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo orientation="0"|"90"|"180"|"270"|"-90"|"-180"|"-270"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo orientation</tag> PI as a child of a CALS
      <tag>table</tag> row or cell to specify the orientation
      (rotation) for the row or cell.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>orientation="0"|"90"|"180"|"270"|"-90"|"-180"|"-270"</term>
        <listitem>
          
<para>Specifies the number of degrees by which the cell or
            row is rotated</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="dbfo_pgwide" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_pgwide</refname>
<refpurpose>Specifies if an <tag>equation</tag> or <tag>example</tag> goes across full page width</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo pgwide="0"|"1"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo pgwide</tag> PI as a child of an
      <tag>equation</tag> or <tag>example</tag> to specify that the
      content should rendered across the full width of the page.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>pgwide="0"</term>
        <listitem>
          
<para>If zero, the content is rendered across the current
            text flow</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>pgwide="1"</term>
        <listitem>
          
<para>If <code>1</code> (or any non-zero value), the
            content is rendered across the full width of the page</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>pgwide.properties</parameter></para>

  </refsect1></refentry>

<refentry id="dbfo_rotated-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_rotated-width</refname>
<refpurpose>Specifies the width for a CALS table <tag>entry</tag> or
    <tag>row</tag></refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo rotated-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo rotated-width</tag> PI as a child of 
      <tag>entry</tag> or <tag>row</tag> instance in a CALS table to specify the
      width of that the <tag>entry</tag> or <tag>row</tag>; or
      use it higher up in table to cause the width to be inherited
      recursively down.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>rotated-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the width of a row or cell (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="dbfo_sidebar-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_sidebar-width</refname>
<refpurpose>Specifies the width of a sidebar</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo sidebar-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo sidebar-width</tag> PI as a child of a
      <tag>sidebar</tag> to specify the width of the sidebar.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>sidebar-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the <tag>sidebar</tag> width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>sidebar.float.type parameter</parameter>,
      <parameter>sidebar.float.width parameter</parameter>, 
      <parameter>sidebar.properties attribute-set</parameter>,
      <parameter>sidebar.title.properties</parameter>
    </para>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="SideFloats.html#SidebarFloats">A sidebar as
        side float</link></para>

  </refsect1></refentry>

<refentry id="dbfo_start" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_start</refname>
<refpurpose>(obsolete) Sets the starting number on an ordered list</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo start="<replaceable>character</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para><emphasis>This PI is obsolete</emphasis>. The intent of
      it was to provide a means for setting a specific starting
      number for an ordered list. Instead of this PI, set a value
      for the <literal>override</literal> attribute on the first
      <tag>listitem</tag> in the list; that will have the same
      effect as what this PI was intended for.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>start="<replaceable>character</replaceable>"</term>
        <listitem>
          
<para>Specifies the character to use as the starting
            number; use 0-9, a-z, A-Z, or lowercase or uppercase
            Roman numerals</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Orderedlists.html#ListStartNum">List starting number</link></para>

  </refsect1></refentry>

<refentry id="dbfo_table-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_table-width</refname>
<refpurpose>Specifies the width for a CALS table or for revhistory
    output</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo table-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo table-width</tag> PI as a child or
      sibling of a CALS <tag>table</tag>, or as a child of an
      <tag>informaltable</tag>, <tag>entrytbl</tag>, or
      <tag>revhistory</tag> instance (which is rendered as a table
      in output) to specify the width of the table in output.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>table-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the table width (including units or as a percentage)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Tables.html#TableWidth">Table width</link></para>

  </refsect1></refentry>

<refentry id="dbfo_term-width" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_term-width</refname>
<refpurpose>Specifies the term width for a variablelist</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo term-width="<replaceable>width</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo term-width</tag> PI as a child of a
      <tag>variablelist</tag> to specify the width for
      <tag>term</tag> output.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>term-width="<replaceable>width</replaceable>"</term>
        <listitem>
          
<para>Specifies the term width (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="Variablelists.html#ListIndents">Variable list formatting in print</link></para>

  </refsect1></refentry>

<refentry id="dbfo_toc" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_toc</refname>
<refpurpose>Specifies whether a TOC should be generated for a qandaset</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo toc="0"|"1"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo toc</tag> PI as a child of a
      <tag>qandaset</tag> to specify whether a table of contents
      (TOC) is generated for the <tag>qandaset</tag>.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>toc="0"</term>
        <listitem>
          
<para>If zero, no TOC is generated</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>toc="1"</term>
        <listitem>
          
<para>If <code>1</code> (or any non-zero value),
            a TOC is generated</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="QandAtoc.html">Q and A list of questions</link>,
      <link role="tcg" xlink:href="QandAformat.html">Q and A formatting</link></para>

  </refsect1></refentry>

<refentry id="dbfo-need" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo-need</refname>
<refpurpose>Specify a need for space (a kind of soft page break)</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo-need height="<replaceable>n</replaceable>" [space-before="<replaceable>n</replaceable>"]</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>A &#8220;need&#8221; is a request for space on a page.  If the
      requested space is not available, the page breaks and the
      content that follows the need request appears on the next
      page. If the requested space is available, then no page break
      is inserted.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>height="<replaceable>n</replaceable>"</term>
        <listitem>
          
<para>The amount of height needed (including units)</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>space-before="<replaceable>n</replaceable>"</term>
        <listitem>
          
<para>The amount of extra vertical space to add (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="PageBreaking.html#SoftPageBreaks">Soft page breaks</link></para>

  </refsect1></refentry>

<refentry id="dbfo_row-height" xml:base="../fo/pi.xml">
<refnamediv>
<refname>dbfo_row-height</refname>
<refpurpose>Specifies the height for a CALS table row</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbfo row-height="<replaceable>height</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbfo row-height</tag> PI as a child of a
      <tag>row</tag> to specify the height of the row.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>row-height="<replaceable>height</replaceable>"</term>
        <listitem>
          
<para>Specifies the row height (including units)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="tcg"><title>Related Information in <link xlink:href="http://www.sagehill.net/docbookxsl/">DocBook XSL: The Complete Guide</link></title>
    
<para><link role="tcg" xlink:href="RowHeight.html">Row height</link></para>

  </refsect1></refentry>

    </part>
    <part id="pi-man">
      <info xml:base="../manpages/pi.xml"><title>manpages Processing Instruction Reference</title>
    <releaseinfo role="meta">
      $Id: pi.xsl 7644 2008-01-16 11:04:07Z xmldoc $
    </releaseinfo>
  </info>
  <partintro id="partintro" xml:base="../manpages/pi.xml">
    <title>Introduction</title>
    
<para>This is generated reference documentation for all
      user-specifiable processing instructions (PIs) in the DocBook
      XSL stylesheets for manpages output.
      <note>
        
<para>You add these PIs at particular points in a document to
          cause specific &#8220;exceptions&#8221; to formatting/output behavior. To
          make global changes in formatting/output behavior across an
          entire document, it&#8217;s better to do it by setting an
          appropriate stylesheet parameter (if there is one).</para>

      </note>
    </para>

  </partintro>

<refentry id="dbman_funcsynopsis-style" xml:base="../manpages/pi.xml">
<refnamediv>
<refname>dbman_funcsynopsis-style</refname>
<refpurpose>Specifies presentation style for a funcsynopsis.</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbman funcsynopsis-style="kr"|"ansi"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbman
        funcsynopsis-style</tag> PI as a child of a
      <tag>funcsynopsis</tag> or anywhere within a funcsynopsis
      to control the presentation style for output of all
      <tag>funcprototype</tag> instances within that funcsynopsis.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>funcsynopsis-style="kr"</term>
        <listitem>
          
<para>Displays the <tag>funcprototype</tag> in K&amp;R style</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>funcsynopsis-style="ansi"</term>
        <listitem>
          
<para>Displays the <tag>funcprototype</tag> in ANSI style</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>man.funcsynopsis.style</parameter></para>

  </refsect1></refentry>

    </part>
    <part id="pi-common">
      <info xml:base="../common/pi.xml"><title>Common Processing Instruction Reference</title>
    <releaseinfo role="meta">
      $Id: pi.xsl 8782 2010-07-27 21:15:17Z mzjn $
    </releaseinfo>
  </info>
  <partintro id="partintro" xml:base="../common/pi.xml">
    <title>Introduction</title>
    
<para>This is generated reference documentation for all
      user-specifiable processing instructions (PIs) in the
      &#8220;common&#8221; part of the DocBook XSL stylesheets.
      <note>
        
<para>You add these PIs at particular points in a document to
          cause specific &#8220;exceptions&#8221; to formatting/output behavior. To
          make global changes in formatting/output behavior across an
          entire document, it&#8217;s better to do it by setting an
          appropriate stylesheet parameter (if there is one).</para>

      </note>
    </para>

  </partintro>

<refentry id="dbchoice_choice" xml:base="../common/pi.xml">
<refnamediv>
<refname>dbchoice_choice</refname>
<refpurpose>Generates a localized choice separator</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbchoice choice="and"|"or"|<replaceable>string</replaceable>"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbchoice choice</tag> PI to
      generate an appropriate localized &#8220;choice&#8221; separator (for
      example, <literal>and</literal> or <literal>or</literal>)
      before the final item in an inline <tag>simplelist</tag></para>

    <warning>
      
<para>This PI is a less-than-ideal hack; support for it may
        disappear in the future (particularly if and when a more
        appropriate means for marking up "choice" lists becomes
        available in DocBook).</para>

    </warning>
  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>choice="and"</term>
        <listitem>
          
<para>generates a localized <literal>and</literal> separator</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>choice="or"</term>
        <listitem>
          
<para>generates a localized <literal>or</literal> separator</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>choice="<replaceable>string</replaceable>"</term>
        <listitem>
          
<para>generates a literal <replaceable>string</replaceable> separator</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="dbtimestamp" xml:base="../common/pi.xml">
<refnamediv>
<refname>dbtimestamp</refname>
<refpurpose>Inserts a date timestamp</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbtimestamp format="<replaceable>formatstring</replaceable>" [padding="0"|"1"]</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbtimestamp</tag> PI at any point in a
      source document to cause a date timestamp (a formatted
      string representing the current date and time) to be
      inserted in output of the document.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>format="<replaceable>formatstring</replaceable>"</term>
        <listitem>
          
<para>Specifies format in which the date and time are
            output</para>

        <note>
          
<para>For details of the content of the format string,
            see <link role="tcg" xlink:href="Datetime.html">Date and time</link>.</para>

        </note>
        </listitem>
      </varlistentry>
      <varlistentry><term>padding="0"|"1"</term>
        <listitem>
          
<para>Specifies padding behavior; if non-zero, padding is is added</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="dbtex_delims" xml:base="../common/pi.xml">
<refnamediv>
<refname>dbtex_delims</refname>
<refpurpose>Generates delimiters around embedded TeX equations
    in output</refpurpose>
</refnamediv>
<refsynopsisdiv>

    <synopsis><tag class="xmlpi">dbtex delims="no"|"yes"</tag></synopsis>
  
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Use the <tag class="xmlpi">dbtex delims</tag> PI as a
      child of a <tag>textobject</tag> containing embedded TeX
      markup, to cause that markup to be surrounded by
      <literal>$</literal> delimiter characters in output.</para>

      <warning>
       
<para>This feature is useful for print/PDF output only if you
       use the obsolete and now unsupported PassiveTeX XSL-FO
       engine.</para>

      </warning>
  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>dbtex delims="no"|"yes"</term>
        <listitem>
          
<para>Specifies whether delimiters are output</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1 role="params"><title>Related Global Parameters</title>
    
<para><parameter>tex.math.delims</parameter></para>

  </refsect1></refentry>

    </part>
  </book>
  <book id="developer"><title>DocBook XSL Stylesheets Developer&#160;Reference</title>
    <info>
      <abstract>
        <para>This is technical reference documentation for
          developers using the DocBook XSL Stylesheets. It is not
          intended to be user documentation, but is instead
          provided for developers writing customization layers for
          the stylesheets.</para>
      </abstract>
    </info>
    <part id="lib">
      <?dbhtml dir="lib"?>
      <?dbhtml filename="index.html"?>
      <title xml:base="../lib/lib.xml">XSL Library Template Reference</title>
      <partintro id="libintro">
        <title xml:base="../lib/lib.xml">Introduction</title>
      <para xml:base="../lib/lib.xml">This is technical reference documentation for the
        vocabulary-independent &#8220;library&#8221; templates in the DocBook XSL
        Stylesheets.</para>
      <para xml:base="../lib/lib.xml">This is not intended to be user documentation.  It is
        provided for developers writing customization layers for the
        stylesheets.</para>
    
      </partintro>
      <reference id="generallibrary" xml:base="../lib/lib.xml">
    <title>General Library Templates</title>

<refentry id="dot.count">
<refnamediv>
<refname>dot.count</refname>
<refpurpose>Returns the number of <quote>.</quote> characters in a string</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

  <para>Given a string, the <function>dot.count</function>
    template returns the number of dot/period characters in the
    string. This template is useful, for example, when testing the
    nesting level of nested inline markup (for nested emphasis,
    quotations, etc.).</para>

<programlisting id="dot.count.frag">
&lt;xsl:template name="dot.count"&gt;
  &lt;!-- Returns the number of "." characters in a string --&gt;
  &lt;xsl:param name="string"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="count" select="0"&gt;&lt;/xsl:param&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($string, '.')"&gt;
      &lt;xsl:call-template name="dot.count"&gt;
        &lt;xsl:with-param name="string" select="substring-after($string, '.')"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="count" select="$count+1"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$count"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="copy-string">
<refnamediv>
<refname>copy-string</refname>
<refpurpose>Returns <quote>count</quote> copies of a string</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

  <para>Given a string, the <function>copy-string</function>
    template creates <replaceable>n</replaceable> copies of the
    string, when the value of <replaceable>n</replaceable> is
    given by the <parameter>count</parameter> parameter.</para>

<programlisting id="copy-string.frag">
&lt;xsl:template name="copy-string"&gt;
  &lt;!-- returns 'count' copies of 'string' --&gt;
  &lt;xsl:param name="string"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="count" select="0"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="result"&gt;&lt;/xsl:param&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="$count&gt;0"&gt;
      &lt;xsl:call-template name="copy-string"&gt;
        &lt;xsl:with-param name="string" select="$string"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="count" select="$count - 1"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="result"&gt;
          &lt;xsl:value-of select="$result"&gt;&lt;/xsl:value-of&gt;
          &lt;xsl:value-of select="$string"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$result"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="string.subst">
<refnamediv>
<refname>string.subst</refname>
<refpurpose>Substitute one text string for another in a string</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>string.subst</function> template replaces all
occurances of <parameter>target</parameter> in <parameter>string</parameter>
with <parameter>replacement</parameter> and returns the result.
</para>

<programlisting id="string.subst.frag">
&lt;xsl:template name="string.subst"&gt;
  &lt;xsl:param name="string"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="target"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="replacement"&gt;&lt;/xsl:param&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($string, $target)"&gt;
      &lt;xsl:variable name="rest"&gt;
        &lt;xsl:call-template name="string.subst"&gt;
          &lt;xsl:with-param name="string" select="substring-after($string, $target)"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="target" select="$target"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="replacement" select="$replacement"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:variable&gt;
      &lt;xsl:value-of select="concat(substring-before($string, $target),                                    $replacement,                                    $rest)"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$string"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="xpointer.idref">
<refnamediv>
<refname>xpointer.idref</refname>
<refpurpose>Extract IDREF from an XPointer</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>xpointer.idref</function> template returns the
ID portion of an XPointer which is a pointer to an ID within the current
document, or the empty string if it is not.</para>
<para>In other words, <function>xpointer.idref</function> returns
<quote>foo</quote> when passed either <literal>#foo</literal>
or <literal>#xpointer(id('foo'))</literal>, otherwise it returns
the empty string.</para>

<programlisting id="xpointer.idref.frag">
&lt;xsl:template name="xpointer.idref"&gt;
  &lt;xsl:param name="xpointer"&gt;http://...&lt;/xsl:param&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="starts-with($xpointer, '#xpointer(id(')"&gt;
      &lt;xsl:variable name="rest" select="substring-after($xpointer, '#xpointer(id(')"&gt;&lt;/xsl:variable&gt;
      &lt;xsl:variable name="quote" select="substring($rest, 1, 1)"&gt;&lt;/xsl:variable&gt;
      &lt;xsl:value-of select="substring-before(substring-after($xpointer, $quote), $quote)"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="starts-with($xpointer, '#')"&gt;
      &lt;xsl:value-of select="substring-after($xpointer, '#')"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;!-- otherwise it's a pointer to some other document --&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="idref">
<refnamediv>
<refname>idref</refname>
<refpurpose>Extract IDREF from a linking element</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>idref</function> template accepts 
any <tag>xref</tag> or universally linking element as a parameter
and returns the local
ID that it points to.
If it has a <tag class="attribute">linkend</tag> attribute,
it returns that value.
If it has a <tag class="attribute">xlink:href</tag>, it
returns that value, parsed as needed to extract just
the id reference.  Otherwise it returns an empty string.</para>

<programlisting id="idref.frag">
&lt;xsl:template name="idref"&gt;
  &lt;xsl:param name="xref" select="."&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="linkend" select="$xref/@linkend"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="xpointer"&gt;
    &lt;xsl:call-template name="xpointer.idref"&gt;
      &lt;xsl:with-param name="xpointer" select="$xref/@xlink:href"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:param&gt; 

  &lt;xsl:choose&gt;
    &lt;xsl:when test="string-length($linkend) != 0"&gt;
      &lt;xsl:value-of select="$linkend"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="string-length($xpointer) != 0"&gt;
      &lt;xsl:value-of select="$xpointer"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;!-- otherwise it's a pointer to some other document --&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>




<refentry id="length-magnitude">
<refnamediv>
<refname>length-magnitude</refname>
<refpurpose>Return the unqualified dimension from a length specification</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>length-magnitude</function> template returns the
unqualified length ("20" for "20pt") from a dimension.
</para>

<programlisting id="length-magnitude.frag">
&lt;xsl:template name="length-magnitude"&gt;
  &lt;xsl:param name="length" select="'0pt'"&gt;&lt;/xsl:param&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="string-length($length) = 0"&gt;&lt;/xsl:when&gt;
    &lt;xsl:when test="substring($length,1,1) = '0'                     or substring($length,1,1) = '1'                     or substring($length,1,1) = '2'                     or substring($length,1,1) = '3'                     or substring($length,1,1) = '4'                     or substring($length,1,1) = '5'                     or substring($length,1,1) = '6'                     or substring($length,1,1) = '7'                     or substring($length,1,1) = '8'                     or substring($length,1,1) = '9'                     or substring($length,1,1) = '.'"&gt;
      &lt;xsl:value-of select="substring($length,1,1)"&gt;&lt;/xsl:value-of&gt;
      &lt;xsl:call-template name="length-magnitude"&gt;
        &lt;xsl:with-param name="length" select="substring($length,2)"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="length-units">
<refnamediv>
<refname>length-units</refname>
<refpurpose>Return the units from a length specification</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>length-units</function> template returns the
units ("pt" for "20pt") from a length. If no units are supplied on the
length, the <parameter>defauilt.units</parameter> are returned.</para>

<programlisting id="length-units.frag">
&lt;xsl:template name="length-units"&gt;
  &lt;xsl:param name="length" select="'0pt'"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="default.units" select="'px'"&gt;&lt;/xsl:param&gt;
  &lt;xsl:variable name="magnitude"&gt;
    &lt;xsl:call-template name="length-magnitude"&gt;
      &lt;xsl:with-param name="length" select="$length"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:variable name="units"&gt;
    &lt;xsl:value-of select="substring($length, string-length($magnitude)+1)"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="$units = ''"&gt;
      &lt;xsl:value-of select="$default.units"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$units"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="length-spec">
<refnamediv>
<refname>length-spec</refname>
<refpurpose>Return a fully qualified length specification</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>length-spec</function> template returns the
qualified length from a dimension. If an unqualified length is given,
the <parameter>default.units</parameter> will be added to it.
</para>

<programlisting id="length-spec.frag">
&lt;xsl:template name="length-spec"&gt;
  &lt;xsl:param name="length" select="'0pt'"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="default.units" select="'px'"&gt;&lt;/xsl:param&gt;

  &lt;xsl:variable name="magnitude"&gt;
    &lt;xsl:call-template name="length-magnitude"&gt;
      &lt;xsl:with-param name="length" select="$length"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:variable name="units"&gt;
    &lt;xsl:value-of select="substring($length, string-length($magnitude)+1)"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:value-of select="$magnitude"&gt;&lt;/xsl:value-of&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="$units='cm'                     or $units='mm'                     or $units='in'                     or $units='pt'                     or $units='pc'                     or $units='px'                     or $units='em'"&gt;
      &lt;xsl:value-of select="$units"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = ''"&gt;
      &lt;xsl:value-of select="$default.units"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:message&gt;
        &lt;xsl:text&gt;Unrecognized unit of measure: &lt;/xsl:text&gt;
        &lt;xsl:value-of select="$units"&gt;&lt;/xsl:value-of&gt;
        &lt;xsl:text&gt;.&lt;/xsl:text&gt;
      &lt;/xsl:message&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="length-in-points">
<refnamediv>
<refname>length-in-points</refname>
<refpurpose>Returns the size, in points, of a specified length</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>length-in-points</function> template converts a length
specification to points and returns that value as an unqualified
number.
</para>

<caution>
<para>There is no way for the template to infer the size of an
<literal>em</literal>. It relies on the default <parameter>em.size</parameter>
which is initially <literal>10</literal> (for 10pt).</para>

<para>Similarly, converting pixels to points relies on the
<parameter>pixels.per.inch</parameter> parameter which is initially
<literal>90</literal>.
</para>
</caution>

<programlisting id="length-in-points.frag">
&lt;xsl:template name="length-in-points"&gt;
  &lt;xsl:param name="length" select="'0pt'"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="em.size" select="10"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="pixels.per.inch" select="90"&gt;&lt;/xsl:param&gt;

  &lt;xsl:variable name="magnitude"&gt;
    &lt;xsl:call-template name="length-magnitude"&gt;
      &lt;xsl:with-param name="length" select="$length"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:variable name="units"&gt;
    &lt;xsl:value-of select="substring($length, string-length($magnitude)+1)"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="$units = 'pt'"&gt;
      &lt;xsl:value-of select="$magnitude"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'cm'"&gt;
      &lt;xsl:value-of select="$magnitude div 2.54 * 72.0"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'mm'"&gt;
      &lt;xsl:value-of select="$magnitude div 25.4 * 72.0"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'in'"&gt;
      &lt;xsl:value-of select="$magnitude * 72.0"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'pc'"&gt;
      &lt;xsl:value-of select="$magnitude * 12.0"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'px'"&gt;
      &lt;xsl:value-of select="$magnitude div $pixels.per.inch * 72.0"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="$units = 'em'"&gt;
      &lt;xsl:value-of select="$magnitude * $em.size"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:message&gt;
        &lt;xsl:text&gt;Unrecognized unit of measure: &lt;/xsl:text&gt;
        &lt;xsl:value-of select="$units"&gt;&lt;/xsl:value-of&gt;
        &lt;xsl:text&gt;.&lt;/xsl:text&gt;
      &lt;/xsl:message&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="pi-attribute">
<refnamediv>
<refname>pi-attribute</refname>
<refpurpose>Extract a pseudo-attribute from a PI</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>pi-attribute</function> template extracts a pseudo-attribute
from a processing instruction. For example, given the PI
<quote><literal>&lt;?foo bar="1" baz='red'?&gt;</literal></quote>,</para>
<programlisting>&lt;xsl:call-template name="pi-attribute"&gt;
  &lt;xsl:with-param name="pis" select="processing-instruction('foo')"/&gt;
  &lt;xsl:with-param name="attribute" select="'baz'"/&gt;
&lt;/xsl:call-template&gt;</programlisting>
<para>will return <quote>red</quote>. This template returns the first matching
attribute that it finds. Presented with processing instructions that
contain badly formed pseudo-attributes (missing or unbalanced quotes,
for example), the template may silently return erroneous results.</para>

<programlisting id="pi-attribute.frag">
&lt;xsl:template name="pi-attribute"&gt;
  &lt;xsl:param name="pis" select="processing-instruction('BOGUS_PI')"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="attribute"&gt;filename&lt;/xsl:param&gt;
  &lt;xsl:param name="count"&gt;1&lt;/xsl:param&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="$count&gt;count($pis)"&gt;
      &lt;!-- not found --&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:variable name="pi"&gt;
        &lt;xsl:value-of select="$pis[$count]"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:variable&gt;
      &lt;xsl:variable name="pivalue"&gt;
        &lt;xsl:value-of select="concat(' ', normalize-space($pi))"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:variable&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="contains($pivalue,concat(' ', $attribute, '='))"&gt;
          &lt;xsl:variable name="rest" select="substring-after($pivalue,concat(' ', $attribute,'='))"&gt;&lt;/xsl:variable&gt;
          &lt;xsl:variable name="quote" select="substring($rest,1,1)"&gt;&lt;/xsl:variable&gt;
          &lt;xsl:value-of select="substring-before(substring($rest,2),$quote)"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:call-template name="pi-attribute"&gt;
            &lt;xsl:with-param name="pis" select="$pis"&gt;&lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="attribute" select="$attribute"&gt;&lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="count" select="$count + 1"&gt;&lt;/xsl:with-param&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="lookup.key">
<refnamediv>
<refname>lookup.key</refname>
<refpurpose>Retrieve the value associated with a particular key in a table</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>Given a table of space-delimited key/value pairs,
the <function>lookup.key</function> template extracts the value associated
with a particular key.</para>

<programlisting id="lookup.key.frag">
&lt;xsl:template name="lookup.key"&gt;
  &lt;xsl:param name="key" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="table" select="''"&gt;&lt;/xsl:param&gt;

  &lt;xsl:if test="contains($table, ' ')"&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="substring-before($table, ' ') = $key"&gt;
        &lt;xsl:variable name="rest" select="substring-after($table, ' ')"&gt;&lt;/xsl:variable&gt;
        &lt;xsl:choose&gt;
          &lt;xsl:when test="contains($rest, ' ')"&gt;
            &lt;xsl:value-of select="substring-before($rest, ' ')"&gt;&lt;/xsl:value-of&gt;
          &lt;/xsl:when&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:value-of select="$rest"&gt;&lt;/xsl:value-of&gt;
          &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:call-template name="lookup.key"&gt;
          &lt;xsl:with-param name="key" select="$key"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="table" select="substring-after(substring-after($table,' '), ' ')"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="xpath.location">
<refnamediv>
<refname>xpath.location</refname>
<refpurpose>Calculate the XPath child-sequence to the current node</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>xpath.location</function> template calculates the
absolute path from the root of the tree to the current element node.
</para>

<programlisting id="xpath.location.frag">
&lt;xsl:template name="xpath.location"&gt;
  &lt;xsl:param name="node" select="."&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="path" select="''"&gt;&lt;/xsl:param&gt;

  &lt;xsl:variable name="next.path"&gt;
    &lt;xsl:value-of select="local-name($node)"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:if test="$path != ''"&gt;/&lt;/xsl:if&gt;
    &lt;xsl:value-of select="$path"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="$node/parent::*"&gt;
      &lt;xsl:call-template name="xpath.location"&gt;
        &lt;xsl:with-param name="node" select="$node/parent::*"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="path" select="$next.path"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:text&gt;/&lt;/xsl:text&gt;
      &lt;xsl:value-of select="$next.path"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="comment-escape-string">
<refnamediv>
<refname>comment-escape-string</refname>
<refpurpose>Prepare a string for inclusion in an XML comment</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>comment-escape-string</function> template returns a string
that has been transformed so that it can safely be output as an XML comment.
Internal occurrences of "--" will be replaced with "- -" and a leading and/or
trailing space will be added to the string, if necessary.</para>

<programlisting id="comment-escape-string.frag">
&lt;xsl:template name="comment-escape-string"&gt;
  &lt;xsl:param name="string" select="''"&gt;&lt;/xsl:param&gt;

  &lt;xsl:if test="starts-with($string, '-')"&gt;
    &lt;xsl:text&gt; &lt;/xsl:text&gt;
  &lt;/xsl:if&gt;

  &lt;xsl:call-template name="comment-escape-string.recursive"&gt;
    &lt;xsl:with-param name="string" select="$string"&gt;&lt;/xsl:with-param&gt;
  &lt;/xsl:call-template&gt;

  &lt;xsl:if test="substring($string, string-length($string), 1) = '-'"&gt;
    &lt;xsl:text&gt; &lt;/xsl:text&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="comment-escape-string.recursive">
<refnamediv>
<refname>comment-escape-string.recursive</refname>
<refpurpose>Internal function used by comment-escape-string</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>The <function>comment-escape-string.recursive</function> template is used
by <function>comment-escape-string</function>.</para>

<programlisting id="comment-escape-string.recursive.frag">
&lt;xsl:template name="comment-escape-string.recursive"&gt;
  &lt;xsl:param name="string" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($string, '--')"&gt;
      &lt;xsl:value-of select="substring-before($string, '--')"&gt;&lt;/xsl:value-of&gt;
      &lt;xsl:value-of select="'- -'"&gt;&lt;/xsl:value-of&gt;
      &lt;xsl:call-template name="comment-escape-string.recursive"&gt;
        &lt;xsl:with-param name="string" select="substring-after($string, '--')"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$string"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>
</refsect1>
</refentry>



<refentry id="trim.text">
<refnamediv>
<refname>trim.text</refname>
<refpurpose>Trim leading and trailing whitespace from a text node</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>Given a text node, this function trims leading and trailing
whitespace from it and returns the trimmed contents.</para>

<programlisting id="trim.text.frag">

  &lt;xsl:template name="trim.text"&gt;
    &lt;xsl:param name="contents" select="."&gt;&lt;/xsl:param&gt;
    &lt;xsl:variable name="contents-left-trimmed"&gt;
      &lt;xsl:call-template name="trim-left"&gt;
        &lt;xsl:with-param name="contents" select="$contents"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="contents-trimmed"&gt;
      &lt;xsl:call-template name="trim-right"&gt;
        &lt;xsl:with-param name="contents" select="$contents-left-trimmed"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:value-of select="$contents-trimmed"&gt;&lt;/xsl:value-of&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="trim-left"&gt;
    &lt;xsl:param name="contents"&gt;&lt;/xsl:param&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="starts-with($contents,'
') or                       starts-with($contents,'&#xD;') or                       starts-with($contents,' ') or                       starts-with($contents,'	')"&gt;
        &lt;xsl:call-template name="trim-left"&gt;
          &lt;xsl:with-param name="contents" select="substring($contents, 2)"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:value-of select="$contents"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="trim-right"&gt;
    &lt;xsl:param name="contents"&gt;&lt;/xsl:param&gt;
    &lt;xsl:variable name="last-char"&gt;
      &lt;xsl:value-of select="substring($contents, string-length($contents), 1)"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="($last-char = '
') or                       ($last-char = '&#xD;') or                       ($last-char = ' ') or                       ($last-char = '	')"&gt;
        &lt;xsl:call-template name="trim-right"&gt;
          &lt;xsl:with-param name="contents" select="substring($contents, 1, string-length($contents) - 1)"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:value-of select="$contents"&gt;&lt;/xsl:value-of&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="str.tokenize.keep.delimiters">
<refnamediv>
<refname>str.tokenize.keep.delimiters</refname>
<refpurpose>Tokenize a string while preserving any delimiters</refpurpose>
</refnamediv>
<refsect1><title>Description</title>
<para>Based on the occurrence of one or more delimiter characters,
this function breaks a string into a list of tokens and delimiters,
marking up each of the tokens with a <tag>token</tag> element
and preserving the delimiters as text nodes between the tokens.</para>
<note>
  <para>This function is a very slightly modified version of a
  function from the <link xlink:href="http://www.exslt.org/">EXSLT
  site</link>. The original is available at:

<blockquote><para><link xlink:href="http://www.exslt.org/str/functions/tokenize/str.tokenize.template.xsl"/></para></blockquote>

  The <function>str.tokenize.keep.delimiters</function> function
  differs only in that it preserves the delimiters instead of
  discarding them.</para>
</note>
<programlisting id="str.tokenize.keep.delimiters.frag">
  &lt;xsl:template name="str.tokenize.keep.delimiters"&gt;
    &lt;xsl:param name="string" select="''"&gt;&lt;/xsl:param&gt;
    &lt;xsl:param name="delimiters" select="' '"&gt;&lt;/xsl:param&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="not($string)"&gt;&lt;/xsl:when&gt;
      &lt;xsl:when test="not($delimiters)"&gt;
        &lt;xsl:call-template name="str.tokenize.keep.delimiters-characters"&gt;
          &lt;xsl:with-param name="string" select="$string"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:call-template name="str.tokenize.keep.delimiters-delimiters"&gt;
          &lt;xsl:with-param name="string" select="$string"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="delimiters" select="$delimiters"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template name="str.tokenize.keep.delimiters-characters"&gt;
    &lt;xsl:param name="string"&gt;&lt;/xsl:param&gt;
    &lt;xsl:if test="$string"&gt;
      &lt;ssb:token&gt;&lt;xsl:value-of select="substring($string, 1, 1)"&gt;&lt;/xsl:value-of&gt;&lt;/ssb:token&gt;
      &lt;xsl:call-template name="str.tokenize.keep.delimiters-characters"&gt;
        &lt;xsl:with-param name="string" select="substring($string, 2)"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template name="str.tokenize.keep.delimiters-delimiters"&gt;
    &lt;xsl:param name="string"&gt;&lt;/xsl:param&gt;
    &lt;xsl:param name="delimiters"&gt;&lt;/xsl:param&gt;
    &lt;xsl:variable name="delimiter" select="substring($delimiters, 1, 1)"&gt;&lt;/xsl:variable&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="not($delimiter)"&gt;
        &lt;ssb:token&gt;&lt;xsl:value-of select="$string"&gt;&lt;/xsl:value-of&gt;&lt;/ssb:token&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="contains($string, $delimiter)"&gt;
        &lt;xsl:if test="not(starts-with($string, $delimiter))"&gt;
          &lt;xsl:call-template name="str.tokenize.keep.delimiters-delimiters"&gt;
            &lt;xsl:with-param name="string" select="substring-before($string, $delimiter)"&gt;&lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="delimiters" select="substring($delimiters, 2)"&gt;&lt;/xsl:with-param&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:if&gt;
        &lt;!-- output each delimiter --&gt;
        &lt;xsl:value-of select="$delimiter"&gt;&lt;/xsl:value-of&gt;
        &lt;xsl:call-template name="str.tokenize.keep.delimiters-delimiters"&gt;
          &lt;xsl:with-param name="string" select="substring-after($string, $delimiter)"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="delimiters" select="$delimiters"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:call-template name="str.tokenize.keep.delimiters-delimiters"&gt;
          &lt;xsl:with-param name="string" select="$string"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="delimiters" select="substring($delimiters, 2)"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
</programlisting>
</refsect1>
</refentry>



<refentry id="apply-string-subst-map">
  <refnamediv>
    <refname>apply-string-subst-map</refname>
    <refpurpose>Apply a string-substitution map</refpurpose>
  </refnamediv>
  <refsect1><title>Description</title>
  <para>This function applies a &#8220;string substitution&#8221; map. Use it when
  you want to do multiple string substitutions on the same target
  content. It reads in two things: <parameter>content</parameter>, the
  content on which to perform the substitution, and
  <parameter>map.contents</parameter>, a node set of
  elements (the names of the elements don't matter), with each element
  having the following attributes:
  <itemizedlist>
    <listitem>
      <simpara><tag class="attribute">oldstring</tag>, a string to
      be replaced</simpara>
    </listitem>
    <listitem>
      <simpara><tag class="attribute">newstring</tag>, a string with
      which to replace <tag class="attribute">oldstring</tag></simpara>
    </listitem>
  </itemizedlist>
  The function uses <parameter>map.contents</parameter> to
  do substitution on <parameter>content</parameter>, and then
  returns the modified contents.</para>
  <note>
    <para>This function is a very slightly modified version of Jeni
    Tennison&#8217;s <function>replace_strings</function> function in the
    <link xlink:href="http://www.dpawson.co.uk/xsl/sect2/StringReplace.html#d9351e13">multiple string replacements</link> section of Dave Pawson&#8217;s
    <link xlink:href="http://www.dpawson.co.uk/xsl/index.html">XSLT
    FAQ</link>.</para>
    <para>The <function>apply-string-subst-map</function> function is
    essentially the same function as the
    <function>apply-character-map</function> function; the only
    difference is that in the map that
    <function>apply-string-subst-map</function> expects, <tag class="attribute">oldstring</tag> and <tag class="attribute">newstring</tag> attributes are used instead of
    <tag class="attribute">character</tag> and <tag class="attribute">string</tag> attributes.</para>
  </note>
  <programlisting id="apply-string-subst-map.frag">
    &lt;xsl:template name="apply-string-subst-map"&gt;
      &lt;xsl:param name="content"&gt;&lt;/xsl:param&gt;
      &lt;xsl:param name="map.contents"&gt;&lt;/xsl:param&gt;
      &lt;xsl:variable name="replaced_text"&gt;
        &lt;xsl:call-template name="string.subst"&gt;
          &lt;xsl:with-param name="string" select="$content"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="target" select="$map.contents[1]/@oldstring"&gt;&lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="replacement" select="$map.contents[1]/@newstring"&gt;&lt;/xsl:with-param&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:variable&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="$map.contents[2]"&gt;
          &lt;xsl:call-template name="apply-string-subst-map"&gt;
            &lt;xsl:with-param name="content" select="$replaced_text"&gt;&lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="map.contents" select="$map.contents[position() &gt; 1]"&gt;&lt;/xsl:with-param&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:value-of select="$replaced_text"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;
  </programlisting>
  </refsect1>
</refentry>
</reference><reference id="relativeuri" xml:base="../lib/lib.xml">
<title>Relative URI Functions</title>

<partintro id="partintro"><title>Introduction</title>

<para>These functions manipulate relative URI references.</para>

<para>The following assumptions must hold true:</para>

<orderedlist>
<listitem>
<para>All URIs are relative.</para>
</listitem>
<listitem>
<para>No URI contains the <quote><literal>../</literal></quote> sequence
which would effectively move <quote>up</quote> the hierarchy.</para>
</listitem>
</orderedlist>

<para>If these assumptions do not hold, the results are unpredictable.</para>

</partintro>



<refentry id="count.uri.path.depth">
<refnamediv>
<refname>count.uri.path.depth</refname>
<refpurpose>Count the number of path components in a relative URI</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>This function counts the number of path components in a relative URI.</para>

<programlisting id="count.uri.path.depth.frag">
&lt;xsl:template name="count.uri.path.depth"&gt;
  &lt;xsl:param name="filename" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="count" select="0"&gt;&lt;/xsl:param&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($filename, '/')"&gt;
      &lt;xsl:call-template name="count.uri.path.depth"&gt;
        &lt;xsl:with-param name="filename" select="substring-after($filename, '/')"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="count" select="$count + 1"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$count"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>



<refentry id="trim.common.uri.paths">
<refnamediv>
<refname>trim.common.uri.paths</refname>
<refpurpose>Trim common leading path components from a relative URI</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>This function trims common leading path components from a relative URI.</para>

<programlisting id="trim.common.uri.paths.frag">
&lt;xsl:template name="trim.common.uri.paths"&gt;
  &lt;xsl:param name="uriA" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="uriB" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:param name="return" select="'A'"&gt;&lt;/xsl:param&gt;

  &lt;!-- Resolve any ../ in the path --&gt;
  &lt;xsl:variable name="trimmed.uriA"&gt;
    &lt;xsl:call-template name="resolve.path"&gt;
      &lt;xsl:with-param name="filename" select="$uriA"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:variable name="trimmed.uriB"&gt;
    &lt;xsl:call-template name="resolve.path"&gt;
      &lt;xsl:with-param name="filename" select="$uriB"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:variable&gt;

  &lt;xsl:choose&gt;
    &lt;xsl:when test="contains($trimmed.uriA, '/') and contains($trimmed.uriB, '/')                     and substring-before($trimmed.uriA, '/') = substring-before($trimmed.uriB, '/')"&gt;
      &lt;xsl:call-template name="trim.common.uri.paths"&gt;
        &lt;xsl:with-param name="uriA" select="substring-after($trimmed.uriA, '/')"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="uriB" select="substring-after($trimmed.uriB, '/')"&gt;&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="return" select="$return"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="$return = 'A'"&gt;
          &lt;xsl:value-of select="$trimmed.uriA"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:value-of select="$trimmed.uriB"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>

<refentry id="resolve.path">
<refnamediv>
<refname>resolve.path</refname>
<refpurpose>Resolve any ../ in path, except leading ../</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>This function resolves any relative ../ parts of a file path.</para>

<programlisting id="resolve.path.frag">
&lt;xsl:template name="resolve.path"&gt;
  &lt;xsl:param name="filename" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:choose&gt;
    &lt;!-- Leading .. are not eliminated --&gt;
    &lt;xsl:when test="starts-with($filename, '../')"&gt;
      &lt;xsl:value-of select="'../'"&gt;&lt;/xsl:value-of&gt;
      &lt;xsl:call-template name="resolve.path"&gt;
        &lt;xsl:with-param name="filename" select="substring-after($filename, '../')"&gt;&lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="contains($filename, '/../')"&gt;
      &lt;xsl:call-template name="resolve.path"&gt;
        &lt;xsl:with-param name="filename"&gt;
          &lt;xsl:call-template name="dirname"&gt;
            &lt;xsl:with-param name="filename" select="substring-before($filename, '/../')"&gt;&lt;/xsl:with-param&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:value-of select="substring-after($filename, '/../')"&gt;&lt;/xsl:value-of&gt;
        &lt;/xsl:with-param&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
      &lt;xsl:value-of select="$filename"&gt;&lt;/xsl:value-of&gt;
    &lt;/xsl:otherwise&gt;
  &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;
</programlisting>

</refsect1>
</refentry>

<refentry id="dirname">
<refnamediv>
<refname>dirname</refname>
<refpurpose>Return directory part of a path</refpurpose>
</refnamediv>

<refsect1><title>Description</title>

<para>This function returns the directory part of a path.</para>

<programlisting id="dirname.frag">

&lt;xsl:template name="dirname"&gt;
  &lt;xsl:param name="filename" select="''"&gt;&lt;/xsl:param&gt;
  &lt;xsl:if test="contains($filename, '/')"&gt;
    &lt;xsl:value-of select="substring-before($filename, '/')"&gt;&lt;/xsl:value-of&gt;
    &lt;xsl:text&gt;/&lt;/xsl:text&gt;
    &lt;xsl:call-template name="dirname"&gt;
      &lt;xsl:with-param name="filename" select="substring-after($filename, '/')"&gt;&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;

</programlisting>

</refsect1>
</refentry>

</reference>
    </part>
    <part id="common-part"><title>Common&#160;Template&#160;Reference</title>
      <?dbhtml dir="common"?>
      <?dbhtml filename="index.html"?>
      <info>
        <abstract>
          <para>This is technical reference documentation for the
            &#8220;base&#8221;, &#8220;refentry&#8221;, and &#8220;utility&#8221; sets of common
            templates in the DocBook XSL Stylesheets. These
            templates are &#8220;common&#8221; in that they are shared across
            output formats (that is, they&#8217;re not
            output-format-dependent)</para>
          <para>This documentation is not intended to be user
            documentation. It is provided for developers writing
            customization layers for the stylesheets.</para>
        </abstract>
      </info>
        <reference id="base" xml:base="../common/common.xml">
  <info>
    <title>Common &#187; Base Template Reference</title>
    <releaseinfo role="meta">
      $Id: common.xsl 9347 2012-05-11 03:49:49Z bobstayton $
    </releaseinfo>
  </info>
  
  <partintro id="partintro">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the &#8220;base&#8221;
      set of common templates in the DocBook XSL Stylesheets.</para>

    
<para>This is not intended to be user documentation. It is
      provided for developers writing customization layers for the
      stylesheets.</para>

  </partintro>

<refentry id="template.is.component">
<refnamediv>
<refname>is.component</refname>
<refpurpose>Tests if a given node is a component-level element</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="is.component"&gt;
&lt;xsl:param name="node" select="."/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template returns '1' if the specified node is a component
(Chapter, Appendix, etc.), and '0' otherwise.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>node</term>
<listitem>

<para>The node which is to be tested.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>This template returns '1' if the specified node is a component
(Chapter, Appendix, etc.), and '0' otherwise.</para>

</refsect1></refentry>

<refentry id="template.is.section">
<refnamediv>
<refname>is.section</refname>
<refpurpose>Tests if a given node is a section-level element</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="is.section"&gt;
&lt;xsl:param name="node" select="."/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template returns '1' if the specified node is a section
(Section, Sect1, Sect2, etc.), and '0' otherwise.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>node</term>
<listitem>

<para>The node which is to be tested.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>This template returns '1' if the specified node is a section
(Section, Sect1, Sect2, etc.), and '0' otherwise.</para>

</refsect1></refentry>

<refentry id="template.section.level">
<refnamediv>
<refname>section.level</refname>
<refpurpose>Returns the hierarchical level of a section</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="section.level"&gt;
&lt;xsl:param name="node" select="."/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template calculates the hierarchical level of a section.
The element <tag>sect1</tag> is at level 1, <tag>sect2</tag> is
at level 2, etc.</para>



<para>Recursive sections are calculated down to the fifth level.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>node</term>
<listitem>

<para>The section node for which the level should be calculated.
Defaults to the context node.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>The section level, <quote>1</quote>, <quote>2</quote>, etc.
</para>

</refsect1></refentry>

<refentry id="template.qanda.section.level">
<refnamediv>
<refname>qanda.section.level</refname>
<refpurpose>Returns the hierarchical level of a QandASet</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="qanda.section.level"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template calculates the hierarchical level of a QandASet.
</para>

</refsect1><refsect1><title>Returns</title>

<para>The level, <quote>1</quote>, <quote>2</quote>, etc.
</para>

</refsect1></refentry>

<refentry id="template.select.mediaobject">
<refnamediv>
<refname>select.mediaobject</refname>
<refpurpose>Selects and processes an appropriate media object from a list</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="select.mediaobject"&gt;
&lt;xsl:param name="olist" select="imageobject|imageobjectco                      |videoobject|audioobject|textobject"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template takes a list of media objects (usually the
children of a mediaobject or inlinemediaobject) and processes
the "right" object.</para>



<para>This template relies on a template named 
"select.mediaobject.index" to determine which object
in the list is appropriate.</para>



<para>If no acceptable object is located, nothing happens.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>olist</term>
<listitem>

<para>The node list of potential objects to examine.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>Calls &lt;xsl:apply-templates&gt; on the selected object.</para>

</refsect1></refentry>

<refentry id="template.select.mediaobject.index">
<refnamediv>
<refname>select.mediaobject.index</refname>
<refpurpose>Selects the position of the appropriate media object from a list</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="select.mediaobject.index"&gt;
&lt;xsl:param name="olist" select="imageobject|imageobjectco                      |videoobject|audioobject|textobject"/&gt;
&lt;xsl:param name="count"&gt;1&lt;/xsl:param&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template takes a list of media objects (usually the
children of a mediaobject or inlinemediaobject) and determines
the "right" object. It returns the position of that object
to be used by the calling template.</para>



<para>If the parameter <parameter>use.role.for.mediaobject</parameter>
is nonzero, then it first checks for an object with
a role attribute of the appropriate value.  It takes the first
of those.  Otherwise, it takes the first acceptable object
through a recursive pass through the list.</para>



<para>This template relies on a template named "is.acceptable.mediaobject"
to determine if a given object is an acceptable graphic. The semantics
of media objects is that the first acceptable graphic should be used.
</para>



<para>If no acceptable object is located, no index is returned.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>olist</term>
<listitem>

<para>The node list of potential objects to examine.</para>

</listitem>
</varlistentry>
<varlistentry><term>count</term>
<listitem>

<para>The position in the list currently being considered by the 
recursive process.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>Returns the position in the original list of the selected object.</para>

</refsect1></refentry>

<refentry id="template.is.acceptable.mediaobject">
<refnamediv>
<refname>is.acceptable.mediaobject</refname>
<refpurpose>Returns '1' if the specified media object is recognized</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="is.acceptable.mediaobject"&gt;
&lt;xsl:param name="object"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template examines a media object and returns '1' if the
object is recognized as a graphic.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>object</term>
<listitem>

<para>The media object to consider.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>0 or 1</para>

</refsect1></refentry>

<refentry id="template.check.id.unique">
<refnamediv>
<refname>check.id.unique</refname>
<refpurpose>Warn users about references to non-unique IDs</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="check.id.unique"&gt;
&lt;xsl:param name="linkend"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>If passed an ID in <varname>linkend</varname>,
<function>check.id.unique</function> prints
a warning message to the user if either the ID does not exist or
the ID is not unique.</para>

</refsect1></refentry>

<refentry id="template.check.idref.targets">
<refnamediv>
<refname>check.idref.targets</refname>
<refpurpose>Warn users about incorrectly typed references</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="check.idref.targets"&gt;
&lt;xsl:param name="linkend"/&gt;
&lt;xsl:param name="element-list"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>If passed an ID in <varname>linkend</varname>,
<function>check.idref.targets</function> makes sure that the element
pointed to by the link is one of the elements listed in
<varname>element-list</varname> and warns the user otherwise.</para>

</refsect1></refentry>

<refentry id="template.copyright.years">
<refnamediv>
<refname>copyright.years</refname>
<refpurpose>Print a set of years with collapsed ranges</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="copyright.years"&gt;
&lt;xsl:param name="years"/&gt;
&lt;xsl:param name="print.ranges" select="1"/&gt;
&lt;xsl:param name="single.year.ranges" select="0"/&gt;
&lt;xsl:param name="firstyear" select="0"/&gt;
&lt;xsl:param name="nextyear" select="0"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template prints a list of year elements with consecutive
years printed as a range. In other words:</para>


<screen>&lt;year&gt;1992&lt;/year&gt;
&lt;year&gt;1993&lt;/year&gt;
&lt;year&gt;1994&lt;/year&gt;</screen>


<para>is printed <quote>1992-1994</quote>, whereas:</para>


<screen>&lt;year&gt;1992&lt;/year&gt;
&lt;year&gt;1994&lt;/year&gt;</screen>


<para>is printed <quote>1992, 1994</quote>.</para>



<para>This template assumes that all the year elements contain only
decimal year numbers, that the elements are sorted in increasing
numerical order, that there are no duplicates, and that all the years
are expressed in full <quote>century+year</quote>
(<quote>1999</quote> not <quote>99</quote>) notation.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>years</term>
<listitem>

<para>The initial set of year elements.</para>

</listitem>
</varlistentry>
<varlistentry><term>print.ranges</term>
<listitem>

<para>If non-zero, multi-year ranges are collapsed. If zero, all years
are printed discretely.</para>

</listitem>
</varlistentry>
<varlistentry><term>single.year.ranges</term>
<listitem>

<para>If non-zero, two consecutive years will be printed as a range,
otherwise, they will be printed discretely. In other words, a single
year range is <quote>1991-1992</quote> but discretely it's
<quote>1991, 1992</quote>.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>This template returns the formatted list of years.</para>

</refsect1></refentry>

<refentry id="template.find.path.params">
<refnamediv>
<refname>find.path.params</refname>
<refpurpose>Search in a table for the "best" match for the node</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="find.path.params"&gt;
&lt;xsl:param name="node" select="."/&gt;
&lt;xsl:param name="table" select="''"/&gt;
&lt;xsl:param name="location"&gt;
    &lt;xsl:call-template name="xpath.location"&gt;
      &lt;xsl:with-param name="node" select="$node"/&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:param&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template searches in a table for the value that most-closely
(in the typical best-match sense of XSLT) matches the current (element)
node location.</para>

</refsect1></refentry>

<refentry id="template.string.upper">
<refnamediv>
<refname>string.upper</refname>
<refpurpose>Converts a string to all uppercase letters</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="string.upper"&gt;
&lt;xsl:param name="string" select="''"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>Given a string, this template does a language-aware conversion
of that string to all uppercase letters, based on the values of the
<literal>lowercase.alpha</literal> and
<literal>uppercase.alpha</literal> gentext keys for the current
locale. It affects only those characters found in the values of
<literal>lowercase.alpha</literal> and
<literal>uppercase.alpha</literal>. All other characters are left
unchanged.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>string</term>
<listitem>

<para>The string to convert to uppercase.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1></refentry>

<refentry id="template.string.lower">
<refnamediv>
<refname>string.lower</refname>
<refpurpose>Converts a string to all lowercase letters</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="string.lower"&gt;
&lt;xsl:param name="string" select="''"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>Given a string, this template does a language-aware conversion
of that string to all lowercase letters, based on the values of the
<literal>uppercase.alpha</literal> and
<literal>lowercase.alpha</literal> gentext keys for the current
locale. It affects only those characters found in the values of
<literal>uppercase.alpha</literal> and
<literal>lowercase.alpha</literal>. All other characters are left
unchanged.</para>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>string</term>
<listitem>

<para>The string to convert to lowercase.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1></refentry>

<refentry id="template.select.choice.separator">
<refnamediv>
<refname>select.choice.separator</refname>
<refpurpose>Returns localized choice separator</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="select.choice.separator"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>This template enables auto-generation of an appropriate
    localized "choice" separator (for example, "and" or "or") before
    the final item in an inline list (though it could also be useful
    for generating choice separators for non-inline lists).</para>

    
<para>It currently works by evaluating a processing instruction
    (PI) of the form &lt;?dbchoice&#160;choice="foo"?&gt; :
    
<itemizedlist>
      <listitem>
        <simpara>if the value of the <tag>choice</tag>
        pseudo-attribute is "and" or "or", returns a localized "and"
        or "or"</simpara>
      </listitem>
      <listitem>
        <simpara>otherwise returns the literal value of the
        <tag>choice</tag> pseudo-attribute</simpara>
      </listitem>
    </itemizedlist>

    The latter is provided only as a temporary workaround because the
    locale files do not currently have translations for the word
    <wordasword>or</wordasword>. So if you want to generate a a
    logical "or" separator in French (for example), you currently need
    to do this:
    <literallayout>&lt;?dbchoice choice="ou"?&gt;</literallayout>
    </para>

    <warning>
      
<para>The <tag>dbchoice</tag> processing instruction is
      an unfortunate hack; support for it may disappear in the future
      (particularly if and when a more appropriate means for marking
      up "choice" lists becomes available in DocBook).</para>

    </warning>
  </refsect1></refentry>

<refentry id="template.evaluate.info.profile">
<refnamediv>
<refname>evaluate.info.profile</refname>
<refpurpose>Evaluates an info profile</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="evaluate.info.profile"&gt;
&lt;xsl:param name="profile"/&gt;
&lt;xsl:param name="info"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>This template evaluates an "info profile" matching the XPath
    expression given by the <parameter>profile</parameter>
    parameter. It relies on the XSLT <function>evaluate()</function>
    extension function.</para>


    
<para>The value of the <parameter>profile</parameter> parameter
    can include the literal string <literal>$info</literal>. If found
    in the value of the <parameter>profile</parameter> parameter, the
    literal string <literal>$info</literal> string is replaced with
    the value of the <parameter>info</parameter> parameter, which
    should be a set of <replaceable>*info</replaceable> nodes; the
    expression is then evaluated using the XSLT
    <function>evaluate()</function> extension function.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
       <varlistentry>
        <term>profile</term>
        <listitem>
          
<para>A string representing an XPath expression </para>

        </listitem>
      </varlistentry>
       <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of *info nodes</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a node (the result of evaluating the
    <parameter>profile</parameter> parameter)</para>

  </refsect1></refentry>

<refentry id="template.graphic.format.content-type">
<refnamediv>
<refname>graphic.format.content-type</refname>
<refpurpose>Returns mimetype for media format</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="graphic.format.content-type"&gt;
&lt;xsl:param name="format"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>This takes as input a 'format' param and returns
    a mimetype string.  It uses an xsl:choose after first
    converting the input to all uppercase.</para>

  </refsect1></refentry>
</reference>
        <reference id="refentry" xml:base="../common/refentry.xml">
  <info>
    <title>Common &#187; Refentry Metadata Template Reference</title>
    <releaseinfo role="meta">
      $Id: refentry.xsl 7867 2008-03-07 09:54:25Z xmldoc $
    </releaseinfo>
  </info>
  
  <partintro id="partintro">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the &#8220;refentry
    metadata&#8221; templates in the DocBook XSL Stylesheets.</para>

    
<para>This is not intended to be user documentation. It is provided
    for developers writing customization layers for the stylesheets.</para>

    <note>
      
<para>Currently, only the manpages stylesheets make use of these
      templates. They are, however, potentially useful elsewhere.</para>

    </note>
  </partintro>

<refentry id="template.get.refentry.metadata">
<refnamediv>
<refname>get.refentry.metadata</refname>
<refpurpose>Gathers metadata from a refentry and its ancestors</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.metadata"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>Reference documentation for particular commands, functions,
    etc., is sometimes viewed in isolation from its greater "context". For
    example, users view Unix man pages as, well, individual pages, not as
    part of a "book" of some kind. Therefore, it is sometimes necessary to
    embed "context" information in output for each <tag>refentry</tag>.</para>


    
<para>However, one problem is that different users mark up that
    context information in different ways. Often (usually), the
    context information is not actually part of the content of the
    <tag>refentry</tag> itself, but instead part of the content of a
    parent or ancestor element to the <tag>refentry</tag>. And
    even then, DocBook provides a variety of elements that users might
    potentially use to mark up the same kind of information. One user
    might use the <tag>productnumber</tag> element to mark up version
    information about a particular product, while another might use
    the <tag>releaseinfo</tag> element.</para>


    
<para>Taking all that in mind, the
    <function>get.refentry.metadata</function> template tries to gather
    metadata from a <tag>refentry</tag> element and its ancestor
    elements in an intelligent and user-configurable way. The basic
    mechanism used in the XPath expressions throughout this stylesheet
    is to select the relevant metadata from the *info element that is
    closest to the actual <tag>refentry</tag>&#160;&#8211; either on the
    <tag>refentry</tag> itself, or on its nearest ancestor.</para>


    <note>
      
<para>The <function>get.refentry.metadata</function>
        template is actually just sort of a "driver" template; it
        calls other templates that do the actual data collection,
        then returns the data as a set.</para>

    </note>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing user preferences (from global
          stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a node set with the following elements. The
    descriptions are verbatim from the <literal>man(7)</literal> man
    page.
    
<variablelist>
      <varlistentry>
        <term>title</term>
        <listitem>
          
<para>the title of the man page (e.g., <literal>MAN</literal>)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>section</term>
        <listitem>
          
<para>the section number the man page should be placed in (e.g.,
          <literal>7</literal>)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>date</term>
        <listitem>
          
<para>the date of the last revision</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>source</term>
        <listitem>
          
<para>the source of the command</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>manual</term>
        <listitem>
          
<para>the title of the manual (e.g., <citetitle>Linux
          Programmer's Manual</citetitle>)</para>

        </listitem>
      </varlistentry>
    </variablelist>

    </para>

  </refsect1></refentry>

<refentry id="template.get.refentry.title">
<refnamediv>
<refname>get.refentry.title</refname>
<refpurpose>Gets title metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.title"&gt;
&lt;xsl:param name="refname"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <literal>man(7)</literal> man page describes this as "the
    title of the man page (e.g., <literal>MAN</literal>). This differs
    from <tag>refname</tag> in that, if the <tag>refentry</tag> has a
    <tag>refentrytitle</tag>, we use that as the <tag>title</tag>;
    otherwise, we just use first <tag>refname</tag> in the first
    <tag>refnamediv</tag> in the source.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
  
<para>Returns a <tag>title</tag> node.</para>
</refsect1></refentry>

<refentry id="template.get.refentry.section">
<refnamediv>
<refname>get.refentry.section</refname>
<refpurpose>Gets section metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.section"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="quiet" select="0"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <literal>man(7)</literal> man page describes this as "the
    section number the man page should be placed in (e.g.,
    <literal>7</literal>)". If we do not find a <tag>manvolnum</tag>
    specified in the source, and we find that the <tag>refentry</tag> is
    for a function, we use the section number <literal>3</literal>
    ["Library calls (functions within program libraries)"]; otherwise, we
    default to using <literal>1</literal> ["Executable programs or shell
    commands"].</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>quiet</term>
        <listitem>
          
<para>If non-zero, no "missing" message is emitted</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
  
<para>Returns a string representing a section number.</para>
</refsect1></refentry>

<refentry id="template.get.refentry.date">
<refnamediv>
<refname>get.refentry.date</refname>
<refpurpose>Gets date metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.date"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <literal>man(7)</literal> man page describes this as "the
    date of the last revision". If we cannot find a date in the source, we
    generate one.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing users preferences (from global stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a <tag>date</tag> node.</para>

  </refsect1></refentry>

<refentry id="template.get.refentry.source">
<refnamediv>
<refname>get.refentry.source</refname>
<refpurpose>Gets source metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.source"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <literal>man(7)</literal> man page describes this as "the
    source of the command", and provides the following examples:
    
<itemizedlist>
      <listitem>
        
<para>For binaries, use something like: GNU, NET-2, SLS
        Distribution, MCC Distribution.</para>

      </listitem>
      <listitem>
        
<para>For system calls, use the version of the kernel that you are
        currently looking at: Linux 0.99.11.</para>

      </listitem>
      <listitem>
        
<para>For library calls, use the source of the function: GNU, BSD
        4.3, Linux DLL 4.4.1.</para>

      </listitem>
    </itemizedlist>

    </para>


    
<para>The <literal>solbook(5)</literal> man page describes
    something very much like what <literal>man(7)</literal> calls
    "source", except that <literal>solbook(5)</literal> names it
    "software" and describes it like this:
    <blockquote>
      
<para>This is the name of the software product that the topic
      discussed on the reference page belongs to. For example UNIX
      commands are part of the <literal>SunOS x.x</literal>
      release.</para>

    </blockquote>
    </para>


    
<para>In practice, there are many pages that simply have a version
    number in the "source" field. So, it looks like what we have is a
    two-part field,
    <replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>,
    where:
    
<variablelist>
      <varlistentry>
        <term>Name</term>
        <listitem>
          
<para>product name (e.g., BSD) or org. name (e.g., GNU)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Version</term>
        <listitem>
          
<para>version name</para>

        </listitem>
      </varlistentry>
    </variablelist>

    Each part is optional. If the <replaceable>Name</replaceable> is a
    product name, then the <replaceable>Version</replaceable> is probably
    the version of the product. Or there may be no
    <replaceable>Name</replaceable>, in which case, if there is a
    <replaceable>Version</replaceable>, it is probably the version of the
    item itself, not the product it is part of. Or, if the
    <replaceable>Name</replaceable> is an organization name, then there
    probably will be no <replaceable>Version</replaceable>.
    </para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing users preferences (from global
          stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a <tag>source</tag> node.</para>

  </refsect1></refentry>

<refentry id="template.get.refentry.source.name">
<refnamediv>
<refname>get.refentry.source.name</refname>
<refpurpose>Gets source-name metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.source.name"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>A "source name" is one part of a (potentially) two-part
    <replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>
    source field. For more details, see the documentation for the
    <function>get.refentry.source</function> template.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing users preferences (from global
          stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Depending on what output method is used for the
  current stylesheet, either returns a text node or possibly an element
  node, containing "source name" data.</para>

  </refsect1></refentry>

<refentry id="template.get.refentry.version">
<refnamediv>
<refname>get.refentry.version</refname>
<refpurpose>Gets version metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.version"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>A "version" is one part of a (potentially) two-part
    <replaceable>Name</replaceable>&#160;<replaceable>Version</replaceable>
    source field. For more details, see the documentation for the
    <function>get.refentry.source</function> template.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing users preferences (from global
          stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Depending on what output method is used for the
  current stylesheet, either returns a text node or possibly an element
  node, containing "version" data.</para>

  </refsect1></refentry>

<refentry id="template.get.refentry.manual">
<refnamediv>
<refname>get.refentry.manual</refname>
<refpurpose>Gets source metadata for a refentry</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.manual"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="prefs"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <literal>man(7)</literal> man page describes this as "the
    title of the manual (e.g., <citetitle>Linux Programmer's
    Manual</citetitle>)". Here are some examples from existing man pages:
    
<itemizedlist>
      <listitem>
        
<para><citetitle>dpkg utilities</citetitle>
        (<command>dpkg-name</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>User Contributed Perl Documentation</citetitle>
        (<command>GET</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>GNU Development Tools</citetitle>
        (<command>ld</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>Emperor Norton Utilities</citetitle>
        (<command>ddate</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>Debian GNU/Linux manual</citetitle>
        (<command>faked</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>GIMP Manual Pages</citetitle>
        (<command>gimp</command>)</para>

      </listitem>
      <listitem>
        
<para><citetitle>KDOC Documentation System</citetitle>
        (<command>qt2kdoc</command>)</para>

      </listitem>
    </itemizedlist>

    </para>


    
<para>The <literal>solbook(5)</literal> man page describes
    something very much like what <literal>man(7)</literal> calls
    "manual", except that <literal>solbook(5)</literal> names it
    "sectdesc" and describes it like this:
    <blockquote>
      
<para>This is the section title of the reference page; for
      example <literal>User Commands</literal>.</para>

    </blockquote>
    </para>


  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A set of info nodes (from a <tag>refentry</tag>
          element and its ancestors)</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prefs</term>
        <listitem>
          
<para>A node containing users preferences (from global
          stylesheet parameters)</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a <tag>manual</tag> node.</para>

  </refsect1></refentry>

<refentry id="template.get.refentry.metadata.prefs">
<refnamediv>
<refname>get.refentry.metadata.prefs</refname>
<refpurpose>Gets user preferences for refentry metadata gathering</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.refentry.metadata.prefs"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The DocBook XSL stylesheets include several user-configurable
    global stylesheet parameters for controlling <tag>refentry</tag>
    metadata gathering. Those parameters are not read directly by the
    other <tag>refentry</tag> metadata-gathering
    templates. Instead, they are read only by the
    <function>get.refentry.metadata.prefs</function> template,
    which assembles them into a structure that is then passed to
    the other <tag>refentry</tag> metadata-gathering
    templates.</para>


    
<para>So the, <function>get.refentry.metadata.prefs</function>
    template is the only interface to collecting stylesheet parameters for
    controlling <tag>refentry</tag> metadata gathering.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<para>There are no local parameters for this template; however, it
    does rely on a number of global parameters.</para>

  </refsect1><refsect1><title>Returns</title>
    
<para>Returns a <tag>manual</tag> node.</para>

  </refsect1></refentry>

<refentry id="template.set.refentry.metadata">
<refnamediv>
<refname>set.refentry.metadata</refname>
<refpurpose>Sets content of a refentry metadata item</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="set.refentry.metadata"&gt;
&lt;xsl:param name="refname"/&gt;
&lt;xsl:param name="info"/&gt;
&lt;xsl:param name="contents"/&gt;
&lt;xsl:param name="context"/&gt;
&lt;xsl:param name="preferred"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <function>set.refentry.metadata</function> template is
    called each time a suitable source element is found for a certain
    metadata field.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry>
        <term>refname</term>
        <listitem>
          
<para>The first <tag>refname</tag> in the refentry</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>info</term>
        <listitem>
          
<para>A single *info node that contains the selected source element.</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>contents</term>
        <listitem>
          
<para>A node containing the selected source element.</para>

        </listitem>
      </varlistentry>
      <varlistentry>
        <term>context</term>
        <listitem>
          
<para>A string describing the metadata context in which the
          <function>set.refentry.metadata</function> template was
          called: either "date", "source", "version", or "manual".</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
  
<para>Returns formatted contents of a selected source element.</para>
</refsect1></refentry>
</reference>
        <reference id="utility" xml:base="../common/utility.xml">
  <info>
    <title>Common &#187; Utility Template Reference</title>
    <releaseinfo role="meta">
      $Id: utility.xsl 7101 2007-07-20 15:32:12Z xmldoc $
    </releaseinfo>
  </info>
  
  <partintro id="partintro">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the
      miscellaneous utility templates in the DocBook XSL
      Stylesheets.</para>

    <note>
      
<para>These templates are defined in a separate file from the set
        of &#8220;common&#8221; templates because some of the common templates
        reference DocBook XSL stylesheet parameters, requiring the
        entire set of parameters to be imported/included in any
        stylesheet that imports/includes the common templates.</para>

      
<para>The utility templates don&#8217;t import or include any DocBook
        XSL stylesheet parameters, so the utility templates can be used
        without importing the whole set of parameters.</para>

    </note>
    
<para>This is not intended to be user documentation. It is
      provided for developers writing customization layers for the
      stylesheets.</para>

  </partintro>

<refentry id="template.log.message">
<refnamediv>
<refname>log.message</refname>
<refpurpose>Logs/emits formatted notes and warnings</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="log.message"&gt;
&lt;xsl:param name="level"/&gt;
&lt;xsl:param name="source"/&gt;
&lt;xsl:param name="context-desc"/&gt;
&lt;xsl:param name="context-desc-field-length"&gt;12&lt;/xsl:param&gt;
&lt;xsl:param name="context-desc-padded"&gt;
    &lt;xsl:if test="not($context-desc = '')"&gt;
      &lt;xsl:call-template name="pad-string"&gt;
        &lt;xsl:with-param name="leftRight"&gt;right&lt;/xsl:with-param&gt;
        &lt;xsl:with-param name="padVar" select="substring($context-desc, 1, $context-desc-field-length)"/&gt;
        &lt;xsl:with-param name="length" select="$context-desc-field-length"/&gt;
      &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:param&gt;
&lt;xsl:param name="message"/&gt;
&lt;xsl:param name="message-field-length" select="45"/&gt;
&lt;xsl:param name="message-padded"&gt;
    &lt;xsl:variable name="spaces-for-blank-level"&gt;
      &lt;!-- * if the level field is blank, we'll need to pad out --&gt;
      &lt;!-- * the message field with spaces to compensate --&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="$level = ''"&gt;
          &lt;xsl:value-of select="4 + 2"/&gt;
          &lt;!-- * 4 = hard-coded length of comment text ("Note" or "Warn") --&gt;
          &lt;!-- * + 2 = length of colon-plus-space separator ": " --&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:value-of select="0"/&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="spaces-for-blank-context-desc"&gt;
      &lt;!-- * if the context-description field is blank, we'll need --&gt;
      &lt;!-- * to pad out the message field with spaces to compensate --&gt;
      &lt;xsl:choose&gt;
        &lt;xsl:when test="$context-desc = ''"&gt;
          &lt;xsl:value-of select="$context-desc-field-length + 2"/&gt;
          &lt;!-- * + 2 = length of colon-plus-space separator ": " --&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:value-of select="0"/&gt;
        &lt;/xsl:otherwise&gt;
      &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:variable name="extra-spaces" select="$spaces-for-blank-level + $spaces-for-blank-context-desc"/&gt;
    &lt;xsl:call-template name="pad-string"&gt;
      &lt;xsl:with-param name="leftRight"&gt;right&lt;/xsl:with-param&gt;
      &lt;xsl:with-param name="padVar" select="substring($message, 1, ($message-field-length + $extra-spaces))"/&gt;
      &lt;xsl:with-param name="length" select="$message-field-length + $extra-spaces"/&gt;
    &lt;/xsl:call-template&gt;
  &lt;/xsl:param&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <function>log.message</function> template is a utility
    template for logging/emitting formatted messages&#160;&#8211; that is,
    notes and warnings, along with a given log &#8220;level&#8221; and an
    identifier for the &#8220;source&#8221; that the message relates to.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>level</term>
        <listitem>
          
<para>Text to log/emit in the message-level field to
            indicate the message level
          (<literal>Note</literal> or
          <literal>Warning</literal>)</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>source</term>
        <listitem>
          
<para>Text to log/emit in the source field to identify the
            &#8220;source&#8221; to which the notification/warning relates.
            This can be any arbitrary string, but because the
            message lacks line and column numbers to identify the
            exact part of the source document to which it
            relates, the intention is that the value you pass
            into the <literal>source</literal> parameter should
            give the user some way to identify the portion of
            their source document on which to take potentially
            take action in response to the log message (for
            example, to edit, change, or add content).</para>

          
<para>So the <literal>source</literal> value should be,
            for example, an ID, book/chapter/article title, title
            of some formal object, or even a string giving an
            XPath expression.</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>context-desc</term>
        <listitem>
          
<para>Text to log/emit in the context-description field to
            describe the context for the message.</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>context-desc-field-length</term>
        <listitem>
          
<para>Specifies length of the context-description field
            (in characters); default is 12</para>

          
<para>If the text specified by the
            <literal>context-desc</literal> parameter is longer
            than the number of characters specified in
            <literal>context-desc-field-length</literal>, it is
            truncated to <literal>context-desc-field-length</literal>
            (12 characters by default).</para>

          
<para>If the specified text is shorter than
            <literal>context-desc-field-length</literal>,
          it is right-padded out to
          <literal>context-desc-field-length</literal> (12 by
          default).</para>

        
<para>If no value has been specified for the
          <literal>context-desc</literal> parameter, the field is
          left empty and the text of the log message begins with
          the value of the <literal>message</literal>
          parameter.</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>message</term>
        <listitem>
          
<para>Text to log/emit in the actual message field</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>message-field-length</term>
        <listitem>
          
<para>Specifies length of the message
            field (in characters); default is 45</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1><refsect1><title>Returns</title>
  
<para>Outputs a message (generally, to standard error).</para>
</refsect1></refentry>

<refentry id="template.get.doc.title">
<refnamediv>
<refname>get.doc.title</refname>
<refpurpose>Gets a title from the current document</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="get.doc.title"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The <function>get.doc.title</function> template is a
      utility template for returning the first title found in the
      current document.</para>

  </refsect1><refsect1><title>Returns</title>
  
<para>Returns a string containing some identifying title for the
    current document .</para>
</refsect1></refentry>

<refentry id="template.pad-string">
<refnamediv>
<refname>pad-string</refname>
<refpurpose>Right-pads or left-pads a string out to a certain length</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="pad-string"&gt;
&lt;xsl:param name="padChar" select="' '"/&gt;
&lt;xsl:param name="leftRight"&gt;left&lt;/xsl:param&gt;
&lt;xsl:param name="padVar"/&gt;
&lt;xsl:param name="length"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>This function takes string <parameter>padVar</parameter> and
      pads it out in the direction <parameter>rightLeft</parameter> to
      the string-length <parameter>length</parameter>, using string
      <parameter>padChar</parameter> (a space character by default) as
      the padding string (note that <parameter>padChar</parameter> can
      be a string; it is not limited to just being a single
      character).</para>

    <note>
      
<para>This function began as a copy of Nate Austin's
        <function>prepend-pad</function> function in the <link xlink:href="http://www.dpawson.co.uk/xsl/sect2/padding.html">Padding
          Content</link> section of Dave Pawson's <link xlink:href="http://www.dpawson.co.uk/xsl/index.html">XSLT
          FAQ</link>.</para>

    </note>
  </refsect1><refsect1><title>Returns</title>
  
<para>Returns a (padded) string.</para>
</refsect1></refentry>
</reference>
        <reference id="charmap" xml:base="../common/charmap.xml">
  <info>
    <title>Common &#187; Character-Map Template Reference</title>
    <releaseinfo role="meta">
      $Id: charmap.xsl 7266 2007-08-22 11:58:42Z xmldoc $
    </releaseinfo>
  </info>
  
  <partintro id="partintro">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the
      character-map templates in the DocBook XSL Stylesheets.</para>

    <note>
      
<para>These templates are defined in a separate file from the set
        of &#8220;common&#8221; templates because some of the common templates
        reference DocBook XSL stylesheet parameters, requiring the
        entire set of parameters to be imported/included in any
        stylesheet that imports/includes the common templates.</para>

      
<para>The character-map templates don&#8217;t import or include
        any DocBook XSL stylesheet parameters, so the
        character-map templates can be used without importing the
        whole set of parameters.</para>

    </note>
    
<para>This is not intended to be user documentation. It is
      provided for developers writing customization layers for the
      stylesheets.</para>

  </partintro>

<refentry id="template.apply-character-map">
<refnamediv>
<refname>apply-character-map</refname>
<refpurpose>Applies an XSLT character map</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="apply-character-map"&gt;
&lt;xsl:param name="content"/&gt;
&lt;xsl:param name="map.contents"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>This template applies an <link xlink:href="http://www.w3.org/TR/xslt20/#character-maps">XSLT character map</link>; that is, it causes certain
      individual characters to be substituted with strings of one
      or more characters. It is useful mainly for replacing
      multiple &#8220;special&#8221; characters or symbols in the same target
      content. It uses the value of
      <parameter>map.contents</parameter> to do substitution on
      <parameter>content</parameter>, and then returns the
      modified contents.</para>

    <note>
      
<para>This template is a very slightly modified version of
        Jeni Tennison&#8217;s <function>replace_strings</function>
        template in the <link xlink:href="http://www.dpawson.co.uk/xsl/sect2/StringReplace.html#d9351e13">multiple string replacements</link> section of Dave Pawson&#8217;s
        <link xlink:href="http://www.dpawson.co.uk/xsl/index.html">XSLT FAQ</link>.</para>

      
<para>The <function>apply-string-subst-map</function>
        template is essentially the same template as the
        <function>apply-character-map</function> template; the
        only difference is that in the map that
        <function>apply-string-subst-map</function> expects, <tag class="attribute">oldstring</tag> and <tag class="attribute">newstring</tag> attributes are used
        instead of <tag class="attribute">character</tag> and <tag class="attribute">string</tag> attributes.</para>

    </note>
  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>content</term>
        <listitem>
          
<para>The content on which to perform the character-map
            substitution.</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>map.contents</term>
        <listitem>
          
<para>A node set of elements, with each element having
            the following attributes:
            
<itemizedlist>
              <listitem>
                <simpara><tag class="attribute">character</tag>, a
                  character to be replaced</simpara>
              </listitem>
              <listitem>
                <simpara><tag class="attribute">string</tag>, a
                  string with which to replace <tag class="attribute">character</tag></simpara>
              </listitem>
            </itemizedlist>

          </para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>

<refentry id="template.read-character-map">
<refnamediv>
<refname>read-character-map</refname>
<refpurpose>Reads in all or part of an XSLT character map</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="read-character-map"&gt;
&lt;xsl:param name="use.subset"/&gt;
&lt;xsl:param name="subset.profile"/&gt;
&lt;xsl:param name="uri"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>
    
<para>The XSLT 2.0 specification describes <link xlink:href="http://www.w3.org/TR/xslt20/#character-maps">character maps</link> and explains how they may be used
      to allow a specific character appearing in a text or
      attribute node in a final result tree to be substituted by
      a specified string of characters during serialization. The
      <function>read-character-map</function> template provides a
      means for reading and using character maps with XSLT
      1.0-based tools.</para>

    
<para>This template reads the character-map contents from
      <parameter>uri</parameter> (in full or in part, depending on
      the value of the <parameter>use.subset</parameter>
      parameter), then passes those contents to the
      <function>apply-character-map</function> template, along with
      <parameter>content</parameter>, the data on which to perform
      the character substitution.</para>

    
<para>Using the character map &#8220;in part&#8221; means that it uses only
      those <tag>output-character</tag> elements that match the
      XPath expression given in the value of the
      <parameter>subset.profile</parameter> parameter. The current
      implementation of that capability here relies on the
      <function>evaluate</function> extension XSLT function.</para>

  </refsect1><refsect1><title>Parameters</title>
    
<variablelist>
      <varlistentry><term>use.subset</term>
        <listitem>
          
<para>Specifies whether to use a subset of the character
            map instead of the whole map; boolean
            <literal>0</literal> or <literal>1</literal></para>

        </listitem>
      </varlistentry>
      <varlistentry><term>subset.profile</term>
        <listitem>
          
<para>XPath expression that specifies what subset of the
            character map to use</para>

        </listitem>
      </varlistentry>
      <varlistentry><term>uri</term>
        <listitem>
          
<para>URI for a character map</para>

        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1></refentry>
</reference>
    </part>
    <part id="table-templates">
      <?dbhtml dir="fo"?>
  
  <info xml:base="../fo/table.xml">
    <title>Formatting Object Table Reference</title>
    <releaseinfo role="meta">
      $Id: table.xsl 9666 2012-11-14 04:42:56Z bobstayton $
    </releaseinfo>
  </info>
  <partintro id="partintro" xml:base="../fo/table.xml">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the FO
      table-processing templates in the DocBook XSL Stylesheets.</para>

    
<para>This is not intended to be user documentation.  It is
      provided for developers writing customization layers for the
      stylesheets.</para>

  </partintro>

<refentry id="template.calc.column.width" xml:base="../fo/table.xml">
<refnamediv>
<refname>calc.column.width</refname>
<refpurpose>Calculate an XSL FO table column width specification from a
CALS table column width specification.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="calc.column.width"&gt;
&lt;xsl:param name="colwidth"&gt;1*&lt;/xsl:param&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>CALS expresses table column widths in the following basic
forms:</para>



<itemizedlist>
<listitem>

<para><emphasis>99.99units</emphasis>, a fixed length specifier.</para>

</listitem>
<listitem>

<para><emphasis>99.99</emphasis>, a fixed length specifier without any units.</para>

</listitem>
<listitem>

<para><emphasis>99.99*</emphasis>, a relative length specifier.</para>

</listitem>
<listitem>

<para><emphasis>99.99*+99.99units</emphasis>, a combination of both.</para>

</listitem>
</itemizedlist>



<para>The CALS units are points (pt), picas (pi), centimeters (cm),
millimeters (mm), and inches (in). These are the same units as XSL,
except that XSL abbreviates picas "pc" instead of "pi". If a length
specifier has no units, the CALS default unit (pt) is assumed.</para>



<para>Relative length specifiers are represented in XSL with the
proportional-column-width() function.</para>



<para>Here are some examples:</para>



<itemizedlist>
<listitem>

<para>"36pt" becomes "36pt"</para>

</listitem>
<listitem>

<para>"3pi" becomes "3pc"</para>

</listitem>
<listitem>

<para>"36" becomes "36pt"</para>

</listitem>
<listitem>

<para>"3*" becomes "proportional-column-width(3)"</para>

</listitem>
<listitem>

<para>"3*+2pi" becomes "proportional-column-width(3)+2pc"</para>

</listitem>
<listitem>

<para>"1*+2" becomes "proportional-column-width(1)+2pt"</para>

</listitem>
</itemizedlist>

</refsect1><refsect1><title>Parameters</title>

<variablelist>
<varlistentry><term>colwidth</term>
<listitem>

<para>The CALS column width specification.</para>

</listitem>
</varlistentry>
</variablelist>

</refsect1><refsect1><title>Returns</title>

<para>The XSL column width specification.</para>

</refsect1></refentry>

    </part>
    <part id="template"> 
      <?dbhtml dir="template"?><?dbhtml filename="index.html"?>
  
  
  <info xml:base="../template/titlepage.xml">
    <title>Titlepage Template Stylesheet Reference</title>
    <releaseinfo role="meta">
      $Id: titlepage.xsl 9600 2012-09-11 12:12:09Z kosek $
    </releaseinfo>
  </info>
  <partintro id="intro_partintro" xml:base="../template/titlepage.xml">
    <title>Introduction</title>
    
<para>This is technical reference documentation for the
      &#8220;titlepage&#8221; templates in the DocBook XSL Stylesheets.</para>

    
<para>This is not intended to be user documentation.  It is
      provided for developers writing customization layers for the
      stylesheets.</para>

  </partintro>

<refentry id="templates" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:templates</refname>
<refpurpose>Construct a stylesheet for the templates provided</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:templates"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>The <literal>t:templates</literal> element is the root of a
set of templates. This template creates an appropriate
<literal>xsl:stylesheet</literal> for the templates.</para>



<para>If the <literal>t:templates</literal> element has a
<literal>base-stylesheet</literal> attribute, an
<literal>xsl:import</literal> statement is constructed for it.</para>

</refsect1></refentry>

<refentry id="star" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>xsl:*</refname>
<refpurpose>Copy xsl: elements straight through</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="xsl:*"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template simply copies the xsl: elements
straight through into the result tree.</para>

</refsect1></refentry>

<refentry id="titlepage" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:titlepage</refname>
<refpurpose>Create the templates necessary to construct a title page</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:titlepage"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>The <literal>t:titlepage</literal> element creates a set of
templates for processing the titlepage for an element. The
<quote>root</quote> of this template set is the template named
<quote><literal>wrapper.titlepage</literal></quote>. That is the
template that should be called to generate the title page.
</para>



<para>The <literal>t:titlepage</literal> element has three attributes:


<variablelist>
<varlistentry><term>element</term>
<listitem>
<para>The name of the source document element for which
these templates apply. In other words, to make a title page for the
<tag>article</tag> element, set the
<tag class="attribute">element</tag> attribute to
<quote><literal>article</literal></quote>. This attribute is required.
</para>
</listitem>
</varlistentry>
<varlistentry><term>wrapper</term>
<listitem>
<para>The entire title page can be wrapped with an element.
This attribute identifies that element.
</para>
</listitem>
</varlistentry>
<varlistentry><term>class</term>
<listitem>
<para>If the <tag class="attribute">class</tag> attribute
is set, a <tag class="attribute">class</tag> attribute with this
value will be added to the wrapper element that surrounds the entire
title page.
</para>
</listitem>
</varlistentry>
</variablelist>

</para>



<para>Any other attributes are copied through literally to the
wrapper element.</para>



<para>The content of a <literal>t:titlepage</literal> is one or
more <literal>t:titlepage-content</literal>,
<literal>t:titlepage-separator</literal>, and
<literal>t:titlepage-before</literal> elements.</para>



<para>Each of these elements may be provided for the <quote>recto</quote>
and <quote>verso</quote> sides of the title page.</para>


</refsect1></refentry>

<refentry id="attr_star_in_copy.literal.atts" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>@* (in copy.literal.atts mode)</refname>
<refpurpose>Copy t:titlepage attributes</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="@*" mode="copy.literal.atts"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template copies all of the <quote>other</quote> attributes
from a <literal>t:titlepage</literal> element onto the specified
wrapper.</para>

</refsect1></refentry>

<refentry id="titlepage-content" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:titlepage-content</refname>
<refpurpose>Create templates for the content of one side of a title page</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:titlepage-content"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>The title page content, that is, the elements from the source
document that are rendered on the title page, can be controlled independently
for the recto and verso sides of the title page.</para>



<para>The <literal>t:titlepage-content</literal> element has two attributes:


<variablelist>
<varlistentry><term>side</term>
<listitem>
<para>Identifies the side of the page to which this title
page content applies. The
<tag class="attribute">side</tag> attribute is required and
must be set to either 
<quote><literal>recto</literal></quote> or
<quote><literal>verso</literal></quote>. In addition, you must specify
exactly one <literal>t:titlepage-content</literal> for each side
within each <literal>t:titlepage</literal>.</para>

</listitem>
</varlistentry>
<varlistentry><term>order</term>
<listitem>
<para>Indicates how the order of the elements presented on
the title page is determined. If the
<tag class="attribute">order</tag> is
<quote><literal>document</literal></quote>, the elements are presented
in document order. Otherwise (if the
<tag class="attribute">order</tag> is
<quote><literal>stylesheet</literal></quote>), the elements are presented
in the order that they appear in the template (and consequently in
the stylesheet).</para>

</listitem>
</varlistentry>
</variablelist>

</para>



<para>The content of a <literal>t:titlepage-content</literal> element is
a list of element names. These names should be unqualified.  They identify
the elements in the source document that should appear on the title page.
</para>



<para>Each element may have a single attribute:
<tag class="attribute">predicate</tag>. The value of this
attribute is used as a predicate for the expression that matches
the element on which it occurs.</para>



<para>In other words, to put only the first three authors on the
recto-side of a title
page, you could specify:

<screen>
  &lt;t:titlepage-contents side="recto"&gt;
    &lt;!-- other titlepage elements --&gt;
    &lt;author predicate="[count(previous-sibling::author)&lt;2]"/&gt;
    &lt;!-- other titlepage elements --&gt;
  &lt;/t:titlepage-contents&gt;
</screen>
</para>



<para>Usually, the elements so named are empty. But it is possible to
make one level of selection within them. Suppose that you want to
process <literal>authorgroup</literal> elements on the title page, but
you want to select only proper authors, editors, or corporate authors,
not collaborators or other credited authors.</para>



<para>In that case, you can put a <literal>t:or</literal> group inside
the <literal>authorgroup</literal> element:

<screen>
  &lt;t:titlepage-contents side="recto"&gt;
    &lt;!-- other titlepage elements --&gt;
    &lt;authorgroup&gt;
      &lt;t:or&gt;
        &lt;author/&gt;
        &lt;editor/&gt;
        &lt;corpauthor/&gt;
      &lt;/t:or&gt;
    &lt;/authorgroup&gt;
    &lt;!-- other titlepage elements --&gt;
  &lt;/t:titlepage-contents&gt;
</screen>
</para>



<para>This will have the effect of automatically generating a template
for processing <literal>authorgroup</literal>s in the title page mode,
selecting only the specified children. If you need more complex processing,
you'll have to construct the templates by hand.</para>


</refsect1></refentry>

<refentry id="titlepage-separator" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:titlepage-separator</refname>
<refpurpose>Create templates for the separator</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:titlepage-separator"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>The title page is separated from the content which follows it by
the markup specified in the <literal>t:titlepage-separator</literal>
element.</para>

</refsect1></refentry>

<refentry id="titlepage-before" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:titlepage-before</refname>
<refpurpose>Create templates for what precedes a title page</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:titlepage-before"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>Each side of the title page is preceded by the markup specified
in the <literal>t:titlepage-before</literal> element for that
side.</para>

</refsect1></refentry>

<refentry id="star_in_copy" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>* (in copy mode)</refname>
<refpurpose>Copy elements</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="*" mode="copy"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template simply copies the elements that it applies to
straight through into the result tree.</para>

</refsect1></refentry>

<refentry id="attr_star_in_copy" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>@* (in copy mode)</refname>
<refpurpose>Copy attributes</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="@*" mode="copy"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template simply copies the attributes that it applies to
straight through into the result tree.</para>

</refsect1></refentry>

<refentry id="attr_star_in_document.order" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>* (in document.order mode)</refname>
<refpurpose>Create rules to process titlepage elements in document order</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="*" mode="document.order"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template is called to process all of the children of the
<literal>t:titlepage-content</literal> element. It creates the hairy
select expression necessary to process each of those elements in
the title page.</para>



<para>Note that this template automatically handles the case where
some DocBook elements, like title and subtitle, can occur both inside
the *info elements where metadata is usually stored and outside.
</para>



<para>It also automatically calculates the name for the *info container
and handles elements that have historically had containers with different
names.</para>


</refsect1></refentry>

<refentry id="star_in_document.order" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>* (in document.order mode)</refname>
<refpurpose>Create rules to process titlepage elements in stylesheet order</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="*" mode="document.order"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template is called to process all of the children of the
<literal>t:titlepage-content</literal> element. It creates the set
of <literal>xsl:apply-templates</literal> elements necessary
process each of those elements in the title page.</para>



<para>Note that this template automatically handles the case where
some DocBook elements, like title and subtitle, can occur both inside
the *info elements where metadata is usually stored and outside.
</para>



<para>It also automatically calculates the name for the *info container
and handles elements that have historically had containers with different
names.</para>


</refsect1></refentry>

<refentry id="star_in_titlepage.specialrules" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>* (in titlepage.specialrules mode)</refname>
<refpurpose>Create templates for special rules</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="*" mode="titlepage.specialrules"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template is called to process all of the descendants of the
<literal>t:titlepage-content</literal> element that require special
processing. At present, that's just <literal>t:or</literal> elements.
</para>

</refsect1></refentry>

<refentry id="star_in_titlepage.subrules" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>* (in titlepage.subrules mode)</refname>
<refpurpose>Create template for individual special rules</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="*" mode="titlepage.subrules"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template is called to process the children of special
template elements.
</para>

</refsect1></refentry>

<refentry id="or" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:or</refname>
<refpurpose>Process the t:or special rule</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:or"/&gt;&lt;xsl:template match="t:or" mode="titlepage.subrules"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>This template processes t:or.</para>

</refsect1></refentry>

<refentry id="or_in_titlepage.subrules" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>t:or (in titlepage.subrules mode)</refname>
<refpurpose>Process the t:or special rule in
titlepage.subrules mode</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template match="t:or" mode="titlepage.subrules"/&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>The titlepage.subrules mode doesn't apply to t:or, so just
reprocess this node in the normal mode.</para>

</refsect1></refentry>

<refentry id="template.element-or-list" xml:base="../template/titlepage.xml">
<refnamediv>
<refname>element-or-list</refname>
<refpurpose>Construct the "or-list" used in the select attribute for
special rules.</refpurpose>
</refnamediv>
<refsynopsisdiv>
<synopsis>&lt;xsl:template name="element-or-list"&gt;
&lt;xsl:param name="elements" select="*"/&gt;
&lt;xsl:param name="element.count" select="count($elements)"/&gt;
&lt;xsl:param name="count" select="1"/&gt;
&lt;xsl:param name="orlist"/&gt;
  ...
&lt;/xsl:template&gt;</synopsis>
</refsynopsisdiv>
<refsect1><title>Description</title>

<para>Walk through each of the children of t:or, producing the
text of the select attribute.</para>

</refsect1></refentry>

    </part>
  </book>
</set><!-- * vim: set ft=docbk foldlevel=2: -->